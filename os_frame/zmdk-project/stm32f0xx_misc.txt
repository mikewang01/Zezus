; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\stm32f0xx_misc.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32f0xx_misc.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\stm32f0xx_misc.crf ..\arch\arm\stm32f05x\lib\src\stm32f0xx_misc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_Init PROC
;;;78       */
;;;79     void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;80     {
;;;81       uint32_t tmppriority = 0x00;
;;;82       
;;;83       /* Check the parameters */
;;;84       assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;85       assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
;;;86         
;;;87       if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000002  7882              LDRB     r2,[r0,#2]
;;;88       {
;;;89         /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;90         tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
;;;91         tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
;;;92         tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
;;;93         
;;;94         NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
;;;95         
;;;96         /* Enable the Selected IRQ Channels --------------------------------------*/
;;;97         NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
000004  2401              MOVS     r4,#1
000006  7801              LDRB     r1,[r0,#0]            ;90
000008  2a00              CMP      r2,#0                 ;87
00000a  d015              BEQ      |L1.56|
00000c  088b              LSRS     r3,r1,#2              ;90
00000e  4a17              LDR      r2,|L1.108|
000010  009b              LSLS     r3,r3,#2              ;90
000012  189a              ADDS     r2,r3,r2              ;90
000014  6813              LDR      r3,[r2,#0]            ;90
000016  0789              LSLS     r1,r1,#30             ;91
000018  0ec9              LSRS     r1,r1,#27             ;91
00001a  25ff              MOVS     r5,#0xff              ;91
00001c  408d              LSLS     r5,r5,r1              ;91
00001e  43ab              BICS     r3,r3,r5              ;91
000020  7845              LDRB     r5,[r0,#1]            ;92
000022  07ad              LSLS     r5,r5,#30             ;92
000024  0e2d              LSRS     r5,r5,#24             ;92
000026  408d              LSLS     r5,r5,r1              ;92
000028  431d              ORRS     r5,r5,r3              ;92
00002a  6015              STR      r5,[r2,#0]            ;94
00002c  7800              LDRB     r0,[r0,#0]
00002e  06c0              LSLS     r0,r0,#27
000030  0ec0              LSRS     r0,r0,#27
000032  4084              LSLS     r4,r4,r0
000034  480e              LDR      r0,|L1.112|
000036  e004              B        |L1.66|
                  |L1.56|
;;;98       }
;;;99       else
;;;100      {
;;;101        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;102        NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
000038  06c8              LSLS     r0,r1,#27
00003a  0ec0              LSRS     r0,r0,#27
00003c  4084              LSLS     r4,r4,r0
00003e  480c              LDR      r0,|L1.112|
000040  3080              ADDS     r0,r0,#0x80
                  |L1.66|
000042  6004              STR      r4,[r0,#0]            ;97
;;;103      }
;;;104    }
000044  bd30              POP      {r4,r5,pc}
;;;105    
                          ENDP

                  NVIC_SystemLPConfig PROC
;;;116      */
;;;117    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000046  4a0b              LDR      r2,|L1.116|
;;;118    {
;;;119      /* Check the parameters */
;;;120      assert_param(IS_NVIC_LP(LowPowerMode));
;;;121      
;;;122      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;123      
;;;124      if (NewState != DISABLE)
000048  2900              CMP      r1,#0
;;;125      {
;;;126        SCB->SCR |= LowPowerMode;
;;;127      }
;;;128      else
;;;129      {
;;;130        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
00004a  6911              LDR      r1,[r2,#0x10]
00004c  d001              BEQ      |L1.82|
00004e  4301              ORRS     r1,r1,r0              ;126
000050  e000              B        |L1.84|
                  |L1.82|
000052  4381              BICS     r1,r1,r0
                  |L1.84|
000054  6111              STR      r1,[r2,#0x10]         ;126
;;;131      }
;;;132    }
000056  4770              BX       lr
;;;133    
                          ENDP

                  SysTick_CLKSourceConfig PROC
;;;141      */
;;;142    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000058  2204              MOVS     r2,#4
;;;143    {
;;;144      /* Check the parameters */
;;;145      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;146      
;;;147      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
;;;148      {
;;;149        SysTick->CTRL |= SysTick_CLKSource_HCLK;
00005a  4907              LDR      r1,|L1.120|
00005c  2804              CMP      r0,#4                 ;147
;;;150      }
;;;151      else
;;;152      {
;;;153        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
00005e  6908              LDR      r0,[r1,#0x10]
000060  d002              BEQ      |L1.104|
000062  4390              BICS     r0,r0,r2
                  |L1.100|
000064  6108              STR      r0,[r1,#0x10]         ;149
;;;154      }
;;;155    }
000066  4770              BX       lr
                  |L1.104|
000068  4310              ORRS     r0,r0,r2              ;149
00006a  e7fb              B        |L1.100|
;;;156    
                          ENDP

                  |L1.108|
                          DCD      0xe000e400
                  |L1.112|
                          DCD      0xe000e100
                  |L1.116|
                          DCD      0xe000ed00
                  |L1.120|
                          DCD      0xe000e000

;*** Start embedded assembler ***

#line 1 "..\\arch\\arm\\stm32f05x\\lib\\src\\stm32f0xx_misc.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f0xx_misc_c_c60eb25e____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f0xx_misc_c_c60eb25e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f0xx_misc_c_c60eb25e____REVSH|
#line 144
|__asm___16_stm32f0xx_misc_c_c60eb25e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
