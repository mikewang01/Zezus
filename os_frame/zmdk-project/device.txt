; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\device.o --asm_dir=.\ --list_dir=.\ --depend=.\device.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\device.crf ..\kernel\devmngr\device.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  os_device_register PROC
;;;57      */
;;;58     os_err_t os_device_register(os_device_t *dev,   
000000  b570              PUSH     {r4-r6,lr}
;;;59                                 const char  *name,   
;;;60                                 u16 flags)   
;;;61     {   
000002  4615              MOV      r5,r2
000004  0004              MOVS     r4,r0
000006  460e              MOV      r6,r1
000008  d005              BEQ      |L1.22|
;;;62         if (dev == NULL)   
;;;63             return ERROR;   
;;;64         
;;;65         if (os_object_find(object_dev_list,name) != NULL)//if this device has been registored return error  
00000a  4860              LDR      r0,|L1.396|
00000c  6800              LDR      r0,[r0,#0]  ; object_dev_list
00000e  f7fffffe          BL       os_object_find
000012  2800              CMP      r0,#0
000014  d001              BEQ      |L1.26|
                  |L1.22|
;;;66             return ERROR;   
000016  2000              MOVS     r0,#0
;;;67         dev->flag = flags;
;;;68         
;;;69         os_object_init(&object_dev_list, &(dev->parent), OS_Object_Class_Device , name);//???????,?????????????????????,??????   
;;;70         
;;;71         
;;;72         return SUCCESS;   
;;;73     }
000018  bd70              POP      {r4-r6,pc}
                  |L1.26|
00001a  8265              STRH     r5,[r4,#0x12]         ;67
00001c  4633              MOV      r3,r6                 ;69
00001e  2202              MOVS     r2,#2                 ;69
000020  4621              MOV      r1,r4                 ;69
000022  485a              LDR      r0,|L1.396|
000024  f7fffffe          BL       os_object_init
000028  2001              MOVS     r0,#1                 ;72
00002a  bd70              POP      {r4-r6,pc}
;;;74     
                          ENDP

                  os_device_unregister PROC
;;;85      */
;;;86     os_err_t os_device_unregister(os_device_t *dev)  
00002c  b510              PUSH     {r4,lr}
;;;87     {  
;;;88         //RT_ASSERT(dev != RT_NULL);  	  
;;;89         return os_object_detach(&object_dev_list , &(dev->parent));//  
00002e  4601              MOV      r1,r0
000030  4856              LDR      r0,|L1.396|
000032  f7fffffe          BL       os_object_detach
;;;90     } 
000036  bd10              POP      {r4,pc}
;;;91     
                          ENDP

                  os_device_init_all PROC
;;;105    
;;;106    os_err_t os_device_init_all(void)
000038  b570              PUSH     {r4-r6,lr}
;;;107    {
;;;108        os_device_t *device=NULL;
;;;109        struct os_object *object=object_dev_list;
00003a  4854              LDR      r0,|L1.396|
;;;110        //const typeof( ((os_device_t *)0)->parent )
;;;111        while(object!=NULL)
;;;112        {	
;;;113            //	container_of(object,os_device_t,parent);
;;;114            
;;;115            struct os_object *__mptr = (object);
;;;116            device=(os_device_t *)( (char *)__mptr - offsetof(os_device_t,parent));
;;;117            if(device->init!=NULL)
;;;118            {
;;;119                if((device->flag&OS_DEVICE_FLAG_ACTIVATED)!=OS_DEVICE_FLAG_ACTIVATED)
;;;120                {
;;;121                    device->init(device);
;;;122                    device->flag|=OS_DEVICE_FLAG_ACTIVATED;
00003c  2501              MOVS     r5,#1
00003e  6804              LDR      r4,[r0,#0]            ;107  ; object_dev_list
000040  e00b              B        |L1.90|
                  |L1.66|
000042  6a21              LDR      r1,[r4,#0x20]         ;117
000044  2900              CMP      r1,#0                 ;117
000046  d007              BEQ      |L1.88|
000048  8a60              LDRH     r0,[r4,#0x12]         ;119
00004a  07c2              LSLS     r2,r0,#31             ;119
00004c  d102              BNE      |L1.84|
00004e  4620              MOV      r0,r4                 ;121
000050  4788              BLX      r1                    ;121
000052  8a60              LDRH     r0,[r4,#0x12]
                  |L1.84|
;;;123                }
;;;124                else
;;;125                {
;;;126                    device->flag|=OS_DEVICE_FLAG_ACTIVATED;
000054  4328              ORRS     r0,r0,r5
000056  8260              STRH     r0,[r4,#0x12]
                  |L1.88|
;;;127                }
;;;128                
;;;129            }
;;;130            object=object->next;
000058  68e4              LDR      r4,[r4,#0xc]
                  |L1.90|
00005a  2c00              CMP      r4,#0                 ;111
00005c  d1f1              BNE      |L1.66|
;;;131        }
;;;132        return SUCCESS;
00005e  2001              MOVS     r0,#1
;;;133    } 	
000060  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP

                  os_device_open PROC
;;;145     */
;;;146    os_err_t os_device_open(os_device_t *dev, u16 oflag)  
000062  b570              PUSH     {r4-r6,lr}
;;;147    {  
000064  4604              MOV      r4,r0
;;;148        os_err_t result = SUCCESS;  
000066  2001              MOVS     r0,#1
000068  460d              MOV      r5,r1                 ;147
;;;149        
;;;150        if(dev==NULL)
00006a  2c00              CMP      r4,#0
00006c  d003              BEQ      |L1.118|
;;;151        {
;;;152            return ERROR;
;;;153        }
;;;154        
;;;155        /* if device is not initialized, initialize it. */  
;;;156        if (!(dev->flag & OS_DEVICE_FLAG_ACTIVATED))//??????????   
00006e  7ca1              LDRB     r1,[r4,#0x12]
000070  07c9              LSLS     r1,r1,#31
000072  d002              BEQ      |L1.122|
000074  e00c              B        |L1.144|
                  |L1.118|
000076  2000              MOVS     r0,#0                 ;152
                  |L1.120|
;;;157        {  
;;;158            if (dev->init != NULL)  
;;;159            {  
;;;160                result = dev->init(dev);//?????????????   
;;;161                if (result != SUCCESS)  
;;;162                {  
;;;163                    //printf("To initialize device:%s failed. The error code is %d\n",  
;;;164                    //       dev->parent.name, result);  
;;;165                    
;;;166                    return result;  
;;;167                }  
;;;168            }  
;;;169            
;;;170            dev->flag |= OS_DEVICE_FLAG_ACTIVATED;//??????   
;;;171        }  
;;;172        
;;;173        /* device is a stand alone device and opened *///????????  
;;;174        if ((dev->flag & RT_DEVICE_FLAG_STANDALONE) &&  
;;;175                (dev->open_flag & RT_DEVICE_OFLAG_OPEN))  
;;;176        {  
;;;177            return BUSY;  
;;;178        }  
;;;179        
;;;180        /* call device open interface */  
;;;181        if (dev->open != NULL)  
;;;182        {  
;;;183            result = dev->open(dev, oflag);//????   
;;;184        }  
;;;185        
;;;186        /* set open flag */  
;;;187        if (result == SUCCESS || result == OS_ENOSYS)  
;;;188            dev->open_flag = oflag | RT_DEVICE_OFLAG_OPEN;//??????   
;;;189        
;;;190        return result;  
;;;191    }  
000078  bd70              POP      {r4-r6,pc}
                  |L1.122|
00007a  6a22              LDR      r2,[r4,#0x20]         ;158
00007c  2a00              CMP      r2,#0                 ;158
00007e  d003              BEQ      |L1.136|
000080  4620              MOV      r0,r4                 ;160
000082  4790              BLX      r2                    ;160
000084  2801              CMP      r0,#1                 ;161
000086  d1f7              BNE      |L1.120|
                  |L1.136|
000088  8a61              LDRH     r1,[r4,#0x12]         ;170
00008a  2201              MOVS     r2,#1                 ;170
00008c  4311              ORRS     r1,r1,r2              ;170
00008e  8261              STRH     r1,[r4,#0x12]         ;170
                  |L1.144|
000090  7ca1              LDRB     r1,[r4,#0x12]         ;174
000092  0749              LSLS     r1,r1,#29             ;174
000094  d504              BPL      |L1.160|
000096  7d21              LDRB     r1,[r4,#0x14]         ;175
000098  0709              LSLS     r1,r1,#28             ;175
00009a  d501              BPL      |L1.160|
00009c  2002              MOVS     r0,#2                 ;177
                  |L1.158|
00009e  bd70              POP      {r4-r6,pc}
                  |L1.160|
0000a0  6a62              LDR      r2,[r4,#0x24]         ;181
0000a2  2a00              CMP      r2,#0                 ;181
0000a4  d006              BEQ      |L1.180|
0000a6  4629              MOV      r1,r5                 ;183
0000a8  4620              MOV      r0,r4                 ;183
0000aa  4790              BLX      r2                    ;183
0000ac  2801              CMP      r0,#1                 ;187
0000ae  d001              BEQ      |L1.180|
0000b0  2803              CMP      r0,#3                 ;187
0000b2  d1f4              BNE      |L1.158|
                  |L1.180|
0000b4  2108              MOVS     r1,#8                 ;188
0000b6  430d              ORRS     r5,r5,r1              ;188
0000b8  82a5              STRH     r5,[r4,#0x14]         ;188
0000ba  bd70              POP      {r4-r6,pc}
;;;192    
                          ENDP

                  os_device_close PROC
;;;202     */
;;;203    os_err_t os_device_close(os_device_t* dev)  	
0000bc  b510              PUSH     {r4,lr}
;;;204    {  
0000be  4604              MOV      r4,r0
;;;205        os_err_t result = SUCCESS;  
0000c0  2001              MOVS     r0,#1
;;;206        
;;;207        if(dev==NULL)
0000c2  2c00              CMP      r4,#0
0000c4  d00b              BEQ      |L1.222|
;;;208        {
;;;209            return ERROR;
;;;210        }	  
;;;211        /* call device close interface */  
;;;212        if (dev->close != NULL)  
0000c6  6aa1              LDR      r1,[r4,#0x28]
0000c8  2900              CMP      r1,#0
0000ca  d005              BEQ      |L1.216|
;;;213        {  
;;;214            result = dev->close(dev);//????   
0000cc  4620              MOV      r0,r4
0000ce  4788              BLX      r1
;;;215        }  
;;;216        
;;;217        /* set open flag */  
;;;218        if (result == SUCCESS || result == OS_ENOSYS)  
0000d0  2801              CMP      r0,#1
0000d2  d001              BEQ      |L1.216|
0000d4  2803              CMP      r0,#3
0000d6  d101              BNE      |L1.220|
                  |L1.216|
;;;219            dev->open_flag = RT_DEVICE_OFLAG_CLOSE;//???????????   
0000d8  2110              MOVS     r1,#0x10
0000da  82a1              STRH     r1,[r4,#0x14]
                  |L1.220|
;;;220        
;;;221        return result;  
;;;222    }  
0000dc  bd10              POP      {r4,pc}
                  |L1.222|
0000de  2000              MOVS     r0,#0                 ;209
0000e0  bd10              POP      {r4,pc}
;;;223    
                          ENDP

                  os_device_read PROC
;;;234     */
;;;235    os_size_t os_device_read(os_device_t *dev,  
0000e2  b430              PUSH     {r4,r5}
;;;236                             os_off_t    pos,  
;;;237                             void       *buffer,  
;;;238                             os_size_t   size)  
;;;239    {  
;;;240        if(dev==NULL)
0000e4  2800              CMP      r0,#0
0000e6  d006              BEQ      |L1.246|
;;;241        {
;;;242            return ERROR;
;;;243        }	  
;;;244        
;;;245        /* call device read interface */  
;;;246        if (dev->read != NULL) 
0000e8  6ac4              LDR      r4,[r0,#0x2c]
0000ea  2c00              CMP      r4,#0
0000ec  d002              BEQ      |L1.244|
;;;247        {  
;;;248            return dev->read(dev, pos, buffer, size);
0000ee  46a4              MOV      r12,r4
0000f0  bc30              POP      {r4,r5}
0000f2  4760              BX       r12
                  |L1.244|
;;;249        }  
;;;250        
;;;251        
;;;252        return 0;  
0000f4  2000              MOVS     r0,#0
                  |L1.246|
;;;253    }  
0000f6  bc30              POP      {r4,r5}
0000f8  4770              BX       lr
;;;254    
                          ENDP

                  os_device_write PROC
;;;264     */
;;;265    os_size_t os_device_write(os_device_t *dev,  
0000fa  b430              PUSH     {r4,r5}
;;;266                              os_off_t    pos,  
;;;267                              const void *buffer,  
;;;268                              os_size_t   size)  
;;;269    {  
;;;270        
;;;271        if(dev==NULL)
0000fc  2800              CMP      r0,#0
0000fe  d0fa              BEQ      |L1.246|
;;;272        {
;;;273            return ERROR;
;;;274        }	  	  
;;;275        /* call device write interface */  
;;;276        if (dev->write != NULL)//?????????   
000100  6b04              LDR      r4,[r0,#0x30]
000102  2c00              CMP      r4,#0
000104  d002              BEQ      |L1.268|
;;;277        {  
;;;278            return dev->write(dev, pos, buffer, size);//??????????   
000106  46a4              MOV      r12,r4
000108  bc30              POP      {r4,r5}
00010a  4760              BX       r12
                  |L1.268|
;;;279        }  
;;;280        
;;;281        
;;;282        return 0;  
00010c  2000              MOVS     r0,#0
;;;283    }  
00010e  e7f2              B        |L1.246|
;;;284    
                          ENDP

                  os_device_control PROC
;;;294     */
;;;295    os_err_t os_device_control(os_device_t *dev, u8 cmd, void *arg)  
000110  2800              CMP      r0,#0
;;;296    {  
000112  d004              BEQ      |L1.286|
;;;297        if(dev==NULL)
;;;298        {
;;;299            return ERROR;
;;;300        }		  
;;;301        /* call device write interface */  
;;;302        if (dev->control != NULL)  
000114  6b43              LDR      r3,[r0,#0x34]
000116  2b00              CMP      r3,#0
000118  d000              BEQ      |L1.284|
;;;303        {  
;;;304            return dev->control(dev, cmd, arg); 
00011a  4718              BX       r3
                  |L1.284|
;;;305        }  
;;;306        
;;;307        return SUCCESS;  
00011c  2001              MOVS     r0,#1
                  |L1.286|
;;;308    }  
00011e  4770              BX       lr
;;;309    
                          ENDP

                  os_device_set_rx_indicate PROC
;;;319     */	
;;;320    os_err_t os_device_set_rx_indicate(os_device_t *dev,   os_err_t (*rx_ind)(os_device_t *dev, os_size_t size))  
000120  2800              CMP      r0,#0
;;;321    {  
000122  d001              BEQ      |L1.296|
;;;322        if(dev==NULL)
;;;323        {
;;;324            return ERROR;
;;;325        }	
;;;326        
;;;327        dev->rx_indicate= rx_ind;  
;;;328        
;;;329        return SUCCESS;  
000124  6181              STR      r1,[r0,#0x18]
000126  2001              MOVS     r0,#1
                  |L1.296|
;;;330    } 
000128  4770              BX       lr
;;;331    
                          ENDP

                  os_device_set_tx_complete PROC
;;;341     */	
;;;342    os_err_t os_device_set_tx_complete(os_device_t *dev,  os_err_t (*tx_done)(os_device_t *dev, void *buffer))  
00012a  2800              CMP      r0,#0
;;;343    {  
00012c  d001              BEQ      |L1.306|
;;;344        if(dev==NULL)
;;;345        {
;;;346            return ERROR;
;;;347        }	
;;;348        
;;;349        dev->tx_complete = tx_done;  
;;;350        
;;;351        return SUCCESS;  
00012e  61c1              STR      r1,[r0,#0x1c]
000130  2001              MOVS     r0,#1
                  |L1.306|
;;;352    }  
000132  4770              BX       lr
;;;353    
                          ENDP

                  os_device_get PROC
;;;363     */	
;;;364    os_device_t* os_device_get(const char * name)  
000134  4601              MOV      r1,r0
;;;365    {  
000136  b510              PUSH     {r4,lr}
;;;366        if(object_dev_list==NULL)
000138  4814              LDR      r0,|L1.396|
00013a  6800              LDR      r0,[r0,#0]  ; object_dev_list
00013c  2800              CMP      r0,#0
00013e  d001              BEQ      |L1.324|
;;;367        {
;;;368            return NULL;
;;;369        }	else
;;;370        {
;;;371            struct os_object *obj=os_object_find(object_dev_list,name);
000140  f7fffffe          BL       os_object_find
                  |L1.324|
;;;372            if(obj!=NULL)
;;;373            {
;;;374                struct os_object *__mptr = (obj);
;;;375                return ((os_device_t *)( (char *)__mptr - offsetof(os_device_t,parent)));
;;;376            }
;;;377        }
;;;378        return NULL;
;;;379    } 	
000144  bd10              POP      {r4,pc}
;;;380    
                          ENDP

                  _list_device PROC
;;;383    
;;;384    os_err_t _list_device()
000146  b530              PUSH     {r4,r5,lr}
;;;385    {
;;;386        
;;;387        struct os_object *__mptr = object_dev_list;
000148  4810              LDR      r0,|L1.396|
00014a  b093              SUB      sp,sp,#0x4c           ;385
;;;388        
;;;389        
;;;390        char * const device_type_str[] =
00014c  6804              LDR      r4,[r0,#0]  ; object_dev_list
00014e  224c              MOVS     r2,#0x4c
000150  490f              LDR      r1,|L1.400|
000152  4668              MOV      r0,sp
000154  f7fffffe          BL       __aeabi_memcpy4
;;;391        {
;;;392            "Character Device",
;;;393            "Block Device",
;;;394            "Network Interface",
;;;395            "MTD Device",
;;;396            "CAN Device",
;;;397            "RTC",
;;;398            "Sound Device",
;;;399            "Graphic Device",
;;;400            "I2C Bus",
;;;401            "USB Slave Device",
;;;402            "USB Host Bus",
;;;403            "SPI Bus",
;;;404            "SPI Device",
;;;405            "SDIO Bus",
;;;406            "PM Pseudo Device",
;;;407            "Pipe",
;;;408            "Portal Device",
;;;409            "Miscellaneous Device",
;;;410            "Unknown"
;;;411        };
;;;412        
;;;413        if(__mptr==NULL)
000158  2c00              CMP      r4,#0
00015a  d014              BEQ      |L1.390|
;;;414            return ERROR;
;;;415        
;;;416        printf("device    type      \r\n");
00015c  a00d              ADR      r0,|L1.404|
00015e  f7fffffe          BL       __2printf
;;;417        printf("-------- ---------- \r\n");
000162  a012              ADR      r0,|L1.428|
000164  f7fffffe          BL       __2printf
000168  466d              MOV      r5,sp                 ;390
                  |L1.362|
;;;418        for (; __mptr!=NULL; __mptr = __mptr->next)
;;;419        {
;;;420            struct rt_device *device=(os_device_t *)( (char *)__mptr - offsetof(os_device_t,parent));
;;;421            printf("%-8.*s %-8s \r\n",
00016a  7c20              LDRB     r0,[r4,#0x10]
00016c  4622              MOV      r2,r4                 ;420
00016e  0080              LSLS     r0,r0,#2
000170  582b              LDR      r3,[r5,r0]
000172  210a              MOVS     r1,#0xa
000174  a013              ADR      r0,|L1.452|
000176  f7fffffe          BL       __2printf
00017a  68e4              LDR      r4,[r4,#0xc]          ;418
00017c  2c00              CMP      r4,#0                 ;418
00017e  d1f4              BNE      |L1.362|
;;;422                   OS_NAME_MAX,
;;;423                   device->parent.name,
;;;424                   device_type_str[device->type] 
;;;425                    );
;;;426        }
;;;427        
;;;428        return SUCCESS;
000180  2001              MOVS     r0,#1
                  |L1.386|
;;;429    }
000182  b013              ADD      sp,sp,#0x4c
000184  bd30              POP      {r4,r5,pc}
                  |L1.390|
000186  2000              MOVS     r0,#0                 ;414
000188  e7fb              B        |L1.386|
;;;430    
                          ENDP

00018a  0000              DCW      0x0000
                  |L1.396|
                          DCD      ||.data||
                  |L1.400|
                          DCD      ||.constdata||
                  |L1.404|
000194  64657669          DCB      "device    type      \r\n",0
000198  63652020
00019c  20207479
0001a0  70652020
0001a4  20202020
0001a8  0d0a00  
0001ab  00                DCB      0
                  |L1.428|
0001ac  2d2d2d2d          DCB      "-------- ---------- \r\n",0
0001b0  2d2d2d2d
0001b4  202d2d2d
0001b8  2d2d2d2d
0001bc  2d2d2d20
0001c0  0d0a00  
0001c3  00                DCB      0
                  |L1.452|
0001c4  252d382e          DCB      "%-8.*s %-8s \r\n",0
0001c8  2a732025
0001cc  2d387320
0001d0  0d0a00  
0001d3  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x11
                          DCD      ||.conststring||+0x1e
                          DCD      ||.conststring||+0x30
                          DCD      ||.conststring||+0x3b
                          DCD      ||.conststring||+0x46
                          DCD      ||.conststring||+0x4a
                          DCD      ||.conststring||+0x57
                          DCD      ||.conststring||+0x66
                          DCD      ||.conststring||+0x6e
                          DCD      ||.conststring||+0x7f
                          DCD      ||.conststring||+0x8c
                          DCD      ||.conststring||+0x94
                          DCD      ||.conststring||+0x9f
                          DCD      ||.conststring||+0xa8
                          DCD      ||.conststring||+0xb9
                          DCD      ||.conststring||+0xbe
                          DCD      ||.conststring||+0xcc
                          DCD      ||.conststring||+0xe1

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  43686172          DCB      "Character Device",0
000004  61637465
000008  72204465
00000c  76696365
000010  00      
000011  426c6f63          DCB      "Block Device",0
000015  6b204465
000019  76696365
00001d  00      
00001e  4e657477          DCB      "Network Interface",0
000022  6f726b20
000026  496e7465
00002a  72666163
00002e  6500    
000030  4d544420          DCB      "MTD Device",0
000034  44657669
000038  636500  
00003b  43414e20          DCB      "CAN Device",0
00003f  44657669
000043  636500  
000046  52544300          DCB      "RTC",0
00004a  536f756e          DCB      "Sound Device",0
00004e  64204465
000052  76696365
000056  00      
000057  47726170          DCB      "Graphic Device",0
00005b  68696320
00005f  44657669
000063  636500  
000066  49324320          DCB      "I2C Bus",0
00006a  42757300
00006e  55534220          DCB      "USB Slave Device",0
000072  536c6176
000076  65204465
00007a  76696365
00007e  00      
00007f  55534220          DCB      "USB Host Bus",0
000083  486f7374
000087  20427573
00008b  00      
00008c  53504920          DCB      "SPI Bus",0
000090  42757300
000094  53504920          DCB      "SPI Device",0
000098  44657669
00009c  636500  
00009f  5344494f          DCB      "SDIO Bus",0
0000a3  20427573
0000a7  00      
0000a8  504d2050          DCB      "PM Pseudo Device",0
0000ac  73657564
0000b0  6f204465
0000b4  76696365
0000b8  00      
0000b9  50697065          DCB      "Pipe",0
0000bd  00      
0000be  506f7274          DCB      "Portal Device",0
0000c2  616c2044
0000c6  65766963
0000ca  6500    
0000cc  4d697363          DCB      "Miscellaneous Device",0
0000d0  656c6c61
0000d4  6e656f75
0000d8  73204465
0000dc  76696365
0000e0  00      
0000e1  556e6b6e          DCB      "Unknown",0
0000e5  6f776e00

                          AREA ||.data||, DATA, ALIGN=2

                  object_dev_list
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\kernel\\devmngr\\device.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_device_c_012c830f____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_device_c_012c830f____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_device_c_012c830f____REVSH|
#line 144
|__asm___8_device_c_012c830f____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
