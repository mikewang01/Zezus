; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\user_task.o --asm_dir=.\ --list_dir=.\ --depend=.\user_task.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\user_task.crf ..\task\usertask\user_task.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  call_back_test PROC
;;;59      */
;;;60     void call_back_test()
000000  4770              BX       lr
;;;61     {
;;;62         
;;;63     }
;;;64     /*********************************************************************
                          ENDP

                  process_event PROC
;;;81     
;;;82     void process_event(u16 taskid , u16 msg_num , smessage* msg)
000002  b5fe              PUSH     {r1-r7,lr}
;;;83     {
000004  4614              MOV      r4,r2
000006  460f              MOV      r7,r1
000008  4606              MOV      r6,r0
                  |L1.10|
;;;84         //	  os_device_t *usart1_dev= os_device_get("usart1");
;;;85         //		if(usart1_dev==NULL)
;;;86         //		{
;;;87         //				return ;
;;;88         //		}
;;;89         //	 
;;;90         do{
;;;91             switch(msg->type)
00000a  7820              LDRB     r0,[r4,#0]
00000c  2801              CMP      r0,#1
00000e  d004              BEQ      |L1.26|
000010  2802              CMP      r0,#2
000012  d013              BEQ      |L1.60|
000014  2803              CMP      r0,#3
000016  d110              BNE      |L1.58|
000018  e042              B        |L1.160|
                  |L1.26|
;;;92             {
;;;93             case IPC_MSG: 
;;;94                 if(((msg->event)&START_TICK)==START_TICK)
00001a  7920              LDRB     r0,[r4,#4]
00001c  07c0              LSLS     r0,r0,#31
00001e  d00c              BEQ      |L1.58|
;;;95                 {
;;;96                     //	 os_device_open(usart1_dev, 1); //make sure  usart1 
;;;97                     //os_device_write(dev,0,"fuckyou",10);
;;;98                     // u8 taskid ,TIMER_EVENT event, u32  ticks_expired , void (*triger_callback
;;;99                     os_timer_period(taskid,TIMEOUT_500MS,500,NULL);
000020  22ff              MOVS     r2,#0xff
000022  b2f0              UXTB     r0,r6
000024  2300              MOVS     r3,#0
000026  32f5              ADDS     r2,r2,#0xf5
000028  2103              MOVS     r1,#3
00002a  f7fffffe          BL       os_timer_period
;;;100                    //  os_timer_period(taskid,TIMEOUT_250MS,250,NULL);
;;;101                    os_timer_period(taskid,TIMEOUT_125MS,125,NULL);
00002e  b2f0              UXTB     r0,r6
000030  2300              MOVS     r3,#0
000032  227d              MOVS     r2,#0x7d
000034  2106              MOVS     r1,#6
000036  f7fffffe          BL       os_timer_period
                  |L1.58|
00003a  e08c              B        |L1.342|
                  |L1.60|
;;;102                    //				 os_timer_period(taskid,TIMEOUT_100MS,100,NULL);
;;;103                } 
;;;104                break;  
;;;105            case TIMER_MSG: 
;;;106                if((msg->event&TIMEOUT_500MS)==TIMEOUT_500MS)
00003c  6860              LDR      r0,[r4,#4]
00003e  43c1              MVNS     r1,r0
000040  0789              LSLS     r1,r1,#30
000042  d019              BEQ      |L1.120|
;;;107                {
;;;108                    
;;;109                    u8 temp[8]={0,0};
;;;110                    u8 led2[2]={0 , led_1};
;;;111                    os_device_t *dev = os_device_get("me2_ch2o");
;;;112                    temp[0]=0X01;
;;;113                    //os_device_control(dev , 	WRITE_USER_REGISTER ,  temp    );
;;;114                    os_device_read(dev , 0 , temp , 2);
;;;115                    //	 os_device_control(dev , TRIGGER_HUMI_MEASUREMENT,     temp );
;;;116                    //	 os_device_control(dev , TRIGGER_TEMP_MEASUREMENT , temp );
;;;117                    //htu20_read_temper(0x40 , temp , 3);
;;;118                    
;;;119                    //	 printf("%d %d \r\n",((htu20_data*)temp)->temper ,((htu20_data*)temp)->humidity);
;;;120                    //
;;;121                    
;;;122                    
;;;123                    
;;;124                    
;;;125                    //	  printf("dty=%02dug/m3\r\n",*((u16*)temp));
;;;126                    // temp[1]+=1;
;;;127                    
;;;128                    leds_control((os_device_t*)1, led_trigger, led2);
;;;129                }else if((msg->event&TIMEOUT_250MS)==TIMEOUT_250MS)
000044  2105              MOVS     r1,#5
000046  4381              BICS     r1,r1,r0
000048  d0f7              BEQ      |L1.58|
;;;130                {
;;;131                    
;;;132                    
;;;133                }
;;;134                else if((msg->event&TIMEOUT_125MS)==TIMEOUT_125MS)
00004a  0741              LSLS     r1,r0,#29
00004c  0f89              LSRS     r1,r1,#30
00004e  2903              CMP      r1,#3
000050  d0f3              BEQ      |L1.58|
;;;135                {
;;;136                    static	 u8 temp[2]={0,0x00}; static char a='0';
;;;137                    // leds_control((os_device_t*)1, led_trigger, temp);
;;;138                    //os_device_t *dev= os_device_get("LCD");
;;;139                    //temp[1]+=1;
;;;140                    //printf("how are %d\r\n",temp[1]);
;;;141                    
;;;142                }					 
;;;143                else if((msg->event&TIMEOUT_RELAY1)==TIMEOUT_RELAY1)
000052  0700              LSLS     r0,r0,#28
000054  d57f              BPL      |L1.342|
;;;144                {
;;;145                    u8 arg[2]={1,relay1};
000056  a064              ADR      r0,|L1.488|
000058  6800              LDR      r0,[r0,#0]
;;;146                    os_device_t *dev= os_device_get("RELAY");
00005a  9000              STR      r0,[sp,#0]
00005c  a063              ADR      r0,|L1.492|
00005e  f7fffffe          BL       os_device_get
000062  4605              MOV      r5,r0
;;;147                    os_device_open(dev,0);
000064  2100              MOVS     r1,#0
000066  f7fffffe          BL       os_device_open
;;;148                    os_device_control(dev,relay_closed,arg);
00006a  466a              MOV      r2,sp
00006c  2100              MOVS     r1,#0
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       os_device_control
;;;149                    os_device_close(dev);
000074  4628              MOV      r0,r5
;;;150                    //os_device_open(usart1_dev, 1); //make sure  usart1 
;;;151                }		
000076  e06c              B        |L1.338|
                  |L1.120|
000078  2000              MOVS     r0,#0                 ;109
00007a  9000              STR      r0,[sp,#0]            ;109
00007c  9001              STR      r0,[sp,#4]            ;110
00007e  9002              STR      r0,[sp,#8]            ;111
000080  a05c              ADR      r0,|L1.500|
000082  f7fffffe          BL       os_device_get
000086  2101              MOVS     r1,#1                 ;112
000088  466a              MOV      r2,sp                 ;112
00008a  7011              STRB     r1,[r2,#0]            ;112
00008c  2302              MOVS     r3,#2                 ;114
00008e  2100              MOVS     r1,#0                 ;114
000090  f7fffffe          BL       os_device_read
000094  aa02              ADD      r2,sp,#8              ;128
000096  2102              MOVS     r1,#2                 ;128
000098  2001              MOVS     r0,#1                 ;128
00009a  f7fffffe          BL       leds_control
00009e  e05a              B        |L1.342|
                  |L1.160|
;;;152                
;;;153                
;;;154                break;
;;;155            case DEV_MSG: 
;;;156                if((msg->event&USART1_RX)==USART1_RX)
0000a0  7920              LDRB     r0,[r4,#4]
0000a2  07c0              LSLS     r0,r0,#31
0000a4  d024              BEQ      |L1.240|
;;;157                {
;;;158                    
;;;159                    usart_data *usart1_data=(usart_data*)msg->ptr;
;;;160                    struct relay_order *relay_data=(struct relay_order*)usart1_data->data;
0000a6  68e5              LDR      r5,[r4,#0xc]
0000a8  1cad              ADDS     r5,r5,#2
;;;161                    
;;;162                    if(relay_data->relay_num==relay1)
0000aa  7868              LDRB     r0,[r5,#1]
0000ac  2801              CMP      r0,#1
0000ae  d11f              BNE      |L1.240|
;;;163                    {
;;;164                        extern u8 crc16_on_off;
;;;165                        u8 arg[2]={1,relay1};
0000b0  a04d              ADR      r0,|L1.488|
0000b2  6800              LDR      r0,[r0,#0]
;;;166    #ifdef  OS_USING_CRC16
;;;167                        u16 crc=crc16((u8*)relay_data,sizeof(struct relay_order)-sizeof(u16));
0000b4  9001              STR      r0,[sp,#4]
0000b6  2104              MOVS     r1,#4
0000b8  4628              MOV      r0,r5
0000ba  f7fffffe          BL       crc16
;;;168                        if(crc==relay_data->crc||crc16_on_off)
0000be  88a9              LDRH     r1,[r5,#4]
0000c0  4281              CMP      r1,r0
0000c2  d003              BEQ      |L1.204|
0000c4  484e              LDR      r0,|L1.512|
0000c6  7800              LDRB     r0,[r0,#0]  ; crc16_on_off
0000c8  2800              CMP      r0,#0
0000ca  d011              BEQ      |L1.240|
                  |L1.204|
;;;169    #endif
;;;170                        {
;;;171                            os_device_t *dev= os_device_get("RELAY");
0000cc  a047              ADR      r0,|L1.492|
0000ce  f7fffffe          BL       os_device_get
;;;172                            os_device_open(dev,0);
0000d2  2100              MOVS     r1,#0
0000d4  9000              STR      r0,[sp,#0]
0000d6  f7fffffe          BL       os_device_open
;;;173                            os_device_control(dev,relay_opened,arg);
0000da  aa01              ADD      r2,sp,#4
0000dc  2101              MOVS     r1,#1
0000de  9800              LDR      r0,[sp,#0]
0000e0  f7fffffe          BL       os_device_control
;;;174                            //relay_data->time_open
;;;175                            os_timer_expired(taskid,TIMEOUT_RELAY1,relay_data->time_open,NULL);
0000e4  886a              LDRH     r2,[r5,#2]
0000e6  b2f0              UXTB     r0,r6
0000e8  2300              MOVS     r3,#0
0000ea  2108              MOVS     r1,#8
0000ec  f7fffffe          BL       os_timer_expired
                  |L1.240|
;;;176                        }
;;;177                    }
;;;178                    
;;;179                    
;;;180                    //										 os_device_write(usart1_dev,0,usart1_data->data,usart1_data->length);
;;;181                    //                   os_device_close(usart1_dev);
;;;182                    
;;;183                }
;;;184                if((msg->event&KEY_STATUS_CHANGED)==KEY_STATUS_CHANGED)
0000f0  7920              LDRB     r0,[r4,#4]
0000f2  0780              LSLS     r0,r0,#30
0000f4  d52f              BPL      |L1.342|
;;;185                {
;;;186                    key_data *key_status=(key_data*)msg->ptr;	
;;;187                    u8 arg[2]={1,relay1};
0000f6  a03c              ADR      r0,|L1.488|
0000f8  68e5              LDR      r5,[r4,#0xc]
0000fa  6800              LDR      r0,[r0,#0]
;;;188                    os_device_t *dev= os_device_get("RELAY");
0000fc  9001              STR      r0,[sp,#4]
0000fe  a03b              ADR      r0,|L1.492|
000100  f7fffffe          BL       os_device_get
;;;189                    os_device_open(dev,0);
000104  2100              MOVS     r1,#0
000106  9000              STR      r0,[sp,#0]
000108  f7fffffe          BL       os_device_open
;;;190                    
;;;191                    if(key_status->key==key1)
00010c  7828              LDRB     r0,[r5,#0]
00010e  2801              CMP      r0,#1
000110  d10d              BNE      |L1.302|
;;;192                    {
;;;193                        if((key_status->status)==key_down)
000112  7868              LDRB     r0,[r5,#1]
000114  2801              CMP      r0,#1
000116  d002              BEQ      |L1.286|
;;;194                        {
;;;195                            os_device_control(dev,relay_opened,arg);
;;;196                            
;;;197                        }
;;;198                        else if((key_status->status)==key_released)
000118  2802              CMP      r0,#2
00011a  d003              BEQ      |L1.292|
00011c  e018              B        |L1.336|
                  |L1.286|
00011e  aa01              ADD      r2,sp,#4              ;195
000120  2101              MOVS     r1,#1                 ;195
000122  e001              B        |L1.296|
                  |L1.292|
;;;199                        {
;;;200                            os_device_control(dev,relay_closed,arg);
000124  aa01              ADD      r2,sp,#4
000126  2100              MOVS     r1,#0
                  |L1.296|
000128  9800              LDR      r0,[sp,#0]
00012a  f7fffffe          BL       os_device_control
                  |L1.302|
;;;201                        }
;;;202                        
;;;203                    }
;;;204                    if(key_status->key==key2)
00012e  7828              LDRB     r0,[r5,#0]
000130  2802              CMP      r0,#2
000132  d10d              BNE      |L1.336|
;;;205                    {
;;;206                        if((key_status->status)==key_down)
000134  7868              LDRB     r0,[r5,#1]
000136  2801              CMP      r0,#1
000138  d002              BEQ      |L1.320|
;;;207                        {
;;;208                            os_device_control(dev,relay_opened,arg);
;;;209                        }
;;;210                        else if((key_status->status)==key_released)
00013a  2802              CMP      r0,#2
00013c  d003              BEQ      |L1.326|
00013e  e007              B        |L1.336|
                  |L1.320|
000140  aa01              ADD      r2,sp,#4              ;208
000142  2101              MOVS     r1,#1                 ;208
000144  e001              B        |L1.330|
                  |L1.326|
;;;211                        {
;;;212                            os_device_control(dev,relay_closed,arg);
000146  aa01              ADD      r2,sp,#4
000148  2100              MOVS     r1,#0
                  |L1.330|
00014a  9800              LDR      r0,[sp,#0]
00014c  f7fffffe          BL       os_device_control
                  |L1.336|
;;;213                        }
;;;214                        
;;;215                    }
;;;216                    os_device_close(dev);
000150  9800              LDR      r0,[sp,#0]
                  |L1.338|
000152  f7fffffe          BL       os_device_close
                  |L1.342|
;;;217                }
;;;218                break;
;;;219            }
;;;220            msg=msg->next;
;;;221        }
;;;222        while((--msg_num)>0);
000156  1e7f              SUBS     r7,r7,#1
000158  6924              LDR      r4,[r4,#0x10]         ;220
00015a  043f              LSLS     r7,r7,#16
00015c  0c3f              LSRS     r7,r7,#16
00015e  d000              BEQ      |L1.354|
000160  e753              B        |L1.10|
                  |L1.354|
;;;223    }
000162  bdfe              POP      {r1-r7,pc}
;;;224    
                          ENDP

                  task_demo_init PROC
;;;239    os_err_t htu20_register(u16 task_id);
;;;240    void  task_demo_init()
000164  b51c              PUSH     {r2-r4,lr}
;;;241    {
;;;242        u8 this_task_id=Current_Task;
000166  4827              LDR      r0,|L1.516|
000168  7804              LDRB     r4,[r0,#0]  ; Current_Task
;;;243        led_init();
00016a  f7fffffe          BL       led_init
;;;244        
;;;245        spi2_register(this_task_id);
00016e  4620              MOV      r0,r4
000170  f7fffffe          BL       spi2_register
;;;246        me2_ch20_register(this_task_id);
000174  4620              MOV      r0,r4
000176  f7fffffe          BL       me2_ch20_register
;;;247        htu20_register(this_task_id);
00017a  4620              MOV      r0,r4
00017c  f7fffffe          BL       htu20_register
;;;248        
;;;249        // usart_register(this_task_id);
;;;250        //	  keys_register(this_task_id);
;;;251        usart1_register(this_task_id);
000180  4620              MOV      r0,r4
000182  f7fffffe          BL       usart1_register
;;;252        //	   relays_register(this_task_id);
;;;253        lcd_register(this_task_id);
000186  4620              MOV      r0,r4
000188  f7fffffe          BL       lcd_register
;;;254        
;;;255        os_device_init_all();
00018c  f7fffffe          BL       os_device_init_all
;;;256        // 
;;;257        os_show_version();
000190  f7fffffe          BL       os_show_version
;;;258        //printf("how are %f\r\n",22.2);
;;;259        send_message(this_task_id,SYSTEM_EVENT,IPC_MSG,START_TICK,NULL,(u16)0);
000194  2000              MOVS     r0,#0
000196  9000              STR      r0,[sp,#0]
000198  2301              MOVS     r3,#1
00019a  9001              STR      r0,[sp,#4]
00019c  461a              MOV      r2,r3
00019e  2104              MOVS     r1,#4
0001a0  4620              MOV      r0,r4
0001a2  f7fffffe          BL       send_message
;;;260    }
0001a6  bd1c              POP      {r2-r4,pc}
;;;261    
                          ENDP

                  task_demo PROC
;;;271     */
;;;272    void task_demo()
0001a8  b538              PUSH     {r3-r5,lr}
;;;273    {
;;;274        
;;;275        u8 My_Id=Current_Task;
0001aa  4816              LDR      r0,|L1.516|
0001ac  7805              LDRB     r5,[r0,#0]  ; Current_Task
;;;276        PCB* task_state=0; 
;;;277        get_self_taskstate(My_Id,task_state);
0001ae  f7fffffe          BL       OS_get_taskstate
0001b2  462c              MOV      r4,r5
0001b4  210c              MOVS     r1,#0xc
0001b6  434c              MULS     r4,r1,r4
0001b8  1820              ADDS     r0,r4,r0
;;;278        
;;;279        if(((task_state->State)&SYSTEM_EVENT)==SYSTEM_EVENT)
0001ba  7801              LDRB     r1,[r0,#0]
0001bc  0749              LSLS     r1,r1,#29
0001be  d507              BPL      |L1.464|
;;;280        {
;;;281            
;;;282            smessage* msg_get;
;;;283            u8 msg_num=get_message(task_state , &msg_get);
0001c0  4669              MOV      r1,sp
0001c2  f7fffffe          BL       get_message
0001c6  4601              MOV      r1,r0
;;;284            process_event(My_Id, msg_num , msg_get);
0001c8  4628              MOV      r0,r5
0001ca  9a00              LDR      r2,[sp,#0]
0001cc  f7fffffe          BL       process_event
                  |L1.464|
;;;285            /*
;;;286                    do something
;;;287            */
;;;288            
;;;289            // delete_message(My_Id,SYSTEM_EVENT);
;;;290        }
;;;291        
;;;292        delete_message(My_Id,SYSTEM_EVENT);
0001d0  2104              MOVS     r1,#4
0001d2  4628              MOV      r0,r5
0001d4  f7fffffe          BL       delete_message
;;;293        task_ticks_inc(My_Id);
0001d8  f7fffffe          BL       OS_get_taskstate
0001dc  1900              ADDS     r0,r0,r4
0001de  6841              LDR      r1,[r0,#4]
0001e0  1c49              ADDS     r1,r1,#1
0001e2  6041              STR      r1,[r0,#4]
;;;294    }
0001e4  bd38              POP      {r3-r5,pc}
;;;295    
                          ENDP

0001e6  0000              DCW      0x0000
                  |L1.488|
0001e8  010100            DCB      1,1,0
0001eb  00                DCB      0
                  |L1.492|
0001ec  52454c41          DCB      "RELAY",0
0001f0  5900    
0001f2  00                DCB      0
0001f3  00                DCB      0
                  |L1.500|
0001f4  6d65325f          DCB      "me2_ch2o",0
0001f8  6368326f
0001fc  00      
0001fd  00                DCB      0
0001fe  00                DCB      0
0001ff  00                DCB      0
                  |L1.512|
                          DCD      crc16_on_off
                  |L1.516|
                          DCD      Current_Task

;*** Start embedded assembler ***

#line 1 "..\\task\\usertask\\user_task.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_user_task_c_382a71b1____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_user_task_c_382a71b1____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_user_task_c_382a71b1____REVSH|
#line 144
|__asm___11_user_task_c_382a71b1____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
