; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\stm32f0xx_wwdg.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32f0xx_wwdg.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\stm32f0xx_wwdg.crf ..\arch\arm\stm32f05x\lib\src\stm32f0xx_wwdg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  WWDG_DeInit PROC
;;;131      */
;;;132    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;133    {
;;;134      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02cc              LSLS     r4,r1,#11
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;135      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000c  2100              MOVS     r1,#0
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;136    }
000014  bd10              POP      {r4,pc}
;;;137    
                          ENDP

                  WWDG_SetPrescaler PROC
;;;147      */
;;;148    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000016  4a17              LDR      r2,|L1.116|
;;;149    {
;;;150      uint32_t tmpreg = 0;
;;;151      /* Check the parameters */
;;;152      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;153      /* Clear WDGTB[1:0] bits */
;;;154      tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
000018  6851              LDR      r1,[r2,#4]
00001a  23ff              MOVS     r3,#0xff
00001c  3381              ADDS     r3,r3,#0x81
00001e  4399              BICS     r1,r1,r3
;;;155      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;156      tmpreg |= WWDG_Prescaler;
000020  4301              ORRS     r1,r1,r0
;;;157      /* Store the new value */
;;;158      WWDG->CFR = tmpreg;
000022  6051              STR      r1,[r2,#4]
;;;159    }
000024  4770              BX       lr
;;;160    
                          ENDP

                  WWDG_SetWindowValue PROC
;;;166      */
;;;167    void WWDG_SetWindowValue(uint8_t WindowValue)
000026  b508              PUSH     {r3,lr}
;;;168    {
;;;169      __IO uint32_t tmpreg = 0;
;;;170    
;;;171      /* Check the parameters */
;;;172      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;173      /* Clear W[6:0] bits */
;;;174    
;;;175      tmpreg = WWDG->CFR & CFR_W_MASK;
000028  4912              LDR      r1,|L1.116|
00002a  684a              LDR      r2,[r1,#4]
;;;176    
;;;177      /* Set W[6:0] bits according to WindowValue value */
;;;178      tmpreg |= WindowValue & (uint32_t) BIT_MASK;
00002c  0640              LSLS     r0,r0,#25
00002e  09d2              LSRS     r2,r2,#7              ;175
000030  01d2              LSLS     r2,r2,#7              ;175
000032  0e40              LSRS     r0,r0,#25
000034  4310              ORRS     r0,r0,r2
;;;179    
;;;180      /* Store the new value */
;;;181      WWDG->CFR = tmpreg;
000036  9000              STR      r0,[sp,#0]
000038  6048              STR      r0,[r1,#4]
;;;182    }
00003a  bd08              POP      {r3,pc}
;;;183    
                          ENDP

                  WWDG_EnableIT PROC
;;;189      */
;;;190    void WWDG_EnableIT(void)
00003c  480d              LDR      r0,|L1.116|
;;;191    {
;;;192      WWDG->CFR |= WWDG_CFR_EWI;
00003e  6841              LDR      r1,[r0,#4]
000040  1542              ASRS     r2,r0,#21
000042  4311              ORRS     r1,r1,r2
000044  6041              STR      r1,[r0,#4]
;;;193    }
000046  4770              BX       lr
;;;194    
                          ENDP

                  WWDG_SetCounter PROC
;;;201      */
;;;202    void WWDG_SetCounter(uint8_t Counter)
000048  0640              LSLS     r0,r0,#25
;;;203    {
;;;204      /* Check the parameters */
;;;205      assert_param(IS_WWDG_COUNTER(Counter));
;;;206      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;207         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;208      WWDG->CR = Counter & BIT_MASK;
00004a  490a              LDR      r1,|L1.116|
00004c  0e40              LSRS     r0,r0,#25
00004e  6008              STR      r0,[r1,#0]
;;;209    }
000050  4770              BX       lr
;;;210    
                          ENDP

                  WWDG_Enable PROC
;;;233      */
;;;234    void WWDG_Enable(uint8_t Counter)
000052  2180              MOVS     r1,#0x80
;;;235    {
;;;236      /* Check the parameters */
;;;237      assert_param(IS_WWDG_COUNTER(Counter));
;;;238      WWDG->CR = WWDG_CR_WDGA | Counter;
000054  4308              ORRS     r0,r0,r1
000056  4907              LDR      r1,|L1.116|
000058  6008              STR      r0,[r1,#0]
;;;239    }
00005a  4770              BX       lr
;;;240    
                          ENDP

                  WWDG_GetFlagStatus PROC
;;;261      */
;;;262    FlagStatus WWDG_GetFlagStatus(void)
00005c  4905              LDR      r1,|L1.116|
;;;263    {
;;;264      FlagStatus bitstatus = RESET;
00005e  2000              MOVS     r0,#0
;;;265        
;;;266      if ((WWDG->SR) != (uint32_t)RESET)
000060  6889              LDR      r1,[r1,#8]
000062  2900              CMP      r1,#0
000064  d000              BEQ      |L1.104|
;;;267      {
;;;268        bitstatus = SET;
000066  2001              MOVS     r0,#1
                  |L1.104|
;;;269      }
;;;270      else
;;;271      {
;;;272        bitstatus = RESET;
;;;273      }
;;;274      return bitstatus;
;;;275    }
000068  4770              BX       lr
;;;276    
                          ENDP

                  WWDG_ClearFlag PROC
;;;281      */
;;;282    void WWDG_ClearFlag(void)
00006a  4902              LDR      r1,|L1.116|
;;;283    {
;;;284      WWDG->SR = (uint32_t)RESET;
00006c  2000              MOVS     r0,#0
00006e  6088              STR      r0,[r1,#8]
;;;285    }
000070  4770              BX       lr
;;;286    
                          ENDP

000072  0000              DCW      0x0000
                  |L1.116|
                          DCD      0x40002c00

;*** Start embedded assembler ***

#line 1 "..\\arch\\arm\\stm32f05x\\lib\\src\\stm32f0xx_wwdg.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f0xx_wwdg_c_9668c0ca____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f0xx_wwdg_c_9668c0ca____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f0xx_wwdg_c_9668c0ca____REVSH|
#line 144
|__asm___16_stm32f0xx_wwdg_c_9668c0ca____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
