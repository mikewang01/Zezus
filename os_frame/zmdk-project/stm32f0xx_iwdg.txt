; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\stm32f0xx_iwdg.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32f0xx_iwdg.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\stm32f0xx_iwdg.crf ..\arch\arm\stm32f05x\lib\src\stm32f0xx_iwdg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  IWDG_WriteAccessCmd PROC
;;;144      */
;;;145    void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
000000  490d              LDR      r1,|L1.56|
;;;146    {
;;;147      /* Check the parameters */
;;;148      assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
;;;149      IWDG->KR = IWDG_WriteAccess;
000002  6008              STR      r0,[r1,#0]
;;;150    }
000004  4770              BX       lr
;;;151    
                          ENDP

                  IWDG_SetPrescaler PROC
;;;164      */
;;;165    void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
000006  490c              LDR      r1,|L1.56|
;;;166    {
;;;167      /* Check the parameters */
;;;168      assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
;;;169      IWDG->PR = IWDG_Prescaler;
000008  6048              STR      r0,[r1,#4]
;;;170    }
00000a  4770              BX       lr
;;;171    
                          ENDP

                  IWDG_SetReload PROC
;;;177      */
;;;178    void IWDG_SetReload(uint16_t Reload)
00000c  490a              LDR      r1,|L1.56|
;;;179    {
;;;180      /* Check the parameters */
;;;181      assert_param(IS_IWDG_RELOAD(Reload));
;;;182      IWDG->RLR = Reload;
00000e  6088              STR      r0,[r1,#8]
;;;183    }
000010  4770              BX       lr
;;;184    
                          ENDP

                  IWDG_ReloadCounter PROC
;;;190      */
;;;191    void IWDG_ReloadCounter(void)
000012  4909              LDR      r1,|L1.56|
;;;192    {
;;;193      IWDG->KR = KR_KEY_RELOAD;
000014  4809              LDR      r0,|L1.60|
000016  6008              STR      r0,[r1,#0]
;;;194    }
000018  4770              BX       lr
;;;195    
                          ENDP

                  IWDG_SetWindowValue PROC
;;;201      */
;;;202    void IWDG_SetWindowValue(uint16_t WindowValue)
00001a  4907              LDR      r1,|L1.56|
;;;203    {
;;;204      /* Check the parameters */
;;;205      assert_param(IS_IWDG_WINDOW_VALUE(WindowValue));
;;;206      IWDG->WINR = WindowValue;
00001c  6108              STR      r0,[r1,#0x10]
;;;207    }
00001e  4770              BX       lr
;;;208    
                          ENDP

                  IWDG_Enable PROC
;;;229      */
;;;230    void IWDG_Enable(void)
000020  4905              LDR      r1,|L1.56|
;;;231    {
;;;232      IWDG->KR = KR_KEY_ENABLE;
000022  4807              LDR      r0,|L1.64|
000024  6008              STR      r0,[r1,#0]
;;;233    }
000026  4770              BX       lr
;;;234    
                          ENDP

                  IWDG_GetFlagStatus PROC
;;;259      */
;;;260    FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
000028  4a03              LDR      r2,|L1.56|
;;;261    {
00002a  4601              MOV      r1,r0
;;;262      FlagStatus bitstatus = RESET;
;;;263      /* Check the parameters */
;;;264      assert_param(IS_IWDG_FLAG(IWDG_FLAG));
;;;265      if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
00002c  68d2              LDR      r2,[r2,#0xc]
00002e  2000              MOVS     r0,#0                 ;262
000030  420a              TST      r2,r1
000032  d000              BEQ      |L1.54|
;;;266      {
;;;267        bitstatus = SET;
000034  2001              MOVS     r0,#1
                  |L1.54|
;;;268      }
;;;269      else
;;;270      {
;;;271        bitstatus = RESET;
;;;272      }
;;;273      /* Return the flag status */
;;;274      return bitstatus;
;;;275    }
000036  4770              BX       lr
;;;276    
                          ENDP

                  |L1.56|
                          DCD      0x40003000
                  |L1.60|
                          DCD      0x0000aaaa
                  |L1.64|
                          DCD      0x0000cccc

;*** Start embedded assembler ***

#line 1 "..\\arch\\arm\\stm32f05x\\lib\\src\\stm32f0xx_iwdg.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f0xx_iwdg_c_15798b01____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f0xx_iwdg_c_15798b01____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f0xx_iwdg_c_15798b01____REVSH|
#line 144
|__asm___16_stm32f0xx_iwdg_c_15798b01____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
