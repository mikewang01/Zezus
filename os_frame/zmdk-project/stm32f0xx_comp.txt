; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\stm32f0xx_comp.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32f0xx_comp.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\stm32f0xx_comp.crf ..\arch\arm\stm32f05x\lib\src\stm32f0xx_comp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  COMP_DeInit PROC
;;;141      */
;;;142    void COMP_DeInit(void)
000000  4929              LDR      r1,|L1.168|
;;;143    {
;;;144      COMP->CSR = ((uint32_t)0x00000000);    /*!< Set COMP_CSR register to reset value */
000002  2000              MOVS     r0,#0
000004  61c8              STR      r0,[r1,#0x1c]
;;;145    }
000006  4770              BX       lr
;;;146    
                          ENDP

                  COMP_Init PROC
;;;162      */
;;;163    void COMP_Init(uint32_t COMP_Selection, COMP_InitTypeDef* COMP_InitStruct)
000008  b570              PUSH     {r4-r6,lr}
;;;164    {
;;;165      uint32_t tmpreg = 0;
;;;166    
;;;167      /* Check the parameters */
;;;168      assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
;;;169      assert_param(IS_COMP_INVERTING_INPUT(COMP_InitStruct->COMP_InvertingInput));
;;;170      assert_param(IS_COMP_OUTPUT(COMP_InitStruct->COMP_Output));
;;;171      assert_param(IS_COMP_OUTPUT_POL(COMP_InitStruct->COMP_OutputPol));
;;;172      assert_param(IS_COMP_HYSTERESIS(COMP_InitStruct->COMP_Hysteresis));
;;;173      assert_param(IS_COMP_MODE(COMP_InitStruct->COMP_Mode));
;;;174    
;;;175      /*!< Get the COMP_CSR register value */
;;;176      tmpreg = COMP->CSR;
00000a  4c27              LDR      r4,|L1.168|
00000c  69e3              LDR      r3,[r4,#0x1c]
;;;177    
;;;178      /*!< Clear the COMP1SW1, COMPx_IN_SEL, COMPx_OUT_TIM_SEL, COMPx_POL, COMPx_HYST and COMPx_PWR_MODE bits */ 
;;;179      tmpreg &= (uint32_t) ~(COMP_CSR_CLEAR_MASK<<COMP_Selection);
00000e  4a27              LDR      r2,|L1.172|
;;;180    
;;;181      /*!< Configure COMP: inverting input, output redirection, hysteresis value and power mode */
;;;182      /*!< Set COMPxINSEL bits according to COMP_InitStruct->COMP_InvertingInput value */
;;;183      /*!< Set COMPxOUTSEL bits according to COMP_InitStruct->COMP_Output value */
;;;184      /*!< Set COMPxPOL bit according to COMP_InitStruct->COMP_OutputPol value */
;;;185      /*!< Set COMPxHYST bits according to COMP_InitStruct->COMP_Hysteresis value */
;;;186      /*!< Set COMPxMODE bits according to COMP_InitStruct->COMP_Mode value */   
;;;187      tmpreg |= (uint32_t)((COMP_InitStruct->COMP_InvertingInput | COMP_InitStruct->COMP_Output |
000010  684d              LDR      r5,[r1,#4]
000012  4082              LSLS     r2,r2,r0              ;179
000014  4393              BICS     r3,r3,r2              ;179
000016  680a              LDR      r2,[r1,#0]
000018  68ce              LDR      r6,[r1,#0xc]
00001a  432a              ORRS     r2,r2,r5
00001c  688d              LDR      r5,[r1,#8]
00001e  6909              LDR      r1,[r1,#0x10]
000020  4335              ORRS     r5,r5,r6
000022  432a              ORRS     r2,r2,r5
000024  430a              ORRS     r2,r2,r1
000026  4082              LSLS     r2,r2,r0
000028  431a              ORRS     r2,r2,r3
;;;188                           COMP_InitStruct->COMP_OutputPol | COMP_InitStruct->COMP_Hysteresis |
;;;189                           COMP_InitStruct->COMP_Mode)<<COMP_Selection);
;;;190    
;;;191      /*!< Write to COMP_CSR register */
;;;192      COMP->CSR = tmpreg;  
00002a  61e2              STR      r2,[r4,#0x1c]
;;;193    }
00002c  bd70              POP      {r4-r6,pc}
;;;194    
                          ENDP

                  COMP_StructInit PROC
;;;200      */
;;;201    void COMP_StructInit(COMP_InitTypeDef* COMP_InitStruct)
00002e  2100              MOVS     r1,#0
;;;202    {
;;;203      COMP_InitStruct->COMP_InvertingInput = COMP_InvertingInput_1_4VREFINT;
;;;204      COMP_InitStruct->COMP_Output = COMP_Output_None;
000030  6001              STR      r1,[r0,#0]
;;;205      COMP_InitStruct->COMP_OutputPol = COMP_OutputPol_NonInverted;
000032  6041              STR      r1,[r0,#4]
;;;206      COMP_InitStruct->COMP_Hysteresis = COMP_Hysteresis_No;
000034  6081              STR      r1,[r0,#8]
;;;207      COMP_InitStruct->COMP_Mode = COMP_Mode_UltraLowPower;
000036  60c1              STR      r1,[r0,#0xc]
000038  210c              MOVS     r1,#0xc
00003a  6101              STR      r1,[r0,#0x10]
;;;208    }
00003c  4770              BX       lr
;;;209    
                          ENDP

                  COMP_Cmd PROC
;;;226      */
;;;227    void COMP_Cmd(uint32_t COMP_Selection, FunctionalState NewState)
00003e  4b1a              LDR      r3,|L1.168|
;;;228    {
;;;229      /* Check the parameters */
;;;230      assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
;;;231      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;232    
;;;233      if (NewState != DISABLE)
;;;234      {
;;;235        /* Enable the selected COMP peripheral */
;;;236        COMP->CSR |= (uint32_t) (1<<COMP_Selection);
000040  2201              MOVS     r2,#1
000042  4082              LSLS     r2,r2,r0
;;;237      }
;;;238      else
;;;239      {
;;;240        /* Disable the selected COMP peripheral  */
;;;241        COMP->CSR &= (uint32_t)(~((uint32_t)1<<COMP_Selection));
000044  69d8              LDR      r0,[r3,#0x1c]
000046  2900              CMP      r1,#0                 ;233
000048  d001              BEQ      |L1.78|
00004a  4310              ORRS     r0,r0,r2              ;236
00004c  e000              B        |L1.80|
                  |L1.78|
00004e  4390              BICS     r0,r0,r2
                  |L1.80|
000050  61d8              STR      r0,[r3,#0x1c]         ;236
;;;242      }
;;;243    }
000052  4770              BX       lr
;;;244    
                          ENDP

                  COMP_SwitchCmd PROC
;;;254      */
;;;255    void COMP_SwitchCmd(FunctionalState NewState)
000054  4914              LDR      r1,|L1.168|
;;;256    {
;;;257      /* Check the parameter */
;;;258      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;259    
;;;260      if (NewState != DISABLE)
;;;261      {
;;;262        /* Close SW1 switch */
;;;263        COMP->CSR |= (uint32_t) (COMP_CSR_COMP1SW1);
000056  2202              MOVS     r2,#2
000058  2800              CMP      r0,#0                 ;260
;;;264      }
;;;265      else
;;;266      {
;;;267        /* Open SW1 switch */
;;;268        COMP->CSR &= (uint32_t)(~COMP_CSR_COMP1SW1);
00005a  69c8              LDR      r0,[r1,#0x1c]
00005c  d001              BEQ      |L1.98|
00005e  4310              ORRS     r0,r0,r2              ;263
000060  e000              B        |L1.100|
                  |L1.98|
000062  4390              BICS     r0,r0,r2
                  |L1.100|
000064  61c8              STR      r0,[r1,#0x1c]         ;263
;;;269      }
;;;270    }
000066  4770              BX       lr
;;;271    
                          ENDP

                  COMP_GetOutputLevel PROC
;;;291      */
;;;292    uint32_t COMP_GetOutputLevel(uint32_t COMP_Selection)
000068  b510              PUSH     {r4,lr}
;;;293    {
;;;294      uint32_t compout = 0x0;
;;;295    
;;;296      /* Check the parameters */
;;;297      assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
;;;298    
;;;299      /* Check if selected comparator output is high */
;;;300      if ((COMP->CSR & (COMP_CSR_COMP1OUT<<COMP_Selection)) != 0)
00006a  490f              LDR      r1,|L1.168|
00006c  4602              MOV      r2,r0                 ;293
00006e  69cb              LDR      r3,[r1,#0x1c]
000070  2000              MOVS     r0,#0                 ;294
000072  2401              MOVS     r4,#1
000074  03a4              LSLS     r4,r4,#14
000076  4621              MOV      r1,r4
000078  4091              LSLS     r1,r1,r2
00007a  420b              TST      r3,r1
00007c  d000              BEQ      |L1.128|
;;;301      {
;;;302        compout = COMP_OutputLevel_High;
00007e  4620              MOV      r0,r4
                  |L1.128|
;;;303      }
;;;304      else
;;;305      {
;;;306        compout = COMP_OutputLevel_Low;
;;;307      }
;;;308    
;;;309      /* Return the comparator output level */
;;;310      return (uint32_t)(compout);
;;;311    }
000080  bd10              POP      {r4,pc}
;;;312    
                          ENDP

                  COMP_WindowCmd PROC
;;;338      */
;;;339    void COMP_WindowCmd(FunctionalState NewState)
000082  4909              LDR      r1,|L1.168|
;;;340    {
;;;341      /* Check the parameters */
;;;342      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;343      
;;;344      if (NewState != DISABLE)
;;;345      {
;;;346        /* Enable the window mode */
;;;347        COMP->CSR |= (uint32_t) COMP_CSR_WNDWEN;
000084  01ca              LSLS     r2,r1,#7
000086  2800              CMP      r0,#0                 ;344
;;;348      }
;;;349      else
;;;350      {
;;;351        /* Disable the window mode */
;;;352        COMP->CSR &= (uint32_t)(~COMP_CSR_WNDWEN);
000088  69c8              LDR      r0,[r1,#0x1c]
00008a  d001              BEQ      |L1.144|
00008c  4310              ORRS     r0,r0,r2              ;347
00008e  e000              B        |L1.146|
                  |L1.144|
000090  4390              BICS     r0,r0,r2
                  |L1.146|
000092  61c8              STR      r0,[r1,#0x1c]         ;347
;;;353      }
;;;354    }
000094  4770              BX       lr
;;;355    
                          ENDP

                  COMP_LockConfig PROC
;;;383      */
;;;384    void COMP_LockConfig(uint32_t COMP_Selection)
000096  4904              LDR      r1,|L1.168|
;;;385    {
;;;386      /* Check the parameter */
;;;387      assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
;;;388    
;;;389      /* Set the lock bit corresponding to selected comparator */
;;;390      COMP->CSR |= (uint32_t) (COMP_CSR_COMP1LOCK<<COMP_Selection);
000098  69ca              LDR      r2,[r1,#0x1c]
00009a  2301              MOVS     r3,#1
00009c  03db              LSLS     r3,r3,#15
00009e  4083              LSLS     r3,r3,r0
0000a0  431a              ORRS     r2,r2,r3
0000a2  61ca              STR      r2,[r1,#0x1c]
;;;391    }
0000a4  4770              BX       lr
;;;392    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L1.168|
                          DCD      0x40010000
                  |L1.172|
                          DCD      0x00003ffe

;*** Start embedded assembler ***

#line 1 "..\\arch\\arm\\stm32f05x\\lib\\src\\stm32f0xx_comp.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f0xx_comp_c_66e338f6____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f0xx_comp_c_66e338f6____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f0xx_comp_c_66e338f6____REVSH|
#line 144
|__asm___16_stm32f0xx_comp_c_66e338f6____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
