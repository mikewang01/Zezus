; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\spi2.o --asm_dir=.\ --list_dir=.\ --depend=.\spi2.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\spi2.crf ..\drivers\stm32f051x\bus\spi2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  gpio_pin_altset PROC
;;;135    
;;;136    __STATIC_INLINE  void gpio_pin_altset(GPIO_TypeDef *portx , u8 pin_num ,u32 altfunction)
000000  074b              LSLS     r3,r1,#29
;;;137    {
;;;138        u32 temp_1,temp_2;
;;;139    	  temp_1 = ((u32)(altfunction) << ((u32)((u32)pin_num & (u32)0x07) * 4));    
000002  0edb              LSRS     r3,r3,#27
000004  409a              LSLS     r2,r2,r3
;;;140    		portx->AFR[pin_num >> 0x03] &= ~((u32)0xF << ((u32)((u32)pin_num & (u32)0x07) * 4));
000006  08c9              LSRS     r1,r1,#3
000008  b510              PUSH     {r4,lr}               ;137
00000a  0089              LSLS     r1,r1,#2
00000c  1808              ADDS     r0,r1,r0
00000e  6a01              LDR      r1,[r0,#0x20]
000010  240f              MOVS     r4,#0xf
000012  409c              LSLS     r4,r4,r3
000014  43a1              BICS     r1,r1,r4
000016  6201              STR      r1,[r0,#0x20]
;;;141    		temp_2 = portx->AFR[pin_num >> 0x03] | temp_1;
000018  6a01              LDR      r1,[r0,#0x20]
00001a  4311              ORRS     r1,r1,r2
;;;142    		portx->AFR[pin_num >> 0x03] = temp_2;
00001c  6201              STR      r1,[r0,#0x20]
;;;143    	
;;;144    }
00001e  bd10              POP      {r4,pc}
;;;145    
                          ENDP

                  spi2_rx_indicator PROC
;;;291    
;;;292    static os_err_t  spi2_rx_indicator(os_device_t* dev,os_size_t size)
000020  2001              MOVS     r0,#1
;;;293    {
;;;294        
;;;295        return SUCCESS;
;;;296    }
000022  4770              BX       lr
;;;297    
                          ENDP

                  spi2_write PROC
;;;250    
;;;251    static os_size_t  spi2_write(os_device_t* dev, os_off_t pos, const void *buffer, os_size_t size)
000024  b510              PUSH     {r4,lr}
;;;252    {
;;;253        u32 spixbase = (u32)SPI2; 
;;;254        spixbase += 0x0C;
;;;255        
;;;256        if(pos>=size||buffer==NULL||size>USART_TX_BUFFER_SIZE)
;;;257        {
;;;258            return  NULL;
;;;259        }else
;;;260        {
;;;261            char* temp=(char*)buffer; 
;;;262            if(pos>0)
;;;263            {
;;;264                temp=temp+pos;
;;;265            }				 
;;;266            
;;;267            while(size>0)
;;;268            {
;;;269                
;;;270                *(__IO u8 *) spixbase = *(char*)temp;
;;;271                temp++;
;;;272                size--;
;;;273                while(!(SPI2->SR&(1<<1)));//Transmit data register empty
;;;274            }
;;;275        }
;;;276        
;;;277        return SUCCESS;
;;;278    }	
000026  4c7a              LDR      r4,|L1.528|
000028  4879              LDR      r0,|L1.528|
00002a  340c              ADDS     r4,r4,#0xc
00002c  4299              CMP      r1,r3                 ;256
00002e  d203              BCS      |L1.56|
000030  2a00              CMP      r2,#0                 ;256
000032  d001              BEQ      |L1.56|
000034  2b40              CMP      r3,#0x40              ;256
000036  d901              BLS      |L1.60|
                  |L1.56|
000038  2000              MOVS     r0,#0                 ;258
00003a  bd10              POP      {r4,pc}
                  |L1.60|
00003c  2900              CMP      r1,#0                 ;262
00003e  d008              BEQ      |L1.82|
000040  1852              ADDS     r2,r2,r1              ;264
000042  e006              B        |L1.82|
                  |L1.68|
000044  7811              LDRB     r1,[r2,#0]            ;270
000046  1c52              ADDS     r2,r2,#1              ;270
000048  7021              STRB     r1,[r4,#0]            ;270
00004a  1e5b              SUBS     r3,r3,#1              ;272
                  |L1.76|
00004c  8901              LDRH     r1,[r0,#8]            ;273
00004e  0789              LSLS     r1,r1,#30             ;273
000050  d5fc              BPL      |L1.76|
                  |L1.82|
000052  2b00              CMP      r3,#0                 ;267
000054  d1f6              BNE      |L1.68|
000056  2001              MOVS     r0,#1                 ;277
000058  bd10              POP      {r4,pc}
;;;279    
                          ENDP

                  spi2_open PROC
;;;211     */
;;;212    static os_err_t  spi2_open(os_device_t* dev, u16 oflag)
00005a  b510              PUSH     {r4,lr}
;;;213    {
;;;214        os_clock_open("SPI2");
00005c  a06d              ADR      r0,|L1.532|
00005e  f7fffffe          BL       os_clock_open
;;;215        os_clock_open("GPIOB");
000062  a06e              ADR      r0,|L1.540|
000064  f7fffffe          BL       os_clock_open
;;;216        
;;;217        return SUCCESS;	
000068  2001              MOVS     r0,#1
;;;218    }
00006a  bd10              POP      {r4,pc}
;;;219    
                          ENDP

                  spi2_init PROC
;;;111    
;;;112    static os_err_t  spi2_init   (os_device_t* dev)
00006c  b570              PUSH     {r4-r6,lr}
;;;113    {  	 
;;;114        
;;;115        u32 tmpreg;
;;;116        SPI_InitTypeDef   SPI_InitStruct;
;;;117        os_clock_open("SPI2");
00006e  a069              ADR      r0,|L1.532|
000070  f7fffffe          BL       os_clock_open
;;;118        os_clock_open("GPIOB");
000074  a069              ADR      r0,|L1.540|
000076  f7fffffe          BL       os_clock_open
;;;119        
;;;120        gpio_pin_altset(SPI2_PORT , SPI2_PIN_MOSI , GPIO_AF_0);
00007a  4d6a              LDR      r5,|L1.548|
00007c  2200              MOVS     r2,#0
00007e  210f              MOVS     r1,#0xf
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       gpio_pin_altset
;;;121        
;;;122        gpio_pin_altset(SPI2_PORT , SPI2_PIN_SCK  , GPIO_AF_0);
000086  2200              MOVS     r2,#0
000088  210d              MOVS     r1,#0xd
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       gpio_pin_altset
;;;123        
;;;124        /* Speed mode configuration */
;;;125        gpio_speed_set(SPI2_PORT , SPI2_PIN_MOSI , GPIO_Speed_50MHz );
000090  2203              MOVS     r2,#3
000092  210f              MOVS     r1,#0xf
000094  4628              MOV      r0,r5
000096  f7fffffe          BL       gpio_speed_set
;;;126        
;;;127        gpio_speed_set(SPI2_PORT , SPI2_PIN_SCK  , GPIO_Speed_50MHz );
00009a  2203              MOVS     r2,#3
00009c  210d              MOVS     r1,#0xd
00009e  4628              MOV      r0,r5
0000a0  f7fffffe          BL       gpio_speed_set
;;;128        
;;;129        
;;;130        /* Output mode configuration */
;;;131        gpio_outtype_set(SPI2_PORT , SPI2_PIN_MOSI , GPIO_OType_PP);
0000a4  2200              MOVS     r2,#0
0000a6  210f              MOVS     r1,#0xf
0000a8  4628              MOV      r0,r5
0000aa  f7fffffe          BL       gpio_outtype_set
;;;132        
;;;133        gpio_outtype_set(SPI2_PORT , SPI2_PIN_SCK , GPIO_OType_PP);
0000ae  2200              MOVS     r2,#0
0000b0  210d              MOVS     r1,#0xd
0000b2  4628              MOV      r0,r5
0000b4  f7fffffe          BL       gpio_outtype_set
;;;134        
;;;135        
;;;136        gpio_outmode_set(SPI2_PORT , SPI2_PIN_MOSI , GPIO_Mode_AF);
0000b8  2202              MOVS     r2,#2
0000ba  210f              MOVS     r1,#0xf
0000bc  4628              MOV      r0,r5
0000be  f7fffffe          BL       gpio_outmode_set
;;;137        gpio_outmode_set(SPI2_PORT , SPI2_PIN_MISO , GPIO_Mode_AF);
0000c2  2202              MOVS     r2,#2
0000c4  210e              MOVS     r1,#0xe
0000c6  4628              MOV      r0,r5
0000c8  f7fffffe          BL       gpio_outmode_set
;;;138        gpio_outmode_set(SPI2_PORT , SPI2_PIN_SCK ,  GPIO_Mode_AF);
0000cc  2202              MOVS     r2,#2
0000ce  210d              MOVS     r1,#0xd
0000d0  4628              MOV      r0,r5
0000d2  f7fffffe          BL       gpio_outmode_set
;;;139        
;;;140        /* Pull-up Pull down resistor configuration */
;;;141        gpio_pupdr_set(SPI2_PORT , SPI2_PIN_MOSI , GPIO_PuPd_UP);
0000d6  2201              MOVS     r2,#1
0000d8  210f              MOVS     r1,#0xf
0000da  4628              MOV      r0,r5
0000dc  f7fffffe          BL       gpio_pupdr_set
;;;142        
;;;143        gpio_pupdr_set(SPI2_PORT , SPI2_PIN_SCK , GPIO_PuPd_UP);
0000e0  2201              MOVS     r2,#1
0000e2  210d              MOVS     r1,#0xd
0000e4  4628              MOV      r0,r5
0000e6  f7fffffe          BL       gpio_pupdr_set
;;;144        
;;;145        
;;;146        
;;;147        if(spi_dev->mode != spi_tx_only)
0000ea  4c4f              LDR      r4,|L1.552|
0000ec  6821              LDR      r1,[r4,#0]  ; spi_dev
0000ee  3120              ADDS     r1,r1,#0x20
0000f0  7f08              LDRB     r0,[r1,#0x1c]
0000f2  2801              CMP      r0,#1
0000f4  d013              BEQ      |L1.286|
;;;148        {
;;;149            gpio_pin_altset(SPI2_PORT ,  SPI2_PIN_MISO , GPIO_AF_0);
0000f6  2200              MOVS     r2,#0
0000f8  210e              MOVS     r1,#0xe
0000fa  4628              MOV      r0,r5
0000fc  f7fffffe          BL       gpio_pin_altset
;;;150            gpio_speed_set(SPI2_PORT ,   SPI2_PIN_MISO , GPIO_Speed_50MHz ); 
000100  2203              MOVS     r2,#3
000102  210e              MOVS     r1,#0xe
000104  4628              MOV      r0,r5
000106  f7fffffe          BL       gpio_speed_set
;;;151            gpio_outtype_set(SPI2_PORT , SPI2_PIN_MISO , GPIO_OType_PP);
00010a  2200              MOVS     r2,#0
00010c  210e              MOVS     r1,#0xe
00010e  4628              MOV      r0,r5
000110  f7fffffe          BL       gpio_outtype_set
;;;152            gpio_pupdr_set(SPI2_PORT ,   SPI2_PIN_MISO , GPIO_PuPd_UP);
000114  2201              MOVS     r2,#1
000116  210e              MOVS     r1,#0xe
000118  4628              MOV      r0,r5
00011a  f7fffffe          BL       gpio_pupdr_set
                  |L1.286|
;;;153            
;;;154        }	
;;;155        
;;;156        
;;;157        /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;158        /* Get the SPIx CR1 value */
;;;159        tmpreg = SPI2->CR1;
00011e  483c              LDR      r0,|L1.528|
000120  8801              LDRH     r1,[r0,#0]
;;;160        /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
;;;161        tmpreg &= ((uint16_t)0x3040);
000122  22c1              MOVS     r2,#0xc1
000124  0192              LSLS     r2,r2,#6
000126  4011              ANDS     r1,r1,r2
;;;162        /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;163      master/slave mode, CPOL and CPHA */
;;;164        /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;165        /* Set SSM, SSI bit according to SPI_NSS values */
;;;166        /* Set LSBFirst bit according to SPI_FirstBit value */
;;;167        /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;168        /* Set CPOL bit according to SPI_CPOL value */
;;;169        /* Set CPHA bit according to SPI_CPHA value */
;;;170        tmpreg |= (uint16_t)((uint32_t) 1<<15 | 1<<14|1<<9|0<<7|(spi_dev->prescale<<3)|1<<1|1<<0);  
000128  6822              LDR      r2,[r4,#0]  ; spi_dev
00012a  4b40              LDR      r3,|L1.556|
00012c  6c52              LDR      r2,[r2,#0x44]
00012e  00d2              LSLS     r2,r2,#3
000130  431a              ORRS     r2,r2,r3
000132  430a              ORRS     r2,r2,r1
;;;171        /* Write to SPIx CR1 */
;;;172        SPI2->CR1 = (tmpreg); 
000134  8002              STRH     r2,[r0,#0]
;;;173        /* 8 	BITS DATA FORMAT */
;;;174        SPI2->CRCPR = 7;
000136  2107              MOVS     r1,#7
000138  8201              STRH     r1,[r0,#0x10]
;;;175        
;;;176        SPI2->CR2  = (7<<8);
00013a  0209              LSLS     r1,r1,#8
00013c  8081              STRH     r1,[r0,#4]
;;;177        
;;;178        /*  	master mode */
;;;179        SPI2->CR1 |= ((uint16_t)0x0104);
00013e  8801              LDRH     r1,[r0,#0]
000140  22ff              MOVS     r2,#0xff
000142  3205              ADDS     r2,#5
000144  4311              ORRS     r1,r1,r2
000146  8001              STRH     r1,[r0,#0]
;;;180        
;;;181        /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;182        SPI2->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
000148  8b81              LDRH     r1,[r0,#0x1c]
00014a  4a39              LDR      r2,|L1.560|
00014c  4011              ANDS     r1,r1,r2
00014e  8381              STRH     r1,[r0,#0x1c]
;;;183        /* ENABLE SPI2 */	
;;;184        SPI2->CR1 |=SPI_CR1_SPE; //ENABLE SPI2
000150  8801              LDRH     r1,[r0,#0]
000152  2240              MOVS     r2,#0x40
000154  4311              ORRS     r1,r1,r2
000156  8001              STRH     r1,[r0,#0]
;;;185        
;;;186        //	NVIC_SetPriority(USART1_IRQn , 0x00);
;;;187        //	NVIC_EnableIRQ(USART1_IRQn);
;;;188        
;;;189        
;;;190        
;;;191        
;;;192        //	 os_clock_close("SPI2");	
;;;193        os_clock_open("SPI2");
000158  a02e              ADR      r0,|L1.532|
00015a  f7fffffe          BL       os_clock_open
;;;194        os_clock_open("GPIOB");
00015e  a02f              ADR      r0,|L1.540|
000160  f7fffffe          BL       os_clock_open
;;;195        
;;;196        return SUCCESS;
000164  2001              MOVS     r0,#1
;;;197        
;;;198        
;;;199    }
000166  bd70              POP      {r4-r6,pc}
;;;200    
                          ENDP

                  spi2_register PROC
;;;65     
;;;66     os_err_t spi2_register(u16 task_id)
000168  b510              PUSH     {r4,lr}
;;;67     {
00016a  4604              MOV      r4,r0
;;;68         
;;;69         spi_dev=osmalloc(sizeof(spi_device));
00016c  204c              MOVS     r0,#0x4c
00016e  f7fffffe          BL       osmalloc
000172  492d              LDR      r1,|L1.552|
;;;70         
;;;71         spi_dev->pclk2=SYSCLK;
;;;72         
;;;73         spi_dev->prescale=SPICLK_DIV_4;
;;;74         
;;;75         spi_dev->os_device.type = OS_Device_Class_SPIBUS;
000174  220b              MOVS     r2,#0xb
000176  6008              STR      r0,[r1,#0]            ;71  ; spi_dev
000178  2130              MOVS     r1,#0x30              ;71
00017a  6401              STR      r1,[r0,#0x40]         ;73
00017c  2101              MOVS     r1,#1                 ;73
00017e  6441              STR      r1,[r0,#0x44]
000180  7402              STRB     r2,[r0,#0x10]
;;;76         
;;;77         spi_dev->os_device.device_id = OS_DEVICE_USART_ID;
000182  7581              STRB     r1,[r0,#0x16]
;;;78         
;;;79         spi_dev->register_taskid = task_id;
000184  87c4              STRH     r4,[r0,#0x3e]
;;;80         
;;;81         spi_dev->mode =  spi_tx_only;
000186  223c              MOVS     r2,#0x3c
000188  5411              STRB     r1,[r2,r0]
;;;82         
;;;83         spi_dev->os_device.init  = spi2_init;
00018a  492a              LDR      r1,|L1.564|
;;;84         
;;;85         spi_dev->os_device.open  = spi2_open;
00018c  6201              STR      r1,[r0,#0x20]
00018e  492a              LDR      r1,|L1.568|
;;;86         
;;;87         spi_dev->os_device.write = spi2_write;
000190  6241              STR      r1,[r0,#0x24]
000192  492a              LDR      r1,|L1.572|
;;;88         
;;;89         spi_dev->os_device.rx_indicate = spi2_rx_indicator;
000194  6301              STR      r1,[r0,#0x30]
000196  492a              LDR      r1,|L1.576|
;;;90         
;;;91         return os_device_register(&(spi_dev->os_device), SPI2_NAME, OS_DEVICE_FLAG_INACTIVATED);
000198  6181              STR      r1,[r0,#0x18]
00019a  2202              MOVS     r2,#2
00019c  a11d              ADR      r1,|L1.532|
00019e  f7fffffe          BL       os_device_register
;;;92         
;;;93     }
0001a2  bd10              POP      {r4,pc}
;;;94     /*********************************************************************
                          ENDP

                  spi2_close PROC
;;;229     */
;;;230    os_err_t  spi2_close(os_device_t* dev, u16 oflag)
0001a4  b510              PUSH     {r4,lr}
;;;231    {
;;;232        
;;;233        os_clock_close("SPI2");
0001a6  a01b              ADR      r0,|L1.532|
0001a8  f7fffffe          BL       os_clock_close
;;;234        os_clock_close("GPIOB");
0001ac  a01b              ADR      r0,|L1.540|
0001ae  f7fffffe          BL       os_clock_close
;;;235        
;;;236        return SUCCESS;		
0001b2  2001              MOVS     r0,#1
;;;237        
;;;238    }
0001b4  bd10              POP      {r4,pc}
;;;239    /*********************************************************************
                          ENDP

                  SPI2_IRQHandler PROC
;;;307     */  
;;;308    void SPI2_IRQHandler(void)
0001b6  4770              BX       lr
;;;309    {
;;;310        
;;;311        
;;;312        
;;;313        
;;;314    } 
;;;315    
                          ENDP

                  gpio_speed_set PROC
;;;145    
;;;146    __STATIC_INLINE  void gpio_speed_set(GPIO_TypeDef *portx , u8 pin_num ,u32 gpio_speed)
0001b8  6883              LDR      r3,[r0,#8]
;;;147    {
;;;148           portx->OSPEEDR &=~(gpio_speed << (pin_num <<1));
0001ba  0049              LSLS     r1,r1,#1
0001bc  408a              LSLS     r2,r2,r1
0001be  4393              BICS     r3,r3,r2
0001c0  6083              STR      r3,[r0,#8]
;;;149           portx->OSPEEDR |= (gpio_speed << (pin_num <<1));
0001c2  6881              LDR      r1,[r0,#8]
0001c4  4311              ORRS     r1,r1,r2
0001c6  6081              STR      r1,[r0,#8]
;;;150    }
0001c8  4770              BX       lr
;;;151    
                          ENDP

                  gpio_outtype_set PROC
;;;152    
;;;153    __STATIC_INLINE  void gpio_outtype_set(GPIO_TypeDef *portx , u8 pin_num ,u32 output_type)
0001ca  b510              PUSH     {r4,lr}
;;;154    {
;;;155    		  portx->OTYPER &=~(GPIO_OTYPER_OT_0 << ((uint16_t)pin_num));
0001cc  8883              LDRH     r3,[r0,#4]
0001ce  2401              MOVS     r4,#1
0001d0  408c              LSLS     r4,r4,r1
0001d2  43a3              BICS     r3,r3,r4
0001d4  8083              STRH     r3,[r0,#4]
;;;156    	    portx->OTYPER |= (((output_type)   << ((uint16_t)pin_num)));
0001d6  8883              LDRH     r3,[r0,#4]
0001d8  408a              LSLS     r2,r2,r1
0001da  4313              ORRS     r3,r3,r2
0001dc  8083              STRH     r3,[r0,#4]
;;;157    }
0001de  bd10              POP      {r4,pc}
;;;158    
                          ENDP

                  gpio_outmode_set PROC
;;;159    __STATIC_INLINE  void gpio_outmode_set(GPIO_TypeDef *portx , u8 pin_num ,u32 output_mode)
0001e0  b510              PUSH     {r4,lr}
;;;160    {
;;;161             portx->MODER  &= ~((GPIO_MODER_MODER0 << (pin_num <<1)));
0001e2  6803              LDR      r3,[r0,#0]
0001e4  0049              LSLS     r1,r1,#1
0001e6  2403              MOVS     r4,#3
0001e8  408c              LSLS     r4,r4,r1
0001ea  43a3              BICS     r3,r3,r4
0001ec  6003              STR      r3,[r0,#0]
;;;162             portx->MODER |= ((output_mode << (pin_num <<1)));
0001ee  6803              LDR      r3,[r0,#0]
0001f0  408a              LSLS     r2,r2,r1
0001f2  4313              ORRS     r3,r3,r2
0001f4  6003              STR      r3,[r0,#0]
;;;163    
;;;164    }
0001f6  bd10              POP      {r4,pc}
;;;165    
                          ENDP

                  gpio_pupdr_set PROC
;;;166    __STATIC_INLINE  void gpio_pupdr_set(GPIO_TypeDef *portx , u8 pin_num ,u32 pupdr_mode)
0001f8  b510              PUSH     {r4,lr}
;;;167    {
;;;168    		     portx->PUPDR &= ~((GPIO_PUPDR_PUPDR0 << (pin_num <<1)));
0001fa  68c3              LDR      r3,[r0,#0xc]
0001fc  0049              LSLS     r1,r1,#1
0001fe  2403              MOVS     r4,#3
000200  408c              LSLS     r4,r4,r1
000202  43a3              BICS     r3,r3,r4
000204  60c3              STR      r3,[r0,#0xc]
;;;169    				 portx->PUPDR |=  ((pupdr_mode      << (pin_num <<1)));	
000206  68c3              LDR      r3,[r0,#0xc]
000208  408a              LSLS     r2,r2,r1
00020a  4313              ORRS     r3,r3,r2
00020c  60c3              STR      r3,[r0,#0xc]
;;;170    }
00020e  bd10              POP      {r4,pc}
;;;171    
                          ENDP

                  |L1.528|
                          DCD      0x40003800
                  |L1.532|
000214  53504932          DCB      "SPI2",0
000218  00      
000219  00                DCB      0
00021a  00                DCB      0
00021b  00                DCB      0
                  |L1.540|
00021c  4750494f          DCB      "GPIOB",0
000220  4200    
000222  00                DCB      0
000223  00                DCB      0
                  |L1.548|
                          DCD      0x48000400
                  |L1.552|
                          DCD      ||.data||
                  |L1.556|
                          DCD      0x0000c203
                  |L1.560|
                          DCD      0x0000f7ff
                  |L1.564|
                          DCD      spi2_init
                  |L1.568|
                          DCD      spi2_open
                  |L1.572|
                          DCD      spi2_write
                  |L1.576|
                          DCD      spi2_rx_indicator

                          AREA ||.data||, DATA, ALIGN=2

                  spi_dev
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drivers\\stm32f051x\\bus\\spi2.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_spi2_c_fcaf3c5e____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_spi2_c_fcaf3c5e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_spi2_c_fcaf3c5e____REVSH|
#line 144
|__asm___6_spi2_c_fcaf3c5e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
