; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\stm32f0xx_flash.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32f0xx_flash.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\stm32f0xx_flash.crf ..\arch\arm\stm32f05x\lib\src\stm32f0xx_flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FLASH_SetLatency PROC
;;;134      */
;;;135    void FLASH_SetLatency(uint32_t FLASH_Latency)
000000  4afe              LDR      r2,|L1.1020|
;;;136    {
;;;137       uint32_t tmpreg = 0;
;;;138    
;;;139      /* Check the parameters */
;;;140      assert_param(IS_FLASH_LATENCY(FLASH_Latency));
;;;141    
;;;142      /* Read the ACR register */
;;;143      tmpreg = FLASH->ACR;  
000002  6811              LDR      r1,[r2,#0]
;;;144    
;;;145      /* Sets the Latency value */
;;;146      tmpreg &= (uint32_t) (~((uint32_t)FLASH_ACR_LATENCY));
000004  0849              LSRS     r1,r1,#1
000006  0049              LSLS     r1,r1,#1
;;;147      tmpreg |= FLASH_Latency;
000008  4301              ORRS     r1,r1,r0
;;;148    
;;;149      /* Write the ACR register */
;;;150      FLASH->ACR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;151    }
00000c  4770              BX       lr
;;;152    
                          ENDP

                  FLASH_PrefetchBufferCmd PROC
;;;158      */
;;;159    void FLASH_PrefetchBufferCmd(FunctionalState NewState)
00000e  49fb              LDR      r1,|L1.1020|
;;;160    {
;;;161      /* Check the parameters */
;;;162      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;163    
;;;164      if(NewState != DISABLE)
;;;165      {
;;;166        FLASH->ACR |= FLASH_ACR_PRFTBE;
000010  2210              MOVS     r2,#0x10
000012  2800              CMP      r0,#0                 ;164
;;;167      }
;;;168      else
;;;169      {
;;;170        FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
000014  6808              LDR      r0,[r1,#0]
000016  d001              BEQ      |L1.28|
000018  4310              ORRS     r0,r0,r2              ;166
00001a  e000              B        |L1.30|
                  |L1.28|
00001c  4390              BICS     r0,r0,r2
                  |L1.30|
00001e  6008              STR      r0,[r1,#0]            ;166
;;;171      }
;;;172    }
000020  4770              BX       lr
;;;173    
                          ENDP

                  FLASH_GetPrefetchBufferStatus PROC
;;;178      */
;;;179    FlagStatus FLASH_GetPrefetchBufferStatus(void)
000022  49f6              LDR      r1,|L1.1020|
;;;180    {
;;;181      FlagStatus bitstatus = RESET;
000024  2000              MOVS     r0,#0
;;;182    
;;;183      if ((FLASH->ACR & FLASH_ACR_PRFTBS) != (uint32_t)RESET)
000026  6809              LDR      r1,[r1,#0]
000028  0689              LSLS     r1,r1,#26
00002a  d500              BPL      |L1.46|
;;;184      {
;;;185        bitstatus = SET;
00002c  2001              MOVS     r0,#1
                  |L1.46|
;;;186      }
;;;187      else
;;;188      {
;;;189        bitstatus = RESET;
;;;190      }
;;;191      /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
;;;192      return bitstatus; 
;;;193    }
00002e  4770              BX       lr
;;;194    
                          ENDP

                  FLASH_Unlock PROC
;;;231      */
;;;232    void FLASH_Unlock(void)
000030  48f2              LDR      r0,|L1.1020|
;;;233    {
;;;234      if((FLASH->CR & FLASH_CR_LOCK) != RESET)
000032  6901              LDR      r1,[r0,#0x10]
000034  0609              LSLS     r1,r1,#24
000036  d503              BPL      |L1.64|
;;;235      {
;;;236        /* Unlocking the program memory access */
;;;237        FLASH->KEYR = FLASH_FKEY1;
000038  49f1              LDR      r1,|L1.1024|
00003a  6041              STR      r1,[r0,#4]
;;;238        FLASH->KEYR = FLASH_FKEY2;
00003c  49f1              LDR      r1,|L1.1028|
00003e  6041              STR      r1,[r0,#4]
                  |L1.64|
;;;239      }
;;;240    }
000040  4770              BX       lr
;;;241    
                          ENDP

                  FLASH_Lock PROC
;;;246      */
;;;247    void FLASH_Lock(void)
000042  48ee              LDR      r0,|L1.1020|
;;;248    {
;;;249      /* Set the LOCK Bit to lock the FLASH control register and program memory access */
;;;250      FLASH->CR |= FLASH_CR_LOCK;
000044  6901              LDR      r1,[r0,#0x10]
000046  2280              MOVS     r2,#0x80
000048  4311              ORRS     r1,r1,r2
00004a  6101              STR      r1,[r0,#0x10]
;;;251    }
00004c  4770              BX       lr
;;;252    
                          ENDP

                  FLASH_GetStatus PROC
;;;1094     */
;;;1095   FLASH_Status FLASH_GetStatus(void)
00004e  49eb              LDR      r1,|L1.1020|
;;;1096   {
;;;1097     FLASH_Status FLASHstatus = FLASH_COMPLETE;
000050  2004              MOVS     r0,#4
;;;1098     
;;;1099     if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
000052  68ca              LDR      r2,[r1,#0xc]
000054  07d2              LSLS     r2,r2,#31
000056  d001              BEQ      |L1.92|
;;;1100     {
;;;1101       FLASHstatus = FLASH_BUSY;
000058  2001              MOVS     r0,#1
;;;1102     }
;;;1103     else 
;;;1104     {  
;;;1105       if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
;;;1106       { 
;;;1107         FLASHstatus = FLASH_ERROR_WRP;
;;;1108       }
;;;1109       else 
;;;1110       {
;;;1111         if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
;;;1112         {
;;;1113           FLASHstatus = FLASH_ERROR_PROGRAM; 
;;;1114         }
;;;1115         else
;;;1116         {
;;;1117           FLASHstatus = FLASH_COMPLETE;
;;;1118         }
;;;1119       }
;;;1120     }
;;;1121     /* Return the FLASH Status */
;;;1122     return FLASHstatus;
;;;1123   }
00005a  4770              BX       lr
                  |L1.92|
00005c  68ca              LDR      r2,[r1,#0xc]          ;1105
00005e  06d2              LSLS     r2,r2,#27             ;1105
000060  d501              BPL      |L1.102|
000062  2002              MOVS     r0,#2                 ;1107
                  |L1.100|
000064  4770              BX       lr
                  |L1.102|
000066  68c9              LDR      r1,[r1,#0xc]          ;1111
000068  0749              LSLS     r1,r1,#29             ;1111
00006a  d5fb              BPL      |L1.100|
00006c  2003              MOVS     r0,#3                 ;1113
00006e  4770              BX       lr
;;;1124   
                          ENDP

                  FLASH_WaitForLastOperation PROC
;;;1131     */
;;;1132   FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
000070  b500              PUSH     {lr}
;;;1133   { 
000072  4603              MOV      r3,r0
;;;1134     FLASH_Status status = FLASH_COMPLETE;
;;;1135      
;;;1136     /* Check for the FLASH Status */
;;;1137     status = FLASH_GetStatus();
000074  f7fffffe          BL       FLASH_GetStatus
;;;1138     
;;;1139     /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
;;;1140     while((status == FLASH_BUSY) && (Timeout != 0x00))
000078  e002              B        |L1.128|
                  |L1.122|
;;;1141     {
;;;1142       status = FLASH_GetStatus();
00007a  f7fffffe          BL       FLASH_GetStatus
;;;1143       Timeout--;
00007e  1e5b              SUBS     r3,r3,#1
                  |L1.128|
000080  2801              CMP      r0,#1                 ;1140
000082  d003              BEQ      |L1.140|
;;;1144     }
;;;1145     
;;;1146     if(Timeout == 0x00 )
000084  2b00              CMP      r3,#0
000086  d100              BNE      |L1.138|
                  |L1.136|
;;;1147     {
;;;1148       status = FLASH_TIMEOUT;
000088  2005              MOVS     r0,#5
                  |L1.138|
;;;1149     }
;;;1150     /* Return the operation status */
;;;1151     return status;
;;;1152   }
00008a  bd00              POP      {pc}
                  |L1.140|
00008c  2b00              CMP      r3,#0                 ;1140
00008e  d1f4              BNE      |L1.122|
000090  e7fa              B        |L1.136|
;;;1153   
                          ENDP

                  FLASH_ErasePage PROC
;;;264      */
;;;265    FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
000092  b5f0              PUSH     {r4-r7,lr}
;;;266    {
;;;267      FLASH_Status status = FLASH_COMPLETE;
;;;268    
;;;269      /* Check the parameters */
;;;270      assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
;;;271     
;;;272      /* Wait for last operation to be completed */
;;;273      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000094  270b              MOVS     r7,#0xb
000096  4606              MOV      r6,r0                 ;266
000098  043f              LSLS     r7,r7,#16
00009a  4638              MOV      r0,r7
00009c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;274      
;;;275      if(status == FLASH_COMPLETE)
0000a0  2804              CMP      r0,#4
0000a2  d10f              BNE      |L1.196|
;;;276      { 
;;;277        /* If the previous operation is completed, proceed to erase the page */
;;;278        FLASH->CR |= FLASH_CR_PER;
0000a4  4cd5              LDR      r4,|L1.1020|
0000a6  6920              LDR      r0,[r4,#0x10]
0000a8  2502              MOVS     r5,#2
0000aa  4328              ORRS     r0,r0,r5
0000ac  6120              STR      r0,[r4,#0x10]
;;;279        FLASH->AR  = Page_Address;
0000ae  6166              STR      r6,[r4,#0x14]
;;;280        FLASH->CR |= FLASH_CR_STRT;
0000b0  6920              LDR      r0,[r4,#0x10]
0000b2  2140              MOVS     r1,#0x40
0000b4  4308              ORRS     r0,r0,r1
0000b6  6120              STR      r0,[r4,#0x10]
;;;281        
;;;282        /* Wait for last operation to be completed */
;;;283        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
0000b8  4638              MOV      r0,r7
0000ba  f7fffffe          BL       FLASH_WaitForLastOperation
;;;284        
;;;285        /* Disable the PER Bit */
;;;286        FLASH->CR &= ~FLASH_CR_PER;
0000be  6921              LDR      r1,[r4,#0x10]
0000c0  43a9              BICS     r1,r1,r5
0000c2  6121              STR      r1,[r4,#0x10]
                  |L1.196|
;;;287      }
;;;288        
;;;289      /* Return the Erase Status */
;;;290      return status;
;;;291    }
0000c4  bdf0              POP      {r4-r7,pc}
;;;292    
                          ENDP

                  FLASH_EraseAllPages PROC
;;;302      */
;;;303    FLASH_Status FLASH_EraseAllPages(void)
0000c6  b570              PUSH     {r4-r6,lr}
;;;304    {
;;;305      FLASH_Status status = FLASH_COMPLETE;
;;;306    
;;;307      /* Wait for last operation to be completed */
;;;308      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
0000c8  250b              MOVS     r5,#0xb
0000ca  042d              LSLS     r5,r5,#16
0000cc  4628              MOV      r0,r5
0000ce  f7fffffe          BL       FLASH_WaitForLastOperation
;;;309      
;;;310      if(status == FLASH_COMPLETE)
0000d2  2804              CMP      r0,#4
0000d4  d10e              BNE      |L1.244|
;;;311      {
;;;312        /* if the previous operation is completed, proceed to erase all pages */
;;;313         FLASH->CR |= FLASH_CR_MER;
0000d6  4cc9              LDR      r4,|L1.1020|
0000d8  6920              LDR      r0,[r4,#0x10]
0000da  2604              MOVS     r6,#4
0000dc  4330              ORRS     r0,r0,r6
0000de  6120              STR      r0,[r4,#0x10]
;;;314         FLASH->CR |= FLASH_CR_STRT;
0000e0  6920              LDR      r0,[r4,#0x10]
0000e2  2140              MOVS     r1,#0x40
0000e4  4308              ORRS     r0,r0,r1
0000e6  6120              STR      r0,[r4,#0x10]
;;;315        
;;;316        /* Wait for last operation to be completed */
;;;317        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
0000e8  4628              MOV      r0,r5
0000ea  f7fffffe          BL       FLASH_WaitForLastOperation
;;;318    
;;;319        /* Disable the MER Bit */
;;;320        FLASH->CR &= ~FLASH_CR_MER;
0000ee  6921              LDR      r1,[r4,#0x10]
0000f0  43b1              BICS     r1,r1,r6
0000f2  6121              STR      r1,[r4,#0x10]
                  |L1.244|
;;;321      }
;;;322    
;;;323      /* Return the Erase Status */
;;;324      return status;
;;;325    }
0000f4  bd70              POP      {r4-r6,pc}
;;;326    
                          ENDP

                  FLASH_ProgramWord PROC
;;;337      */
;;;338    FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
0000f6  b5f8              PUSH     {r3-r7,lr}
;;;339    {
0000f8  4606              MOV      r6,r0
;;;340      FLASH_Status status = FLASH_COMPLETE;
;;;341      __IO uint32_t tmp = 0;
0000fa  2000              MOVS     r0,#0
;;;342    
;;;343      /* Check the parameters */
;;;344      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;345    
;;;346      /* Wait for last operation to be completed */
;;;347      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
0000fc  270b              MOVS     r7,#0xb
0000fe  043f              LSLS     r7,r7,#16
000100  9000              STR      r0,[sp,#0]
000102  460d              MOV      r5,r1                 ;339
000104  4638              MOV      r0,r7
000106  f7fffffe          BL       FLASH_WaitForLastOperation
;;;348      
;;;349      if(status == FLASH_COMPLETE)
00010a  2804              CMP      r0,#4
00010c  d115              BNE      |L1.314|
;;;350      {
;;;351        /* If the previous operation is completed, proceed to program the new first 
;;;352        half word */
;;;353        FLASH->CR |= FLASH_CR_PG;
00010e  4cbb              LDR      r4,|L1.1020|
000110  6920              LDR      r0,[r4,#0x10]
000112  2101              MOVS     r1,#1
000114  4308              ORRS     r0,r0,r1
000116  6120              STR      r0,[r4,#0x10]
;;;354      
;;;355        *(__IO uint16_t*)Address = (uint16_t)Data;
000118  8035              STRH     r5,[r6,#0]
;;;356        
;;;357        /* Wait for last operation to be completed */
;;;358        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00011a  4638              MOV      r0,r7
00011c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;359     
;;;360        if(status == FLASH_COMPLETE)
000120  2804              CMP      r0,#4
000122  d106              BNE      |L1.306|
;;;361        {
;;;362          /* If the previous operation is completed, proceed to program the new second 
;;;363          half word */
;;;364          tmp = Address + 2;
000124  1cb6              ADDS     r6,r6,#2
;;;365    
;;;366          *(__IO uint16_t*) tmp = Data >> 16;
000126  0c29              LSRS     r1,r5,#16
000128  9600              STR      r6,[sp,#0]
00012a  8031              STRH     r1,[r6,#0]
;;;367        
;;;368          /* Wait for last operation to be completed */
;;;369          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00012c  4638              MOV      r0,r7
00012e  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L1.306|
;;;370            
;;;371          /* Disable the PG Bit */
;;;372          FLASH->CR &= ~FLASH_CR_PG;
;;;373        }
;;;374        else
;;;375        {
;;;376          /* Disable the PG Bit */
;;;377          FLASH->CR &= ~FLASH_CR_PG;
000132  6921              LDR      r1,[r4,#0x10]
000134  0849              LSRS     r1,r1,#1
000136  0049              LSLS     r1,r1,#1
000138  6121              STR      r1,[r4,#0x10]
                  |L1.314|
;;;378        }
;;;379      }
;;;380       
;;;381      /* Return the Program Status */
;;;382      return status;
;;;383    }
00013a  bdf8              POP      {r3-r7,pc}
;;;384    
                          ENDP

                  FLASH_ProgramHalfWord PROC
;;;395      */
;;;396    FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
00013c  b5f0              PUSH     {r4-r7,lr}
;;;397    {
;;;398      FLASH_Status status = FLASH_COMPLETE;
;;;399    
;;;400      /* Check the parameters */
;;;401      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;402    
;;;403      /* Wait for last operation to be completed */
;;;404      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00013e  270b              MOVS     r7,#0xb
000140  4606              MOV      r6,r0                 ;397
000142  043f              LSLS     r7,r7,#16
000144  460d              MOV      r5,r1                 ;397
000146  4638              MOV      r0,r7
000148  f7fffffe          BL       FLASH_WaitForLastOperation
;;;405      
;;;406      if(status == FLASH_COMPLETE)
00014c  2804              CMP      r0,#4
00014e  d10c              BNE      |L1.362|
;;;407      {
;;;408        /* If the previous operation is completed, proceed to program the new data */
;;;409        FLASH->CR |= FLASH_CR_PG;
000150  4caa              LDR      r4,|L1.1020|
000152  6920              LDR      r0,[r4,#0x10]
000154  2101              MOVS     r1,#1
000156  4308              ORRS     r0,r0,r1
000158  6120              STR      r0,[r4,#0x10]
;;;410      
;;;411        *(__IO uint16_t*)Address = Data;
00015a  8035              STRH     r5,[r6,#0]
;;;412    
;;;413        /* Wait for last operation to be completed */
;;;414        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00015c  4638              MOV      r0,r7
00015e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;415        
;;;416        /* Disable the PG Bit */
;;;417        FLASH->CR &= ~FLASH_CR_PG;
000162  6921              LDR      r1,[r4,#0x10]
000164  0849              LSRS     r1,r1,#1
000166  0049              LSLS     r1,r1,#1
000168  6121              STR      r1,[r4,#0x10]
                  |L1.362|
;;;418      } 
;;;419      
;;;420      /* Return the Program Status */
;;;421      return status;
;;;422    }
00016a  bdf0              POP      {r4-r7,pc}
;;;423    
                          ENDP

                  FLASH_OB_Unlock PROC
;;;485      */
;;;486    void FLASH_OB_Unlock(void)
00016c  48a3              LDR      r0,|L1.1020|
;;;487    {
;;;488      if((FLASH->CR & FLASH_CR_OPTWRE) == RESET)
00016e  6901              LDR      r1,[r0,#0x10]
000170  0589              LSLS     r1,r1,#22
000172  d403              BMI      |L1.380|
;;;489      { 
;;;490        /* Unlocking the option bytes block access */
;;;491        FLASH->OPTKEYR = FLASH_OPTKEY1;
000174  49a2              LDR      r1,|L1.1024|
000176  6081              STR      r1,[r0,#8]
;;;492        FLASH->OPTKEYR = FLASH_OPTKEY2;
000178  49a2              LDR      r1,|L1.1028|
00017a  6081              STR      r1,[r0,#8]
                  |L1.380|
;;;493      }
;;;494    }
00017c  4770              BX       lr
;;;495    
                          ENDP

                  FLASH_OB_Lock PROC
;;;500      */
;;;501    void FLASH_OB_Lock(void)
00017e  489f              LDR      r0,|L1.1020|
;;;502    {
;;;503      /* Set the OPTWREN Bit to lock the option bytes block access */
;;;504      FLASH->CR &= ~FLASH_CR_OPTWRE;
000180  6901              LDR      r1,[r0,#0x10]
000182  1542              ASRS     r2,r0,#21
000184  4391              BICS     r1,r1,r2
000186  6101              STR      r1,[r0,#0x10]
;;;505    }
000188  4770              BX       lr
;;;506    
                          ENDP

                  FLASH_OB_Launch PROC
;;;511      */
;;;512    void FLASH_OB_Launch(void)
00018a  489c              LDR      r0,|L1.1020|
;;;513    {
;;;514      /* Set the OBL_Launch bit to launch the option byte loading */
;;;515      FLASH->CR |= FLASH_CR_OBL_LAUNCH;
00018c  6901              LDR      r1,[r0,#0x10]
00018e  2201              MOVS     r2,#1
000190  0352              LSLS     r2,r2,#13
000192  4311              ORRS     r1,r1,r2
000194  6101              STR      r1,[r0,#0x10]
;;;516    }
000196  4770              BX       lr
;;;517    
                          ENDP

                  FLASH_OB_GetRDP PROC
;;;983      */
;;;984    FlagStatus FLASH_OB_GetRDP(void)
000198  4998              LDR      r1,|L1.1020|
;;;985    {
;;;986      FlagStatus readstatus = RESET;
00019a  2000              MOVS     r0,#0
;;;987      
;;;988      if ((uint8_t)(FLASH->OBR & (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2)) != RESET)
00019c  69c9              LDR      r1,[r1,#0x1c]
00019e  0749              LSLS     r1,r1,#29
0001a0  0f89              LSRS     r1,r1,#30
0001a2  d000              BEQ      |L1.422|
;;;989      {
;;;990        readstatus = SET;
0001a4  2001              MOVS     r0,#1
                  |L1.422|
;;;991      }
;;;992      else
;;;993      {
;;;994        readstatus = RESET;
;;;995      }
;;;996      return readstatus;
;;;997    }
0001a6  4770              BX       lr
;;;998    
                          ENDP

                  FLASH_OB_Erase PROC
;;;528      */
;;;529    FLASH_Status FLASH_OB_Erase(void)
0001a8  b5f0              PUSH     {r4-r7,lr}
;;;530    {
;;;531      uint16_t rdptmp = OB_RDP_Level_0;
0001aa  24aa              MOVS     r4,#0xaa
;;;532    
;;;533      FLASH_Status status = FLASH_COMPLETE;
;;;534    
;;;535      /* Get the actual read protection Option Byte value */ 
;;;536      if(FLASH_OB_GetRDP() != RESET)
0001ac  f7fffffe          BL       FLASH_OB_GetRDP
0001b0  2800              CMP      r0,#0
0001b2  d000              BEQ      |L1.438|
;;;537      {
;;;538        rdptmp = 0x00;  
0001b4  2400              MOVS     r4,#0
                  |L1.438|
;;;539      }
;;;540    
;;;541      /* Wait for last operation to be completed */
;;;542      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
0001b6  270b              MOVS     r7,#0xb
0001b8  043f              LSLS     r7,r7,#16
0001ba  4638              MOV      r0,r7
0001bc  f7fffffe          BL       FLASH_WaitForLastOperation
;;;543    
;;;544      if(status == FLASH_COMPLETE)
0001c0  2804              CMP      r0,#4
0001c2  d113              BNE      |L1.492|
;;;545      {   
;;;546        /* If the previous operation is completed, proceed to erase the option bytes */
;;;547        FLASH->CR |= FLASH_CR_OPTER;
0001c4  4d8d              LDR      r5,|L1.1020|
0001c6  6928              LDR      r0,[r5,#0x10]
0001c8  2620              MOVS     r6,#0x20
0001ca  4330              ORRS     r0,r0,r6
0001cc  6128              STR      r0,[r5,#0x10]
;;;548        FLASH->CR |= FLASH_CR_STRT;
0001ce  6928              LDR      r0,[r5,#0x10]
0001d0  2140              MOVS     r1,#0x40
0001d2  4308              ORRS     r0,r0,r1
0001d4  6128              STR      r0,[r5,#0x10]
;;;549    
;;;550        /* Wait for last operation to be completed */
;;;551        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
0001d6  4638              MOV      r0,r7
0001d8  f7fffffe          BL       FLASH_WaitForLastOperation
;;;552        
;;;553        if(status == FLASH_COMPLETE)
;;;554        {
;;;555          /* If the erase operation is completed, disable the OPTER Bit */
;;;556          FLASH->CR &= ~FLASH_CR_OPTER;
;;;557           
;;;558          /* Enable the Option Bytes Programming operation */
;;;559          FLASH->CR |= FLASH_CR_OPTPG;
0001dc  2110              MOVS     r1,#0x10
0001de  2804              CMP      r0,#4                 ;553
0001e0  d005              BEQ      |L1.494|
;;;560    
;;;561          /* Restore the last read protection Option Byte value */
;;;562          OB->RDP = (uint16_t)rdptmp; 
;;;563    
;;;564          /* Wait for last operation to be completed */
;;;565          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
;;;566     
;;;567          if(status != FLASH_TIMEOUT)
;;;568          {
;;;569            /* if the program operation is completed, disable the OPTPG Bit */
;;;570            FLASH->CR &= ~FLASH_CR_OPTPG;
;;;571          }
;;;572        }
;;;573        else
;;;574        {
;;;575          if (status != FLASH_TIMEOUT)
0001e2  2805              CMP      r0,#5
0001e4  d002              BEQ      |L1.492|
;;;576          {
;;;577            /* Disable the OPTPG Bit */
;;;578            FLASH->CR &= ~FLASH_CR_OPTPG;
0001e6  692a              LDR      r2,[r5,#0x10]
0001e8  438a              BICS     r2,r2,r1
0001ea  612a              STR      r2,[r5,#0x10]
                  |L1.492|
;;;579          }
;;;580        }  
;;;581      }
;;;582      /* Return the erase status */
;;;583      return status;
;;;584    }
0001ec  bdf0              POP      {r4-r7,pc}
                  |L1.494|
0001ee  6928              LDR      r0,[r5,#0x10]         ;556
0001f0  43b0              BICS     r0,r0,r6              ;556
0001f2  6128              STR      r0,[r5,#0x10]         ;556
0001f4  6928              LDR      r0,[r5,#0x10]         ;559
0001f6  460e              MOV      r6,r1                 ;559
0001f8  4330              ORRS     r0,r0,r6              ;559
0001fa  6128              STR      r0,[r5,#0x10]         ;559
0001fc  4882              LDR      r0,|L1.1032|
0001fe  8004              STRH     r4,[r0,#0]            ;562
000200  4638              MOV      r0,r7                 ;565
000202  f7fffffe          BL       FLASH_WaitForLastOperation
000206  2805              CMP      r0,#5                 ;567
000208  d0f0              BEQ      |L1.492|
00020a  6929              LDR      r1,[r5,#0x10]         ;570
00020c  43b1              BICS     r1,r1,r6              ;570
00020e  6129              STR      r1,[r5,#0x10]         ;570
000210  bdf0              POP      {r4-r7,pc}
;;;585    
                          ENDP

                  FLASH_OB_EnableWRP PROC
;;;598      */
;;;599    FLASH_Status FLASH_OB_EnableWRP(uint32_t OB_WRP)
000212  b5f0              PUSH     {r4-r7,lr}
;;;600    {
;;;601      uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF;
;;;602    
;;;603      FLASH_Status status = FLASH_COMPLETE;
;;;604    
;;;605      /* Check the parameters */
;;;606      assert_param(IS_OB_WRP(OB_WRP));
;;;607    
;;;608      OB_WRP = (uint32_t)(~OB_WRP);
000214  43c0              MVNS     r0,r0
;;;609      WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
000216  b2c5              UXTB     r5,r0
;;;610      WRP1_Data = (uint16_t)((OB_WRP & OB_WRP0_nWRP0) >> 8);
000218  0400              LSLS     r0,r0,#16
00021a  0e04              LSRS     r4,r0,#24
;;;611    
;;;612      /* Wait for last operation to be completed */
;;;613      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00021c  200b              MOVS     r0,#0xb
00021e  0400              LSLS     r0,r0,#16
000220  f7fffffe          BL       FLASH_WaitForLastOperation
;;;614    
;;;615      if(status == FLASH_COMPLETE)
000224  2804              CMP      r0,#4
000226  d11b              BNE      |L1.608|
;;;616      {
;;;617        FLASH->CR |= FLASH_CR_OPTPG;
000228  4e74              LDR      r6,|L1.1020|
00022a  6931              LDR      r1,[r6,#0x10]
00022c  2210              MOVS     r2,#0x10
00022e  4311              ORRS     r1,r1,r2
000230  6131              STR      r1,[r6,#0x10]
;;;618    
;;;619        if(WRP0_Data != 0xFF)
;;;620        {
;;;621          OB->WRP0 = WRP0_Data;
000232  4f75              LDR      r7,|L1.1032|
000234  2dff              CMP      r5,#0xff              ;619
000236  d006              BEQ      |L1.582|
000238  813d              STRH     r5,[r7,#8]
;;;622          
;;;623          /* Wait for last operation to be completed */
;;;624          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00023a  200b              MOVS     r0,#0xb
00023c  0400              LSLS     r0,r0,#16
00023e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;625        }
;;;626        if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
000242  2804              CMP      r0,#4
000244  d106              BNE      |L1.596|
                  |L1.582|
000246  2cff              CMP      r4,#0xff
000248  d006              BEQ      |L1.600|
;;;627        {
;;;628          OB->WRP1 = WRP1_Data;
00024a  817c              STRH     r4,[r7,#0xa]
;;;629          
;;;630          /* Wait for last operation to be completed */
;;;631          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00024c  200b              MOVS     r0,#0xb
00024e  0400              LSLS     r0,r0,#16
000250  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L1.596|
;;;632        }
;;;633              
;;;634        if(status != FLASH_TIMEOUT)
000254  2805              CMP      r0,#5
000256  d003              BEQ      |L1.608|
                  |L1.600|
;;;635        {
;;;636          /* if the program operation is completed, disable the OPTPG Bit */
;;;637          FLASH->CR &= ~FLASH_CR_OPTPG;
000258  6931              LDR      r1,[r6,#0x10]
00025a  2210              MOVS     r2,#0x10
00025c  4391              BICS     r1,r1,r2
00025e  6131              STR      r1,[r6,#0x10]
                  |L1.608|
;;;638        }
;;;639      } 
;;;640      /* Return the write protection operation Status */
;;;641      return status;
;;;642    }
000260  bdf0              POP      {r4-r7,pc}
;;;643    
                          ENDP

                  FLASH_OB_RDPConfig PROC
;;;657      */
;;;658    FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP)
000262  b5f0              PUSH     {r4-r7,lr}
;;;659    {
;;;660      FLASH_Status status = FLASH_COMPLETE;
;;;661      
;;;662      /* Check the parameters */
;;;663      assert_param(IS_OB_RDP(OB_RDP));
;;;664      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000264  270b              MOVS     r7,#0xb
000266  4606              MOV      r6,r0                 ;659
000268  043f              LSLS     r7,r7,#16
00026a  4638              MOV      r0,r7
00026c  f7fffffe          BL       FLASH_WaitForLastOperation
;;;665      
;;;666      if(status == FLASH_COMPLETE)
000270  2804              CMP      r0,#4
000272  d11e              BNE      |L1.690|
;;;667      {
;;;668        FLASH->CR |= FLASH_CR_OPTER;
000274  4c61              LDR      r4,|L1.1020|
000276  6920              LDR      r0,[r4,#0x10]
000278  2520              MOVS     r5,#0x20
00027a  4328              ORRS     r0,r0,r5
00027c  6120              STR      r0,[r4,#0x10]
;;;669        FLASH->CR |= FLASH_CR_STRT;
00027e  6920              LDR      r0,[r4,#0x10]
000280  2140              MOVS     r1,#0x40
000282  4308              ORRS     r0,r0,r1
000284  6120              STR      r0,[r4,#0x10]
;;;670        
;;;671        /* Wait for last operation to be completed */
;;;672        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000286  4638              MOV      r0,r7
000288  f7fffffe          BL       FLASH_WaitForLastOperation
;;;673        
;;;674        if(status == FLASH_COMPLETE)
00028c  2804              CMP      r0,#4
00028e  d10b              BNE      |L1.680|
;;;675        {
;;;676          /* If the erase operation is completed, disable the OPTER Bit */
;;;677          FLASH->CR &= ~FLASH_CR_OPTER;
000290  6920              LDR      r0,[r4,#0x10]
000292  43a8              BICS     r0,r0,r5
000294  6120              STR      r0,[r4,#0x10]
;;;678          
;;;679          /* Enable the Option Bytes Programming operation */
;;;680          FLASH->CR |= FLASH_CR_OPTPG;
000296  6920              LDR      r0,[r4,#0x10]
000298  2510              MOVS     r5,#0x10
00029a  4328              ORRS     r0,r0,r5
00029c  6120              STR      r0,[r4,#0x10]
;;;681           
;;;682          OB->RDP = OB_RDP;
00029e  485a              LDR      r0,|L1.1032|
0002a0  8006              STRH     r6,[r0,#0]
;;;683    
;;;684          /* Wait for last operation to be completed */
;;;685          status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
0002a2  4638              MOV      r0,r7
0002a4  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L1.680|
;;;686        
;;;687          if(status != FLASH_TIMEOUT)
;;;688          {
;;;689            /* if the program operation is completed, disable the OPTPG Bit */
;;;690            FLASH->CR &= ~FLASH_CR_OPTPG;
;;;691          }
;;;692        }
;;;693        else 
;;;694        {
;;;695          if(status != FLASH_TIMEOUT)
0002a8  2805              CMP      r0,#5
0002aa  d002              BEQ      |L1.690|
0002ac  6921              LDR      r1,[r4,#0x10]         ;690
0002ae  43a9              BICS     r1,r1,r5              ;690
0002b0  6121              STR      r1,[r4,#0x10]         ;690
                  |L1.690|
;;;696          {
;;;697            /* Disable the OPTER Bit */
;;;698            FLASH->CR &= ~FLASH_CR_OPTER;
;;;699          }
;;;700        }
;;;701      }
;;;702      /* Return the protection operation Status */
;;;703      return status;
;;;704    }
0002b2  bdf0              POP      {r4-r7,pc}
;;;705    
                          ENDP

                  FLASH_OB_UserConfig PROC
;;;726      */
;;;727    FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
0002b4  b5f0              PUSH     {r4-r7,lr}
;;;728    {
0002b6  4606              MOV      r6,r0
;;;729      FLASH_Status status = FLASH_COMPLETE; 
;;;730    
;;;731      /* Check the parameters */
;;;732      assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
;;;733      assert_param(IS_OB_STOP_SOURCE(OB_STOP));
;;;734      assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
;;;735    
;;;736      /* Wait for last operation to be completed */
;;;737      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
0002b8  200b              MOVS     r0,#0xb
0002ba  4694              MOV      r12,r2                ;728
0002bc  460f              MOV      r7,r1                 ;728
0002be  0400              LSLS     r0,r0,#16
0002c0  f7fffffe          BL       FLASH_WaitForLastOperation
;;;738      
;;;739      if(status == FLASH_COMPLETE)
0002c4  2804              CMP      r0,#4
0002c6  d114              BNE      |L1.754|
;;;740      {
;;;741        /* Enable the Option Bytes Programming operation */
;;;742        FLASH->CR |= FLASH_CR_OPTPG; 
0002c8  4c4c              LDR      r4,|L1.1020|
0002ca  6920              LDR      r0,[r4,#0x10]
0002cc  2510              MOVS     r5,#0x10
0002ce  4328              ORRS     r0,r0,r5
0002d0  6120              STR      r0,[r4,#0x10]
;;;743    
;;;744        OB->USER = (uint16_t)((uint16_t)(OB_IWDG | OB_STOP) | (uint16_t)(OB_STDBY | 0xF8));
0002d2  433e              ORRS     r6,r6,r7
0002d4  4660              MOV      r0,r12
0002d6  4306              ORRS     r6,r6,r0
0002d8  20f8              MOVS     r0,#0xf8
0002da  4306              ORRS     r6,r6,r0
0002dc  484a              LDR      r0,|L1.1032|
0002de  8046              STRH     r6,[r0,#2]
;;;745      
;;;746        /* Wait for last operation to be completed */
;;;747        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
0002e0  200b              MOVS     r0,#0xb
0002e2  0400              LSLS     r0,r0,#16
0002e4  f7fffffe          BL       FLASH_WaitForLastOperation
;;;748    
;;;749        if(status != FLASH_TIMEOUT)
0002e8  2805              CMP      r0,#5
0002ea  d002              BEQ      |L1.754|
;;;750        {
;;;751          /* If the program operation is completed, disable the OPTPG Bit */
;;;752          FLASH->CR &= ~FLASH_CR_OPTPG;
0002ec  6921              LDR      r1,[r4,#0x10]
0002ee  43a9              BICS     r1,r1,r5
0002f0  6121              STR      r1,[r4,#0x10]
                  |L1.754|
;;;753        }
;;;754      }    
;;;755      /* Return the Option Byte program Status */
;;;756      return status;
;;;757    }
0002f2  bdf0              POP      {r4-r7,pc}
;;;758    
                          ENDP

                  FLASH_OB_BOOTConfig PROC
;;;766      */
;;;767    FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1)
0002f4  b5f0              PUSH     {r4-r7,lr}
;;;768    {
;;;769      FLASH_Status status = FLASH_COMPLETE; 
;;;770    
;;;771      /* Check the parameters */
;;;772      assert_param(IS_OB_BOOT1(OB_BOOT1));
;;;773    
;;;774      /* Wait for last operation to be completed */
;;;775      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
0002f6  270b              MOVS     r7,#0xb
0002f8  4606              MOV      r6,r0                 ;768
0002fa  043f              LSLS     r7,r7,#16
0002fc  4638              MOV      r0,r7
0002fe  f7fffffe          BL       FLASH_WaitForLastOperation
;;;776      
;;;777      if(status == FLASH_COMPLETE)
000302  2804              CMP      r0,#4
000304  d110              BNE      |L1.808|
;;;778      {  
;;;779        /* Enable the Option Bytes Programming operation */
;;;780        FLASH->CR |= FLASH_CR_OPTPG;
000306  4c3d              LDR      r4,|L1.1020|
000308  6920              LDR      r0,[r4,#0x10]
00030a  2510              MOVS     r5,#0x10
00030c  4328              ORRS     r0,r0,r5
00030e  6120              STR      r0,[r4,#0x10]
;;;781    
;;;782        OB->USER = OB_BOOT1 | 0xEF;
000310  20ef              MOVS     r0,#0xef
000312  4306              ORRS     r6,r6,r0
000314  483c              LDR      r0,|L1.1032|
000316  8046              STRH     r6,[r0,#2]
;;;783      
;;;784        /* Wait for last operation to be completed */
;;;785        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000318  4638              MOV      r0,r7
00031a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;786    
;;;787        if(status != FLASH_TIMEOUT)
00031e  2805              CMP      r0,#5
000320  d002              BEQ      |L1.808|
;;;788        {
;;;789          /* If the program operation is completed, disable the OPTPG Bit */
;;;790          FLASH->CR &= ~FLASH_CR_OPTPG;
000322  6921              LDR      r1,[r4,#0x10]
000324  43a9              BICS     r1,r1,r5
000326  6121              STR      r1,[r4,#0x10]
                  |L1.808|
;;;791        }
;;;792      }
;;;793      /* Return the Option Byte program Status */
;;;794      return status;
;;;795    }
000328  bdf0              POP      {r4-r7,pc}
;;;796    
                          ENDP

                  FLASH_OB_VDDAConfig PROC
;;;804      */
;;;805    FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG)
00032a  b5f0              PUSH     {r4-r7,lr}
;;;806    {
;;;807      FLASH_Status status = FLASH_COMPLETE; 
;;;808    
;;;809      /* Check the parameters */
;;;810      assert_param(IS_OB_VDDA_ANALOG(OB_VDDA_ANALOG));
;;;811    
;;;812      /* Wait for last operation to be completed */
;;;813      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00032c  270b              MOVS     r7,#0xb
00032e  4606              MOV      r6,r0                 ;806
000330  043f              LSLS     r7,r7,#16
000332  4638              MOV      r0,r7
000334  f7fffffe          BL       FLASH_WaitForLastOperation
;;;814      
;;;815      if(status == FLASH_COMPLETE)
000338  2804              CMP      r0,#4
00033a  d110              BNE      |L1.862|
;;;816      {  
;;;817        /* Enable the Option Bytes Programming operation */
;;;818        FLASH->CR |= FLASH_CR_OPTPG; 
00033c  4c2f              LDR      r4,|L1.1020|
00033e  6920              LDR      r0,[r4,#0x10]
000340  2510              MOVS     r5,#0x10
000342  4328              ORRS     r0,r0,r5
000344  6120              STR      r0,[r4,#0x10]
;;;819    
;;;820        OB->USER = OB_VDDA_ANALOG | 0xDF;
000346  20df              MOVS     r0,#0xdf
000348  4306              ORRS     r6,r6,r0
00034a  482f              LDR      r0,|L1.1032|
00034c  8046              STRH     r6,[r0,#2]
;;;821      
;;;822        /* Wait for last operation to be completed */
;;;823        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
00034e  4638              MOV      r0,r7
000350  f7fffffe          BL       FLASH_WaitForLastOperation
;;;824    
;;;825        if(status != FLASH_TIMEOUT)
000354  2805              CMP      r0,#5
000356  d002              BEQ      |L1.862|
;;;826        {
;;;827          /* if the program operation is completed, disable the OPTPG Bit */
;;;828          FLASH->CR &= ~FLASH_CR_OPTPG;
000358  6921              LDR      r1,[r4,#0x10]
00035a  43a9              BICS     r1,r1,r5
00035c  6121              STR      r1,[r4,#0x10]
                  |L1.862|
;;;829        }
;;;830      }
;;;831      /* Return the Option Byte program Status */
;;;832      return status;
;;;833    }
00035e  bdf0              POP      {r4-r7,pc}
;;;834    
                          ENDP

                  FLASH_OB_SRAMParityConfig PROC
;;;842      */
;;;843    FLASH_Status FLASH_OB_SRAMParityConfig(uint8_t OB_SRAM_Parity)
000360  b5f0              PUSH     {r4-r7,lr}
;;;844    {
;;;845      FLASH_Status status = FLASH_COMPLETE; 
;;;846    
;;;847      /* Check the parameters */
;;;848      assert_param(IS_OB_SRAM_PARITY(OB_SRAM_Parity));
;;;849    
;;;850      /* Wait for last operation to be completed */
;;;851      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000362  270b              MOVS     r7,#0xb
000364  4606              MOV      r6,r0                 ;844
000366  043f              LSLS     r7,r7,#16
000368  4638              MOV      r0,r7
00036a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;852      
;;;853      if(status == FLASH_COMPLETE)
00036e  2804              CMP      r0,#4
000370  d110              BNE      |L1.916|
;;;854      {  
;;;855        /* Enable the Option Bytes Programming operation */
;;;856        FLASH->CR |= FLASH_CR_OPTPG; 
000372  4c22              LDR      r4,|L1.1020|
000374  6920              LDR      r0,[r4,#0x10]
000376  2510              MOVS     r5,#0x10
000378  4328              ORRS     r0,r0,r5
00037a  6120              STR      r0,[r4,#0x10]
;;;857    
;;;858        OB->USER = OB_SRAM_Parity | 0xBF;
00037c  20bf              MOVS     r0,#0xbf
00037e  4306              ORRS     r6,r6,r0
000380  4821              LDR      r0,|L1.1032|
000382  8046              STRH     r6,[r0,#2]
;;;859      
;;;860        /* Wait for last operation to be completed */
;;;861        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000384  4638              MOV      r0,r7
000386  f7fffffe          BL       FLASH_WaitForLastOperation
;;;862    
;;;863        if(status != FLASH_TIMEOUT)
00038a  2805              CMP      r0,#5
00038c  d002              BEQ      |L1.916|
;;;864        {
;;;865          /* if the program operation is completed, disable the OPTPG Bit */
;;;866          FLASH->CR &= ~FLASH_CR_OPTPG;
00038e  6921              LDR      r1,[r4,#0x10]
000390  43a9              BICS     r1,r1,r5
000392  6121              STR      r1,[r4,#0x10]
                  |L1.916|
;;;867        }
;;;868      }
;;;869      /* Return the Option Byte program Status */
;;;870      return status;
;;;871    }
000394  bdf0              POP      {r4-r7,pc}
;;;872    
                          ENDP

                  FLASH_OB_WriteUser PROC
;;;890      */
;;;891    FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
000396  b5f0              PUSH     {r4-r7,lr}
;;;892    {
;;;893      FLASH_Status status = FLASH_COMPLETE; 
;;;894    
;;;895      /* Wait for last operation to be completed */
;;;896      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
000398  270b              MOVS     r7,#0xb
00039a  4606              MOV      r6,r0                 ;892
00039c  043f              LSLS     r7,r7,#16
00039e  4638              MOV      r0,r7
0003a0  f7fffffe          BL       FLASH_WaitForLastOperation
;;;897      
;;;898      if(status == FLASH_COMPLETE)
0003a4  2804              CMP      r0,#4
0003a6  d110              BNE      |L1.970|
;;;899      {
;;;900        /* Enable the Option Bytes Programming operation */
;;;901        FLASH->CR |= FLASH_CR_OPTPG; 
0003a8  4c14              LDR      r4,|L1.1020|
0003aa  6920              LDR      r0,[r4,#0x10]
0003ac  2510              MOVS     r5,#0x10
0003ae  4328              ORRS     r0,r0,r5
0003b0  6120              STR      r0,[r4,#0x10]
;;;902    
;;;903        OB->USER = OB_USER | 0x88;
0003b2  2088              MOVS     r0,#0x88
0003b4  4306              ORRS     r6,r6,r0
0003b6  4814              LDR      r0,|L1.1032|
0003b8  8046              STRH     r6,[r0,#2]
;;;904      
;;;905        /* Wait for last operation to be completed */
;;;906        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
0003ba  4638              MOV      r0,r7
0003bc  f7fffffe          BL       FLASH_WaitForLastOperation
;;;907    
;;;908        if(status != FLASH_TIMEOUT)
0003c0  2805              CMP      r0,#5
0003c2  d002              BEQ      |L1.970|
;;;909        {
;;;910          /* If the program operation is completed, disable the OPTPG Bit */
;;;911          FLASH->CR &= ~FLASH_CR_OPTPG;
0003c4  6921              LDR      r1,[r4,#0x10]
0003c6  43a9              BICS     r1,r1,r5
0003c8  6121              STR      r1,[r4,#0x10]
                  |L1.970|
;;;912        }
;;;913      }    
;;;914      /* Return the Option Byte program Status */
;;;915      return status;
;;;916    
;;;917    }
0003ca  bdf0              POP      {r4-r7,pc}
;;;918    
                          ENDP

                  FLASH_ProgramOptionByteData PROC
;;;930      */
;;;931    FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
0003cc  b5f0              PUSH     {r4-r7,lr}
;;;932    {
0003ce  4607              MOV      r7,r0
;;;933      FLASH_Status status = FLASH_COMPLETE;
;;;934      /* Check the parameters */
;;;935      assert_param(IS_OB_DATA_ADDRESS(Address));
;;;936      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
0003d0  200b              MOVS     r0,#0xb
0003d2  460e              MOV      r6,r1                 ;932
0003d4  0400              LSLS     r0,r0,#16
0003d6  f7fffffe          BL       FLASH_WaitForLastOperation
;;;937    
;;;938      if(status == FLASH_COMPLETE)
0003da  2804              CMP      r0,#4
0003dc  d117              BNE      |L1.1038|
;;;939      {
;;;940        /* Enables the Option Bytes Programming operation */
;;;941        FLASH->CR |= FLASH_CR_OPTPG; 
0003de  4c07              LDR      r4,|L1.1020|
0003e0  6920              LDR      r0,[r4,#0x10]
0003e2  2510              MOVS     r5,#0x10
0003e4  4328              ORRS     r0,r0,r5
0003e6  6120              STR      r0,[r4,#0x10]
;;;942        *(__IO uint16_t*)Address = Data;
0003e8  803e              STRH     r6,[r7,#0]
;;;943        
;;;944        /* Wait for last operation to be completed */
;;;945        status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
0003ea  200b              MOVS     r0,#0xb
0003ec  0400              LSLS     r0,r0,#16
0003ee  f7fffffe          BL       FLASH_WaitForLastOperation
;;;946        
;;;947        if(status != FLASH_TIMEOUT)
0003f2  2805              CMP      r0,#5
0003f4  d00b              BEQ      |L1.1038|
;;;948        {
;;;949          /* If the program operation is completed, disable the OPTPG Bit */
;;;950          FLASH->CR &= ~FLASH_CR_OPTPG;
0003f6  6921              LDR      r1,[r4,#0x10]
0003f8  43a9              BICS     r1,r1,r5
0003fa  e007              B        |L1.1036|
                  |L1.1020|
                          DCD      0x40022000
                  |L1.1024|
                          DCD      0x45670123
                  |L1.1028|
                          DCD      0xcdef89ab
                  |L1.1032|
                          DCD      0x1ffff800
                  |L1.1036|
00040c  6121              STR      r1,[r4,#0x10]
                  |L1.1038|
;;;951        }
;;;952      }
;;;953      /* Return the Option Byte Data Program Status */
;;;954      return status;
;;;955    }
00040e  bdf0              POP      {r4-r7,pc}
;;;956    
                          ENDP

                  FLASH_OB_GetUser PROC
;;;961      */
;;;962    uint8_t FLASH_OB_GetUser(void)
000410  480d              LDR      r0,|L1.1096|
;;;963    {
;;;964      /* Return the User Option Byte */
;;;965      return (uint8_t)(FLASH->OBR >> 8);
000412  69c0              LDR      r0,[r0,#0x1c]
000414  0400              LSLS     r0,r0,#16
000416  0e00              LSRS     r0,r0,#24
;;;966    }
000418  4770              BX       lr
;;;967    
                          ENDP

                  FLASH_OB_GetWRP PROC
;;;972      */
;;;973    uint32_t FLASH_OB_GetWRP(void)
00041a  480b              LDR      r0,|L1.1096|
;;;974    {
;;;975      /* Return the FLASH write protection Register value */
;;;976      return (uint32_t)(FLASH->WRPR);
00041c  6a00              LDR      r0,[r0,#0x20]
;;;977    }
00041e  4770              BX       lr
;;;978    
                          ENDP

                  FLASH_ITConfig PROC
;;;1023     */
;;;1024   void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
000420  4a09              LDR      r2,|L1.1096|
;;;1025   {
;;;1026     /* Check the parameters */
;;;1027     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1028     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1029     
;;;1030     if(NewState != DISABLE)
000422  2900              CMP      r1,#0
;;;1031     {
;;;1032       /* Enable the interrupt sources */
;;;1033       FLASH->CR |= FLASH_IT;
;;;1034     }
;;;1035     else
;;;1036     {
;;;1037       /* Disable the interrupt sources */
;;;1038       FLASH->CR &= ~(uint32_t)FLASH_IT;
000424  6911              LDR      r1,[r2,#0x10]
000426  d001              BEQ      |L1.1068|
000428  4301              ORRS     r1,r1,r0              ;1033
00042a  e000              B        |L1.1070|
                  |L1.1068|
00042c  4381              BICS     r1,r1,r0
                  |L1.1070|
00042e  6111              STR      r1,[r2,#0x10]         ;1033
;;;1039     }
;;;1040   }
000430  4770              BX       lr
;;;1041   
                          ENDP

                  FLASH_GetFlagStatus PROC
;;;1051     */
;;;1052   FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
000432  4a05              LDR      r2,|L1.1096|
;;;1053   {
000434  4601              MOV      r1,r0
;;;1054     FlagStatus bitstatus = RESET;
;;;1055   
;;;1056     /* Check the parameters */
;;;1057     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
;;;1058   
;;;1059     if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
000436  68d2              LDR      r2,[r2,#0xc]
000438  2000              MOVS     r0,#0                 ;1054
00043a  420a              TST      r2,r1
00043c  d000              BEQ      |L1.1088|
;;;1060     {
;;;1061       bitstatus = SET;
00043e  2001              MOVS     r0,#1
                  |L1.1088|
;;;1062     }
;;;1063     else
;;;1064     {
;;;1065       bitstatus = RESET;
;;;1066     }
;;;1067     /* Return the new state of FLASH_FLAG (SET or RESET) */
;;;1068     return bitstatus; 
;;;1069   }
000440  4770              BX       lr
;;;1070   
                          ENDP

                  FLASH_ClearFlag PROC
;;;1079     */
;;;1080   void FLASH_ClearFlag(uint32_t FLASH_FLAG)
000442  4901              LDR      r1,|L1.1096|
;;;1081   {
;;;1082     /* Check the parameters */
;;;1083     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
;;;1084     
;;;1085     /* Clear the flags */
;;;1086     FLASH->SR = FLASH_FLAG;
000444  60c8              STR      r0,[r1,#0xc]
;;;1087   }
000446  4770              BX       lr
;;;1088   
                          ENDP

                  |L1.1096|
                          DCD      0x40022000

;*** Start embedded assembler ***

#line 1 "..\\arch\\arm\\stm32f05x\\lib\\src\\stm32f0xx_flash.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___17_stm32f0xx_flash_c_a2a150d6____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_stm32f0xx_flash_c_a2a150d6____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___17_stm32f0xx_flash_c_a2a150d6____REVSH|
#line 144
|__asm___17_stm32f0xx_flash_c_a2a150d6____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
