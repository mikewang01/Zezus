; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\hal_timer.o --asm_dir=.\ --list_dir=.\ --depend=.\hal_timer.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\hal_timer.crf ..\kernel\timer\hal_timer.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  add_timer_struct PROC
;;;54     
;;;55     u8 add_timer_struct(u8 task_id, u8 timer_types , TIMER_EVENT event , u32 interval, void (*triger_callback)(void))
000000  b5ff              PUSH     {r0-r7,lr}
;;;56     {
000002  b081              SUB      sp,sp,#4
000004  461e              MOV      r6,r3
000006  4615              MOV      r5,r2
000008  460f              MOV      r7,r1
;;;57         
;;;58         stimer *p_stimer=(stimer*)osmalloc(sizeof(stimer));
00000a  2018              MOVS     r0,#0x18
00000c  f7fffffe          BL       osmalloc
000010  0004              MOVS     r4,r0
;;;59         if(p_stimer==NULL)
000012  d01a              BEQ      |L1.74|
;;;60         {
;;;61             goto fault;
;;;62         }
;;;63         p_stimer->task_id=task_id;
000014  9801              LDR      r0,[sp,#4]
000016  7060              STRB     r0,[r4,#1]
;;;64         p_stimer->type=timer_types; 
000018  7027              STRB     r7,[r4,#0]
;;;65         p_stimer->event=event; 
00001a  70a5              STRB     r5,[r4,#2]
;;;66         p_stimer->triger_callback=triger_callback;
00001c  980a              LDR      r0,[sp,#0x28]
;;;67         
;;;68         p_stimer->interval=interval;
;;;69         p_stimer->start_time=OS_get_tick();
00001e  60e6              STR      r6,[r4,#0xc]
000020  6120              STR      r0,[r4,#0x10]
000022  f7fffffe          BL       OS_get_tick
;;;70         p_stimer->destination_time=p_stimer->start_time+ p_stimer->interval;
000026  6060              STR      r0,[r4,#4]
000028  68e1              LDR      r1,[r4,#0xc]
00002a  1840              ADDS     r0,r0,r1
;;;71         p_stimer->next=NULL;
00002c  60a0              STR      r0,[r4,#8]
00002e  2000              MOVS     r0,#0
;;;72         
;;;73         if(p_stimer==NULL)
;;;74         {
;;;75             goto fault;
;;;76         }
;;;77         
;;;78         if(delay_header==NULL)
000030  495c              LDR      r1,|L1.420|
000032  6160              STR      r0,[r4,#0x14]
000034  6808              LDR      r0,[r1,#0]  ; delay_header
000036  2800              CMP      r0,#0
000038  d102              BNE      |L1.64|
;;;79         {
;;;80             delay_header=p_stimer;
00003a  600c              STR      r4,[r1,#0]  ; delay_header
00003c  e004              B        |L1.72|
                  |L1.62|
00003e  4608              MOV      r0,r1
                  |L1.64|
;;;81         }
;;;82         else
;;;83         {
;;;84             stimer *stimer_i=delay_header;
;;;85             while(stimer_i->next!=NULL)
000040  6941              LDR      r1,[r0,#0x14]
000042  2900              CMP      r1,#0
000044  d1fb              BNE      |L1.62|
;;;86             {
;;;87                 stimer_i=stimer_i->next;
;;;88             }
;;;89             stimer_i->next=p_stimer;
000046  6144              STR      r4,[r0,#0x14]
                  |L1.72|
;;;90         }
;;;91         
;;;92         return SUCCESS;
000048  2001              MOVS     r0,#1
                  |L1.74|
;;;93     fault:
;;;94         return ERROR;
;;;95     }
00004a  b005              ADD      sp,sp,#0x14
00004c  bdf0              POP      {r4-r7,pc}
;;;96     
                          ENDP

                  del_struct PROC
;;;106    
;;;107    u8 del_struct(stimer *stimer_prev , stimer *stimer_i)
00004e  b510              PUSH     {r4,lr}
;;;108    {
;;;109        if(stimer_i==NULL)//this means ,only one timer attached to delay_header
;;;110        {
;;;111            delay_header=NULL;
000050  4a54              LDR      r2,|L1.420|
000052  2900              CMP      r1,#0                 ;109
000054  d007              BEQ      |L1.102|
;;;112            return osfree(stimer_i);
;;;113        }
;;;114        
;;;115        if(stimer_prev==NULL)
000056  2800              CMP      r0,#0
000058  d008              BEQ      |L1.108|
;;;116        {
;;;117            delay_header=stimer_i->next;
;;;118        }else
;;;119        {
;;;120            stimer_prev->next=stimer_i->next;
00005a  694a              LDR      r2,[r1,#0x14]
00005c  6142              STR      r2,[r0,#0x14]
                  |L1.94|
;;;121        }
;;;122        return osfree(stimer_i);
00005e  4608              MOV      r0,r1
                  |L1.96|
000060  f7fffffe          BL       osfree
;;;123        
;;;124    }
000064  bd10              POP      {r4,pc}
                  |L1.102|
000066  2000              MOVS     r0,#0                 ;111
000068  6010              STR      r0,[r2,#0]            ;112  ; delay_header
00006a  e7f9              B        |L1.96|
                  |L1.108|
00006c  6948              LDR      r0,[r1,#0x14]         ;117
00006e  6010              STR      r0,[r2,#0]            ;117  ; delay_header
000070  e7f5              B        |L1.94|
;;;125    /*********************************************************************
                          ENDP

                  del_timer_struct PROC
;;;133     */
;;;134    u8 del_timer_struct(u8 task_id,TIMER_EVENT event)
000072  460b              MOV      r3,r1
;;;135    {
000074  b430              PUSH     {r4,r5}
;;;136        stimer *stimer_i=NULL;
;;;137        stimer *stimer_prev=NULL;
;;;138        if(delay_header==NULL)
000076  494b              LDR      r1,|L1.420|
000078  4602              MOV      r2,r0                 ;135
00007a  6809              LDR      r1,[r1,#0]  ; delay_header
00007c  2000              MOVS     r0,#0                 ;137
00007e  2900              CMP      r1,#0
000080  d00b              BEQ      |L1.154|
                  |L1.130|
;;;139        {
;;;140            goto fault;
;;;141        }
;;;142        stimer_i=delay_header;
;;;143        while(stimer_i!=NULL)
;;;144        {
;;;145            if(stimer_i->task_id==task_id)
000082  784c              LDRB     r4,[r1,#1]
000084  4294              CMP      r4,r2
000086  d104              BNE      |L1.146|
;;;146            {
;;;147                if(stimer_i->event==event)
000088  788c              LDRB     r4,[r1,#2]
00008a  429c              CMP      r4,r3
00008c  d101              BNE      |L1.146|
;;;148                {
;;;149                    return del_struct(stimer_prev , stimer_i);
00008e  bc30              POP      {r4,r5}
000090  e7fe              B        del_struct
                  |L1.146|
;;;150                    
;;;151                }
;;;152            }
;;;153            stimer_prev=stimer_i;
;;;154            stimer_i=stimer_i->next;
000092  4608              MOV      r0,r1
000094  6949              LDR      r1,[r1,#0x14]
000096  2900              CMP      r1,#0                 ;143
000098  d1f3              BNE      |L1.130|
                  |L1.154|
;;;155        }
;;;156        
;;;157    fault:
;;;158        return ERROR;
;;;159    }
00009a  bc30              POP      {r4,r5}
00009c  2000              MOVS     r0,#0                 ;158
00009e  4770              BX       lr
;;;160    /*********************************************************************
                          ENDP

                  os_timer_expired PROC
;;;168     */
;;;169    u8 os_timer_expired(u8 taskid ,TIMER_EVENT event, u32  ticks_expired , void (*triger_callback)(void))
0000a0  b538              PUSH     {r3-r5,lr}
;;;170    {
0000a2  4614              MOV      r4,r2
;;;171        stimer *p_stimer=delay_header;
0000a4  4a3f              LDR      r2,|L1.420|
0000a6  6812              LDR      r2,[r2,#0]  ; delay_header
0000a8  e008              B        |L1.188|
                  |L1.170|
;;;172        while(p_stimer!=NULL)
;;;173        {
;;;174            if(p_stimer->task_id==taskid)
0000aa  7855              LDRB     r5,[r2,#1]
0000ac  4285              CMP      r5,r0
0000ae  d104              BNE      |L1.186|
;;;175            {
;;;176                if(p_stimer->event==event)
0000b0  7895              LDRB     r5,[r2,#2]
0000b2  428d              CMP      r5,r1
0000b4  d101              BNE      |L1.186|
;;;177                {
;;;178                    return SUCCESS;
0000b6  2001              MOVS     r0,#1
;;;179                    
;;;180                }
;;;181            }
;;;182            p_stimer=p_stimer->next;
;;;183        }
;;;184        return add_timer_struct(taskid, TIMER_EXPIRED , event ,ticks_expired, (*triger_callback));
;;;185    }
0000b8  bd38              POP      {r3-r5,pc}
                  |L1.186|
0000ba  6952              LDR      r2,[r2,#0x14]         ;182
                  |L1.188|
0000bc  2a00              CMP      r2,#0                 ;172
0000be  d1f4              BNE      |L1.170|
0000c0  9300              STR      r3,[sp,#0]            ;184
0000c2  460a              MOV      r2,r1                 ;184
0000c4  4623              MOV      r3,r4                 ;184
0000c6  2101              MOVS     r1,#1                 ;184
0000c8  f7fffffe          BL       add_timer_struct
0000cc  bd38              POP      {r3-r5,pc}
;;;186    
                          ENDP

                  os_timer_period PROC
;;;195     */
;;;196    u8 os_timer_period(u8 taskid ,TIMER_EVENT event, u32  ticks_expired , void (*triger_callback)(void))
0000ce  b538              PUSH     {r3-r5,lr}
;;;197    {
0000d0  4614              MOV      r4,r2
;;;198        stimer *p_stimer=delay_header;
0000d2  4a34              LDR      r2,|L1.420|
0000d4  6812              LDR      r2,[r2,#0]  ; delay_header
0000d6  e008              B        |L1.234|
                  |L1.216|
;;;199        while(p_stimer!=NULL)
;;;200        {
;;;201            if(p_stimer->task_id==taskid)
0000d8  7855              LDRB     r5,[r2,#1]
0000da  4285              CMP      r5,r0
0000dc  d104              BNE      |L1.232|
;;;202            {
;;;203                if(p_stimer->event==event)
0000de  7895              LDRB     r5,[r2,#2]
0000e0  428d              CMP      r5,r1
0000e2  d101              BNE      |L1.232|
;;;204                {
;;;205                    return SUCCESS;
0000e4  2001              MOVS     r0,#1
;;;206                    
;;;207                }
;;;208            }
;;;209            p_stimer=p_stimer->next;
;;;210        }
;;;211        return add_timer_struct(taskid, TIMER_PERIOD , event ,ticks_expired, (*triger_callback));
;;;212        
;;;213    }
0000e6  bd38              POP      {r3-r5,pc}
                  |L1.232|
0000e8  6952              LDR      r2,[r2,#0x14]         ;209
                  |L1.234|
0000ea  2a00              CMP      r2,#0                 ;199
0000ec  d1f4              BNE      |L1.216|
0000ee  9300              STR      r3,[sp,#0]            ;211
0000f0  460a              MOV      r2,r1                 ;211
0000f2  4623              MOV      r3,r4                 ;211
0000f4  2102              MOVS     r1,#2                 ;211
0000f6  f7fffffe          BL       add_timer_struct
0000fa  bd38              POP      {r3-r5,pc}
;;;214    
                          ENDP

                  timer_process PROC
;;;224    
;;;225    void timer_process()
0000fc  b57c              PUSH     {r2-r6,lr}
;;;226    {
;;;227        stimer *p_stimer=delay_header;
0000fe  4829              LDR      r0,|L1.420|
;;;228        stimer *stimer_prev=NULL;
000100  2500              MOVS     r5,#0
;;;229        if(p_stimer==NULL)
000102  6804              LDR      r4,[r0,#0]  ; delay_header
000104  2c00              CMP      r4,#0
000106  d01c              BEQ      |L1.322|
                  |L1.264|
;;;230        {
;;;231            return;
;;;232        }
;;;233        while(p_stimer!=NULL)
;;;234        {
;;;235            p_stimer->start_time++;
000108  6861              LDR      r1,[r4,#4]
00010a  1c49              ADDS     r1,r1,#1
;;;236            if(p_stimer->start_time>=p_stimer->destination_time)
00010c  6061              STR      r1,[r4,#4]
00010e  68a0              LDR      r0,[r4,#8]
000110  4281              CMP      r1,r0
000112  d31d              BCC      |L1.336|
;;;237            {
;;;238                if(p_stimer->triger_callback!=NULL)
000114  6921              LDR      r1,[r4,#0x10]
000116  2900              CMP      r1,#0
000118  d000              BEQ      |L1.284|
;;;239                {
;;;240                    p_stimer->triger_callback();
00011a  4788              BLX      r1
                  |L1.284|
;;;241                }
;;;242                //#ifdef   _DEBUG_
;;;243                if(timer_send_message( p_stimer->task_id , p_stimer->event, NULL,0)==ERROR)
00011c  2000              MOVS     r0,#0
00011e  9000              STR      r0,[sp,#0]
000120  9001              STR      r0,[sp,#4]
000122  78a3              LDRB     r3,[r4,#2]
000124  7860              LDRB     r0,[r4,#1]
000126  2202              MOVS     r2,#2
000128  2104              MOVS     r1,#4
00012a  f7fffffe          BL       send_message
;;;244                {
;;;245                    
;;;246                }else
;;;247                {
;;;248                    
;;;249                }
;;;250                //#endif
;;;251                if(p_stimer->type==TIMER_EXPIRED)
00012e  7820              LDRB     r0,[r4,#0]
000130  2801              CMP      r0,#1
000132  d002              BEQ      |L1.314|
;;;252                {
;;;253                    del_struct(stimer_prev , p_stimer);
;;;254                    return;
;;;255                }
;;;256                else if(p_stimer->type==TIMER_PERIOD)
000134  2802              CMP      r0,#2
000136  d005              BEQ      |L1.324|
000138  e00a              B        |L1.336|
                  |L1.314|
00013a  4621              MOV      r1,r4                 ;253
00013c  4628              MOV      r0,r5                 ;253
00013e  f7fffffe          BL       del_struct
                  |L1.322|
;;;257                {
;;;258                    p_stimer->start_time=OS_get_tick();
;;;259                    p_stimer->destination_time=p_stimer->start_time+p_stimer->interval;
;;;260                }
;;;261            }
;;;262            stimer_prev=p_stimer;
;;;263            p_stimer=p_stimer->next;
;;;264        }
;;;265        
;;;266    }
000142  bd7c              POP      {r2-r6,pc}
                  |L1.324|
000144  f7fffffe          BL       OS_get_tick
000148  6060              STR      r0,[r4,#4]            ;259
00014a  68e1              LDR      r1,[r4,#0xc]          ;259
00014c  1840              ADDS     r0,r0,r1              ;259
00014e  60a0              STR      r0,[r4,#8]            ;259
                  |L1.336|
000150  4625              MOV      r5,r4                 ;262
000152  6964              LDR      r4,[r4,#0x14]         ;263
000154  2c00              CMP      r4,#0                 ;233
000156  d1d7              BNE      |L1.264|
000158  bd7c              POP      {r2-r6,pc}
;;;267    
                          ENDP

                  _list_timer PROC
;;;276     */
;;;277    os_err_t _list_timer()
00015a  b510              PUSH     {r4,lr}
;;;278    {
;;;279        
;;;280        stimer *timer_list=delay_header;
00015c  4811              LDR      r0,|L1.420|
;;;281        if(timer_list==NULL)
00015e  6804              LDR      r4,[r0,#0]  ; delay_header
000160  2c00              CMP      r4,#0
000162  d004              BEQ      |L1.366|
;;;282        {
;;;283            return ERROR;	
;;;284        }
;;;285        printf("\r\ntaskid   periodic   timeout    flag\r\n");
000164  a010              ADR      r0,|L1.424|
000166  f7fffffe          BL       __2printf
;;;286        printf("-------- ---------- ---------- -----------\r\n");
00016a  a019              ADR      r0,|L1.464|
;;;287        for (timer_list = timer_list->next; timer_list != NULL; timer_list = timer_list->next)
00016c  e00e              B        |L1.396|
                  |L1.366|
00016e  2000              MOVS     r0,#0                 ;283
;;;288        {
;;;289            
;;;290            printf("0x%08x 0x%08x 0x%08x ",
;;;291                   timer_list->task_id,
;;;292                   timer_list->interval,
;;;293                   timer_list->start_time+timer_list->interval);
;;;294            if (timer_list->type & TIMER_PERIOD)
;;;295                printf("timer_interval\r\n");
;;;296            else
;;;297                printf("timer_exipred\r\n");
;;;298        }
;;;299        
;;;300        printf("current tick:0x%08x\r\n", OS_get_tick());
;;;301        
;;;302        return 0;
;;;303    }
000170  bd10              POP      {r4,pc}
                  |L1.370|
000172  68e2              LDR      r2,[r4,#0xc]          ;290
000174  6860              LDR      r0,[r4,#4]            ;290
000176  7861              LDRB     r1,[r4,#1]            ;290
000178  1883              ADDS     r3,r0,r2              ;290
00017a  a021              ADR      r0,|L1.512|
00017c  f7fffffe          BL       __2printf
000180  7820              LDRB     r0,[r4,#0]            ;294
000182  0780              LSLS     r0,r0,#30             ;294
000184  d501              BPL      |L1.394|
000186  a024              ADR      r0,|L1.536|
000188  e000              B        |L1.396|
                  |L1.394|
00018a  a028              ADR      r0,|L1.556|
                  |L1.396|
00018c  f7fffffe          BL       __2printf
000190  6964              LDR      r4,[r4,#0x14]         ;287
000192  2c00              CMP      r4,#0                 ;287
000194  d1ed              BNE      |L1.370|
000196  f7fffffe          BL       OS_get_tick
00019a  4601              MOV      r1,r0                 ;300
00019c  a027              ADR      r0,|L1.572|
00019e  f7fffffe          BL       __2printf
0001a2  e7e4              B        |L1.366|
;;;304    
                          ENDP

                  |L1.420|
                          DCD      ||.data||
                  |L1.424|
0001a8  0d0a7461          DCB      "\r\ntaskid   periodic   timeout    flag\r\n",0
0001ac  736b6964
0001b0  20202070
0001b4  6572696f
0001b8  64696320
0001bc  20207469
0001c0  6d656f75
0001c4  74202020
0001c8  20666c61
0001cc  670d0a00
                  |L1.464|
0001d0  2d2d2d2d          DCB      "-------- ---------- ---------- -----------\r\n",0
0001d4  2d2d2d2d
0001d8  202d2d2d
0001dc  2d2d2d2d
0001e0  2d2d2d20
0001e4  2d2d2d2d
0001e8  2d2d2d2d
0001ec  2d2d202d
0001f0  2d2d2d2d
0001f4  2d2d2d2d
0001f8  2d2d0d0a
0001fc  00      
0001fd  00                DCB      0
0001fe  00                DCB      0
0001ff  00                DCB      0
                  |L1.512|
000200  30782530          DCB      "0x%08x 0x%08x 0x%08x ",0
000204  38782030
000208  78253038
00020c  78203078
000210  25303878
000214  2000    
000216  00                DCB      0
000217  00                DCB      0
                  |L1.536|
000218  74696d65          DCB      "timer_interval\r\n",0
00021c  725f696e
000220  74657276
000224  616c0d0a
000228  00      
000229  00                DCB      0
00022a  00                DCB      0
00022b  00                DCB      0
                  |L1.556|
00022c  74696d65          DCB      "timer_exipred\r\n",0
000230  725f6578
000234  69707265
000238  640d0a00
                  |L1.572|
00023c  63757272          DCB      "current tick:0x%08x\r\n",0
000240  656e7420
000244  7469636b
000248  3a307825
00024c  3038780d
000250  0a00    
000252  00                DCB      0
000253  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  delay_header
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\kernel\\timer\\hal_timer.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_hal_timer_c_06dbb596____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_hal_timer_c_06dbb596____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_hal_timer_c_06dbb596____REVSH|
#line 144
|__asm___11_hal_timer_c_06dbb596____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
