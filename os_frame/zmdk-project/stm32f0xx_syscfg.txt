; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\stm32f0xx_syscfg.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32f0xx_syscfg.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\stm32f0xx_syscfg.crf ..\arch\arm\stm32f05x\lib\src\stm32f0xx_syscfg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SYSCFG_DeInit PROC
;;;91       */
;;;92     void SYSCFG_DeInit(void)
000000  4824              LDR      r0,|L1.148|
;;;93     {
;;;94       /* Set SYSCFG_CFGR1 register to reset value without affecting MEM_MODE bits */
;;;95       SYSCFG->CFGR1 &= SYSCFG_CFGR1_MEM_MODE;
000002  6801              LDR      r1,[r0,#0]
000004  0789              LSLS     r1,r1,#30
000006  0f89              LSRS     r1,r1,#30
000008  6001              STR      r1,[r0,#0]
;;;96       /* Set EXTICRx registers to reset value */
;;;97       SYSCFG->EXTICR[0] = 0;
00000a  2100              MOVS     r1,#0
00000c  6081              STR      r1,[r0,#8]
;;;98       SYSCFG->EXTICR[1] = 0;
00000e  60c1              STR      r1,[r0,#0xc]
;;;99       SYSCFG->EXTICR[2] = 0;
000010  6101              STR      r1,[r0,#0x10]
;;;100      SYSCFG->EXTICR[3] = 0;
000012  6141              STR      r1,[r0,#0x14]
;;;101      /* Set CFGR2 register to reset value: clear SRAM parity error flag */
;;;102      SYSCFG->CFGR2 |= (uint32_t) SYSCFG_CFGR2_SRAM_PE;
000014  6981              LDR      r1,[r0,#0x18]
000016  1582              ASRS     r2,r0,#22
000018  4311              ORRS     r1,r1,r2
00001a  6181              STR      r1,[r0,#0x18]
;;;103    }
00001c  4770              BX       lr
;;;104    
                          ENDP

                  SYSCFG_MemoryRemapConfig PROC
;;;113      */
;;;114    void SYSCFG_MemoryRemapConfig(uint32_t SYSCFG_MemoryRemap)
00001e  4a1d              LDR      r2,|L1.148|
;;;115    {
;;;116      uint32_t tmpctrl = 0;
;;;117    
;;;118      /* Check the parameter */
;;;119      assert_param(IS_SYSCFG_MEMORY_REMAP(SYSCFG_MemoryRemap));
;;;120    
;;;121      /* Get CFGR1 register value */
;;;122      tmpctrl = SYSCFG->CFGR1;
000020  6811              LDR      r1,[r2,#0]
;;;123    
;;;124      /* Clear MEM_MODE bits */
;;;125      tmpctrl &= (uint32_t) (~SYSCFG_CFGR1_MEM_MODE);
000022  0889              LSRS     r1,r1,#2
000024  0089              LSLS     r1,r1,#2
;;;126    
;;;127      /* Set the new MEM_MODE bits value */
;;;128      tmpctrl |= (uint32_t) SYSCFG_MemoryRemap;
000026  4301              ORRS     r1,r1,r0
;;;129    
;;;130      /* Set CFGR1 register with the new memory remap configuration */
;;;131      SYSCFG->CFGR1 = tmpctrl;
000028  6011              STR      r1,[r2,#0]
;;;132    }
00002a  4770              BX       lr
;;;133    
                          ENDP

                  SYSCFG_DMAChannelRemapConfig PROC
;;;154      */
;;;155    void SYSCFG_DMAChannelRemapConfig(uint32_t SYSCFG_DMARemap, FunctionalState NewState)
00002c  4a19              LDR      r2,|L1.148|
;;;156    {
;;;157      /* Check the parameters */
;;;158      assert_param(IS_SYSCFG_DMA_REMAP(SYSCFG_DMARemap));
;;;159      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;160    
;;;161      if (NewState != DISABLE)
00002e  2900              CMP      r1,#0
;;;162      {
;;;163        /* Remap the DMA channel */
;;;164        SYSCFG->CFGR1 |= (uint32_t)SYSCFG_DMARemap;
;;;165      }
;;;166      else
;;;167      {
;;;168        /* use the default DMA channel mapping */
;;;169        SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_DMARemap);
000030  6811              LDR      r1,[r2,#0]
000032  d001              BEQ      |L1.56|
000034  4301              ORRS     r1,r1,r0              ;164
000036  e000              B        |L1.58|
                  |L1.56|
000038  4381              BICS     r1,r1,r0
                  |L1.58|
00003a  6011              STR      r1,[r2,#0]            ;164
;;;170      }
;;;171    }
00003c  4770              BX       lr
;;;172    
                          ENDP

                  SYSCFG_I2CFastModePlusConfig PROC
;;;186      */
;;;187    void SYSCFG_I2CFastModePlusConfig(uint32_t SYSCFG_I2CFastModePlus, FunctionalState NewState)
00003e  4a15              LDR      r2,|L1.148|
;;;188    {
;;;189      /* Check the parameters */
;;;190      assert_param(IS_SYSCFG_I2C_FMP(SYSCFG_I2CFastModePlus));
;;;191      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;192    
;;;193      if (NewState != DISABLE)
000040  2900              CMP      r1,#0
;;;194      {
;;;195        /* Enable fast mode plus driving capability for selected pin */
;;;196        SYSCFG->CFGR1 |= (uint32_t)SYSCFG_I2CFastModePlus;
;;;197      }
;;;198      else
;;;199      {
;;;200        /* Disable fast mode plus driving capability for selected pin */
;;;201        SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_I2CFastModePlus);
000042  6811              LDR      r1,[r2,#0]
000044  d001              BEQ      |L1.74|
000046  4301              ORRS     r1,r1,r0              ;196
000048  e000              B        |L1.76|
                  |L1.74|
00004a  4381              BICS     r1,r1,r0
                  |L1.76|
00004c  6011              STR      r1,[r2,#0]            ;196
;;;202      }
;;;203    }
00004e  4770              BX       lr
;;;204    
                          ENDP

                  SYSCFG_EXTILineConfig PROC
;;;212      */
;;;213    void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
000050  078a              LSLS     r2,r1,#30
;;;214    {
000052  b510              PUSH     {r4,lr}
;;;215      uint32_t tmp = 0x00;
;;;216    
;;;217      /* Check the parameters */
;;;218      assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
;;;219      assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
;;;220      
;;;221      tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
000054  0f12              LSRS     r2,r2,#28
000056  230f              MOVS     r3,#0xf
000058  4093              LSLS     r3,r3,r2
;;;222      SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
00005a  088c              LSRS     r4,r1,#2
00005c  490d              LDR      r1,|L1.148|
00005e  00a4              LSLS     r4,r4,#2
000060  1861              ADDS     r1,r4,r1
000062  688c              LDR      r4,[r1,#8]
000064  439c              BICS     r4,r4,r3
000066  608c              STR      r4,[r1,#8]
;;;223      SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
000068  688b              LDR      r3,[r1,#8]
00006a  4090              LSLS     r0,r0,r2
00006c  4303              ORRS     r3,r3,r0
00006e  608b              STR      r3,[r1,#8]
;;;224    }
000070  bd10              POP      {r4,pc}
;;;225    
                          ENDP

                  SYSCFG_BreakConfig PROC
;;;236      */
;;;237    void SYSCFG_BreakConfig(uint32_t SYSCFG_Break)
000072  4908              LDR      r1,|L1.148|
;;;238    {
;;;239      /* Check the parameter */
;;;240      assert_param(IS_SYSCFG_LOCK_CONFIG(SYSCFG_Break));
;;;241    
;;;242      SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Break;
000074  698a              LDR      r2,[r1,#0x18]
000076  4302              ORRS     r2,r2,r0
000078  618a              STR      r2,[r1,#0x18]
;;;243    }
00007a  4770              BX       lr
;;;244    
                          ENDP

                  SYSCFG_GetFlagStatus PROC
;;;251      */
;;;252    FlagStatus SYSCFG_GetFlagStatus(uint32_t SYSCFG_Flag)
00007c  4905              LDR      r1,|L1.148|
;;;253    {
;;;254      FlagStatus bitstatus = RESET;
00007e  2000              MOVS     r0,#0
;;;255    
;;;256      /* Check the parameter */
;;;257      assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));
;;;258    
;;;259      /* Check the status of the specified SPI flag */
;;;260      if ((SYSCFG->CFGR2 & SYSCFG_CFGR2_SRAM_PE) != (uint32_t)RESET)
000080  6989              LDR      r1,[r1,#0x18]
000082  05c9              LSLS     r1,r1,#23
000084  d500              BPL      |L1.136|
;;;261      {
;;;262        /* SYSCFG_Flag is set */
;;;263        bitstatus = SET;
000086  2001              MOVS     r0,#1
                  |L1.136|
;;;264      }
;;;265      else
;;;266      {
;;;267        /* SYSCFG_Flag is reset */
;;;268        bitstatus = RESET;
;;;269      }
;;;270      /* Return the SYSCFG_Flag status */
;;;271      return  bitstatus;
;;;272    }
000088  4770              BX       lr
;;;273    
                          ENDP

                  SYSCFG_ClearFlag PROC
;;;280      */
;;;281    void SYSCFG_ClearFlag(uint32_t SYSCFG_Flag)
00008a  4902              LDR      r1,|L1.148|
;;;282    {
;;;283      /* Check the parameter */
;;;284      assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));
;;;285    
;;;286      SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Flag;
00008c  698a              LDR      r2,[r1,#0x18]
00008e  4302              ORRS     r2,r2,r0
000090  618a              STR      r2,[r1,#0x18]
;;;287    }
000092  4770              BX       lr
;;;288    
                          ENDP

                  |L1.148|
                          DCD      0x40010000

;*** Start embedded assembler ***

#line 1 "..\\arch\\arm\\stm32f05x\\lib\\src\\stm32f0xx_syscfg.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_stm32f0xx_syscfg_c_57637610____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_stm32f0xx_syscfg_c_57637610____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_stm32f0xx_syscfg_c_57637610____REVSH|
#line 144
|__asm___18_stm32f0xx_syscfg_c_57637610____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
