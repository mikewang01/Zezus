; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\os.o --asm_dir=.\ --list_dir=.\ --depend=.\os.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\os.crf ..\kernel\shedule\os.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_u
                          REQUIRE _printf_str
                  os_show_version PROC
;;;67             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@";
;;;68             void os_show_version(void)
000000  b508              PUSH     {r3,lr}
;;;69     {
;;;70             printf("\r\n%s",corp_logo);
000002  4839              LDR      r0,|L1.232|
000004  6801              LDR      r1,[r0,#0]  ; corp_logo
000006  a039              ADR      r0,|L1.236|
000008  f7fffffe          BL       __2printf
;;;71             printf("\r\n\\ | /\r\n");
00000c  a039              ADR      r0,|L1.244|
00000e  f7fffffe          BL       __2printf
;;;72             printf("-WSH-    WSH Operating System\r\n");
000012  a03b              ADR      r0,|L1.256|
000014  f7fffffe          BL       __2printf
;;;73             printf("/ | \\     %d.%d.%d build %s\r\n",
000018  a041              ADR      r0,|L1.288|
00001a  2300              MOVS     r3,#0
00001c  9000              STR      r0,[sp,#0]
00001e  2201              MOVS     r2,#1
000020  4619              MOV      r1,r3
000022  a042              ADR      r0,|L1.300|
000024  f7fffffe          BL       __2printf
;;;74                    VER_MAJOR, VER_MINOR, REVISION, __DATE__);
;;;75             printf(" 20012 - 2013 Copyright by MikeWang\r\n");
000028  a048              ADR      r0,|L1.332|
00002a  f7fffffe          BL       __2printf
;;;76             }
00002e  bd08              POP      {r3,pc}
;;;77             
                          ENDP

                  OS_Init PROC
;;;88             extern  os_err_t clock_add_to_manager_list(void);
;;;89     void OS_Init()
000030  b5f8              PUSH     {r3-r7,lr}
;;;90     {
;;;91         u8 count;
;;;92         
;;;93         Task_State=(PCB*)osmalloc(sizeof(PCB)*T_NUM);	//申请 动态的任务管理块
000032  4e50              LDR      r6,|L1.372|
000034  210c              MOVS     r1,#0xc
000036  8830              LDRH     r0,[r6,#0]  ; T_NUM
000038  4348              MULS     r0,r1,r0
00003a  f7fffffe          BL       osmalloc
00003e  4d4e              LDR      r5,|L1.376|
;;;94         sys_tick_init(SYSCLK);	     //?????
000040  6068              STR      r0,[r5,#4]  ; Task_State
000042  2030              MOVS     r0,#0x30
000044  f7fffffe          BL       sys_tick_init
;;;95         mem_init();	 
000048  f7fffffe          BL       mem_init
;;;96         clock_add_to_manager_list();
00004c  f7fffffe          BL       clock_add_to_manager_list
;;;97         //	
;;;98         for(count=0;count<T_NUM;count++)
000050  2400              MOVS     r4,#0
;;;99         {
;;;100            Current_Task=count;
000052  4f4a              LDR      r7,|L1.380|
000054  e00c              B        |L1.112|
                  |L1.86|
000056  703c              STRB     r4,[r7,#0]
;;;101            Task_State[count].ptr=NULL;
000058  210c              MOVS     r1,#0xc
00005a  686a              LDR      r2,[r5,#4]  ; Task_State
00005c  4361              MULS     r1,r4,r1
00005e  2000              MOVS     r0,#0
000060  1889              ADDS     r1,r1,r2
;;;102            My_Task_Init[count]();	
000062  6088              STR      r0,[r1,#8]
000064  4846              LDR      r0,|L1.384|
000066  00a1              LSLS     r1,r4,#2
000068  5840              LDR      r0,[r0,r1]
00006a  4780              BLX      r0
00006c  1c64              ADDS     r4,r4,#1              ;98
00006e  b2e4              UXTB     r4,r4                 ;98
                  |L1.112|
000070  8830              LDRH     r0,[r6,#0]            ;98  ; T_NUM
000072  4284              CMP      r4,r0                 ;98
000074  d3ef              BCC      |L1.86|
;;;103        }
;;;104        
;;;105    }
000076  bdf8              POP      {r3-r7,pc}
;;;106    
                          ENDP

                  OS_get_taskstate PROC
;;;119     */
;;;120    PCB* OS_get_taskstate()
000078  483f              LDR      r0,|L1.376|
;;;121    {
;;;122        return Task_State;
00007a  6840              LDR      r0,[r0,#4]  ; Task_State
;;;123    }
00007c  4770              BX       lr
;;;124    
                          ENDP

                  OS_get_tick PROC
;;;133     */
;;;134    u32 OS_get_tick()
00007e  483e              LDR      r0,|L1.376|
;;;135    {
;;;136        return tick_tok;
000080  6800              LDR      r0,[r0,#0]  ; tick_tok
;;;137    }
000082  4770              BX       lr
;;;138    
                          ENDP

                  Shedule PROC
;;;141    
;;;142    void Shedule()
000084  b508              PUSH     {r3,lr}
;;;143    {
;;;144        volatile u8 count;
;;;145        while(1)
;;;146        {
;;;147            
;;;148            
;;;149            for(count=0;count<T_NUM;count++)
;;;150            {	
;;;151                
;;;152                if((Task_State[count].State))
000086  4c3c              LDR      r4,|L1.376|
;;;153                {
;;;154                    
;;;155                    Current_Task=count;
000088  4d3c              LDR      r5,|L1.380|
;;;156                    My_Task[count]();
00008a  4e3e              LDR      r6,|L1.388|
00008c  4f39              LDR      r7,|L1.372|
                  |L1.142|
00008e  2000              MOVS     r0,#0                 ;149
000090  4669              MOV      r1,sp                 ;149
000092  e012              B        |L1.186|
                  |L1.148|
000094  4668              MOV      r0,sp                 ;152
000096  7800              LDRB     r0,[r0,#0]            ;152
000098  210c              MOVS     r1,#0xc               ;152
00009a  4348              MULS     r0,r1,r0              ;152
00009c  6861              LDR      r1,[r4,#4]            ;152  ; Task_State
00009e  5a08              LDRH     r0,[r1,r0]            ;152
0000a0  2800              CMP      r0,#0                 ;152
0000a2  d007              BEQ      |L1.180|
0000a4  4668              MOV      r0,sp                 ;155
0000a6  7800              LDRB     r0,[r0,#0]            ;155
0000a8  7028              STRB     r0,[r5,#0]            ;155
0000aa  4668              MOV      r0,sp
0000ac  7800              LDRB     r0,[r0,#0]
0000ae  0080              LSLS     r0,r0,#2
0000b0  5830              LDR      r0,[r6,r0]
0000b2  4780              BLX      r0
                  |L1.180|
0000b4  4669              MOV      r1,sp                 ;149
0000b6  7808              LDRB     r0,[r1,#0]            ;149
0000b8  1c40              ADDS     r0,r0,#1              ;149
                  |L1.186|
0000ba  7008              STRB     r0,[r1,#0]            ;149
0000bc  7808              LDRB     r0,[r1,#0]            ;149
0000be  8839              LDRH     r1,[r7,#0]            ;149  ; T_NUM
0000c0  4288              CMP      r0,r1                 ;149
0000c2  d2e4              BCS      |L1.142|
0000c4  e7e6              B        |L1.148|
;;;157                }
;;;158                
;;;159            }
;;;160            
;;;161        }                                    
;;;162        
;;;163    }
;;;164    
                          ENDP

                  systick_process PROC
;;;166    
;;;167    void systick_process()
0000c6  b510              PUSH     {r4,lr}
;;;168    {
;;;169        
;;;170        
;;;171        // u8 count;
;;;172    #ifdef System_Hook
;;;173        System_Tick_Hook();
;;;174    #endif
;;;175        tick_tok++;
0000c8  482b              LDR      r0,|L1.376|
0000ca  6801              LDR      r1,[r0,#0]  ; tick_tok
0000cc  1c49              ADDS     r1,r1,#1
;;;176        timer_process();
0000ce  6001              STR      r1,[r0,#0]  ; tick_tok
0000d0  f7fffffe          BL       timer_process
;;;177        
;;;178    }
0000d4  bd10              POP      {r4,pc}
;;;179    
                          ENDP

                  exam_assert PROC
;;;190     */
;;;191    void  exam_assert( char * file_name, unsigned int line_no )
0000d6  460a              MOV      r2,r1
;;;192    {
0000d8  b510              PUSH     {r4,lr}
;;;193    	printf( "\n[EXAM]Assert failed: %s, line %u\n", 
0000da  4601              MOV      r1,r0
0000dc  a02a              ADR      r0,|L1.392|
0000de  f7fffffe          BL       __2printf
;;;194    	file_name, line_no );
;;;195    	abort( );
0000e2  f7fffffe          BL       abort
;;;196    }
0000e6  bd10              POP      {r4,pc}
;;;197    
                          ENDP

                  |L1.232|
                          DCD      ||.constdata||
                  |L1.236|
0000ec  0d0a2573          DCB      "\r\n%s",0
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L1.244|
0000f4  0d0a5c20          DCB      "\r\n\\ | /\r\n",0
0000f8  7c202f0d
0000fc  0a00    
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L1.256|
000100  2d575348          DCB      "-WSH-    WSH Operating System\r\n",0
000104  2d202020
000108  20575348
00010c  204f7065
000110  72617469
000114  6e672053
000118  79737465
00011c  6d0d0a00
                  |L1.288|
000120  41756720          DCB      "Aug 20 2014",0
000124  32302032
000128  30313400
                  |L1.300|
00012c  2f207c20          DCB      "/ | \\     %d.%d.%d build %s\r\n",0
000130  5c202020
000134  20202564
000138  2e25642e
00013c  25642062
000140  75696c64
000144  2025730d
000148  0a00    
00014a  00                DCB      0
00014b  00                DCB      0
                  |L1.332|
00014c  20323030          DCB      " 20012 - 2013 Copyright by MikeWang\r\n",0
000150  3132202d
000154  20323031
000158  3320436f
00015c  70797269
000160  67687420
000164  6279204d
000168  696b6557
00016c  616e670d
000170  0a00    
000172  00                DCB      0
000173  00                DCB      0
                  |L1.372|
                          DCD      T_NUM
                  |L1.376|
                          DCD      ||.data||
                  |L1.380|
                          DCD      Current_Task
                  |L1.384|
                          DCD      My_Task_Init
                  |L1.388|
                          DCD      My_Task
                  |L1.392|
000188  0a5b4558          DCB      "\n[EXAM]Assert failed: %s, line %u\n",0
00018c  414d5d41
000190  73736572
000194  74206661
000198  696c6564
00019c  3a202573
0001a0  2c206c69
0001a4  6e652025
0001a8  750a00  
0001ab  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  corp_logo
                          DCD      ||.conststring||

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  20202020          DCB      "         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n  "
000004  20202020
000008  20404040
00000c  40404040
000010  40404040
000014  40404040
000018  40404040
00001c  40404040
000020  40404040
000024  40404040
000028  40404040
00002c  40404040
000030  400d0a20
000034  20      
000035  20202020          DCB      "       @~~~~~~~~~~~~~~~~#~~~~~~~~#~~~#~~~~~~~~@\r\n    "
000039  20202040
00003d  7e7e7e7e
000041  7e7e7e7e
000045  7e7e7e7e
000049  7e7e7e7e
00004d  237e7e7e
000051  7e7e7e7e
000055  7e237e7e
000059  7e237e7e
00005d  7e7e7e7e
000061  7e7e400d
000065  0a202020
000069  20      
00006a  20202020          DCB      "     @~##########~~~~#######~~~~#~~#######~~@\r\n      "
00006e  20407e23
000072  23232323
000076  23232323
00007a  237e7e7e
00007e  7e232323
000082  23232323
000086  7e7e7e7e
00008a  237e7e23
00008e  23232323
000092  23237e7e
000096  400d0a20
00009a  20202020
00009e  20      
00009f  20202040          DCB      "   @~~~~~#~~~~~~~~#~~~~~~#~~~~~~#~~~~~~~~~@\r\n        "
0000a3  7e7e7e7e
0000a7  7e237e7e
0000ab  7e7e7e7e
0000af  7e7e237e
0000b3  7e7e7e7e
0000b7  7e237e7e
0000bb  7e7e7e7e
0000bf  237e7e7e
0000c3  7e7e7e7e
0000c7  7e7e400d
0000cb  0a202020
0000cf  20202020
0000d3  20      
0000d4  20407e7e          DCB      " @~~~~~#~~~~~~~#~~~~~~#~~~~~~#~######~~~@\r\n         @"
0000d8  7e7e7e23
0000dc  7e7e7e7e
0000e0  7e7e7e23
0000e4  7e7e7e7e
0000e8  7e7e237e
0000ec  7e7e7e7e
0000f0  7e237e23
0000f4  23232323
0000f8  237e7e7e
0000fc  400d0a20
000100  20202020
000104  20202020
000108  40      
000109  7e7e7e7e          DCB      "~~~~~#~~~~~~~~#########~~#~~~#~~~~#~~~@\r\n         @~~"
00010d  7e237e7e
000111  7e7e7e7e
000115  7e7e2323
000119  23232323
00011d  2323237e
000121  7e237e7e
000125  7e237e7e
000129  7e7e237e
00012d  7e7e400d
000131  0a202020
000135  20202020
000139  2020407e
00013d  7e      
00013e  23232323          DCB      "########~~~~#~~~#~~~#~~~#~~#~#~~#~~~@\r\n         @~~~~"
000142  23232323
000146  7e7e7e7e
00014a  237e7e7e
00014e  237e7e7e
000152  237e7e7e
000156  237e7e23
00015a  7e237e7e
00015e  237e7e7e
000162  400d0a20
000166  20202020
00016a  20202020
00016e  407e7e7e
000172  7e      
000173  237e7e7e          DCB      "#~~~~#~~~~#~~~#~~~#~~~~#########~~@\r\n         @~~~~#~"
000177  7e237e7e
00017b  7e7e237e
00017f  7e7e237e
000183  7e7e237e
000187  7e7e7e23
00018b  23232323
00018f  23232323
000193  7e7e400d
000197  0a202020
00019b  20202020
00019f  2020407e
0001a3  7e7e7e23
0001a7  7e      
0001a8  7e7e7e23          DCB      "~~~#~~~~#########~~~~~#~~~~~#~~~@\r\n         @~~~~#~~~"
0001ac  7e7e7e7e
0001b0  23232323
0001b4  23232323
0001b8  237e7e7e
0001bc  7e7e237e
0001c0  7e7e7e7e
0001c4  237e7e7e
0001c8  400d0a20
0001cc  20202020
0001d0  20202020
0001d4  407e7e7e
0001d8  7e237e7e
0001dc  7e      
0001dd  7e237e7e          DCB      "~#~~~~#~~~~~~~~~~~~~#~~#~~#~~~@\r\n         @~~~#~~~~~#"
0001e1  7e7e237e
0001e5  7e7e7e7e
0001e9  7e7e7e7e
0001ed  7e7e7e7e
0001f1  237e7e23
0001f5  7e7e237e
0001f9  7e7e400d
0001fd  0a202020
000201  20202020
000205  2020407e
000209  7e7e237e
00020d  7e7e7e7e
000211  23      
000212  7e7e7e7e          DCB      "~~~~#~~~~~~~~#~~#~########~~@\r\n         @~~~#~~~~~#~~"
000216  237e7e7e
00021a  7e7e7e7e
00021e  7e237e7e
000222  237e2323
000226  23232323
00022a  23237e7e
00022e  400d0a20
000232  20202020
000236  20202020
00023a  407e7e7e
00023e  237e7e7e
000242  7e7e237e
000246  7e      
000247  7e7e237e          DCB      "~~#~~~~~~~~#~#~~~~~~~~#~~~@\r\n         @~###########~~"
00024b  7e7e7e7e
00024f  7e7e7e23
000253  7e237e7e
000257  7e7e7e7e
00025b  7e7e237e
00025f  7e7e400d
000263  0a202020
000267  20202020
00026b  2020407e
00026f  23232323
000273  23232323
000277  2323237e
00027b  7e      
00027c  7e232323          DCB      "~#########~~~~~~~~##~~~~@\r\n         @@@@@@@@@@@@@@@@@"
000280  23232323
000284  23237e7e
000288  7e7e7e7e
00028c  7e7e2323
000290  7e7e7e7e
000294  400d0a20
000298  20202020
00029c  20202020
0002a0  40404040
0002a4  40404040
0002a8  40404040
0002ac  40404040
0002b0  40      
0002b1  40404040          DCB      "@@@@@@@@@@@@@@@@@@@@@@@",0
0002b5  40404040
0002b9  40404040
0002bd  40404040
0002c1  40404040
0002c5  40404000

                          AREA ||.data||, DATA, ALIGN=2

                  tick_tok
                          DCD      0x00000000
                  Task_State
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\kernel\\shedule\\os.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___4_os_c_tick_tok____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___4_os_c_tick_tok____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___4_os_c_tick_tok____REVSH|
#line 144
|__asm___4_os_c_tick_tok____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
