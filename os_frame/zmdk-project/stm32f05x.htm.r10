<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\stm32f05x.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\stm32f05x.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Mon Oct 13 20:25:17 2014
<BR><P>
<H3>Maximum Stack Usage =        352 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
flash_cp &rArr; _flash_cp &rArr; w25qxx_write_content &rArr; w25qxx_write_nocheck &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[93]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">NMI_Handler</a><BR>
 <LI><a href="#[12]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">HardFault_Handler</a><BR>
 <LI><a href="#[13]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SVC_Handler</a><BR>
 <LI><a href="#[14]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">PendSV_Handler</a><BR>
 <LI><a href="#[22]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC1_COMP_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[88]">Add</a> from cmd.o(.text) referenced from cmd.o(qShellFunTab)
 <LI><a href="#[32]">CEC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[20]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[21]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1b]">EXTI0_1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1c]">EXTI2_3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1d]">EXTI4_15_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[19]">FLASH_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[12]">HardFault_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2c]">I2C1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2d]">I2C2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[17]">PVD_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[14]">PendSV_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[89]">PutString</a> from cmd.o(.text) referenced from cmd.o(qShellFunTab)
 <LI><a href="#[1a]">RCC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[18]">RTC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[91]">Reset_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from spi1.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from spi2.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[15]">SysTick_Handler</a> from systick.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[33]">SystemInit</a> from system_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(.text)
 <LI><a href="#[28]">TIM14_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[29]">TIM15_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2a]">TIM16_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2b]">TIM17_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[24]">TIM1_CC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[25]">TIM2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[26]">TIM3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[27]">TIM6_DAC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1e]">TS_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[83]">Task_Free</a> from system_task.o(.text) referenced from system_task.o(.constdata)
 <LI><a href="#[87]">Task_Free_Init</a> from system_task.o(.text) referenced from system_task.o(.constdata)
 <LI><a href="#[30]">USART1_IRQHandler</a> from usart1.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from usart2.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[16]">WWDG_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[92]">__main</a> from __main.o(!!!main) referenced from startup_stm32f0xx.o(.text)
 <LI><a href="#[5f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[77]">adc1_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[76]">adc1_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[79]">adc2_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[78]">adc2_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[75]">afio_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[74]">afio_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[7f]">dma1_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[7e]">dma1_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[54]">eeprom_close</a> from eeprom.o(.text) referenced from eeprom.o(.text)
 <LI><a href="#[52]">eeprom_init</a> from eeprom.o(.text) referenced from eeprom.o(.text)
 <LI><a href="#[53]">eeprom_open</a> from eeprom.o(.text) referenced from eeprom.o(.text)
 <LI><a href="#[56]">eeprom_read</a> from eeprom.o(.text) referenced from eeprom.o(.text)
 <LI><a href="#[55]">eeprom_write</a> from eeprom.o(.text) referenced from eeprom.o(.text)
 <LI><a href="#[90]">flash_cp</a> from cmd.o(.text) referenced from cmd.o(qShellFunTab)
 <LI><a href="#[8f]">flash_read</a> from cmd.o(.text) referenced from cmd.o(qShellFunTab)
 <LI><a href="#[5e]">fputc</a> from usart1.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[61]">gpioa_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[60]">gpioa_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[63]">gpiob_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[62]">gpiob_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[65]">gpioc_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[64]">gpioc_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[67]">gpiod_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[66]">gpiod_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[69]">gpioe_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[68]">gpioe_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[6b]">gpiof_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[6a]">gpiof_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[50]">htu20_control</a> from htu20d.o(.text) referenced from htu20d.o(.text)
 <LI><a href="#[4d]">htu20_init</a> from htu20d.o(.text) referenced from htu20d.o(.text)
 <LI><a href="#[4e]">htu20_open</a> from htu20d.o(.text) referenced from htu20d.o(.text)
 <LI><a href="#[51]">htu20_rx_indicator</a> from htu20d.o(.text) referenced from htu20d.o(.text)
 <LI><a href="#[4f]">htu20_write</a> from htu20d.o(.text) referenced from htu20d.o(.text)
 <LI><a href="#[73]">i2c2_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[72]">i2c2_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[49]">lcd_control</a> from lcd.o(.text) referenced from lcd.o(.text)
 <LI><a href="#[46]">lcd_init</a> from lcd.o(.text) referenced from lcd.o(.text)
 <LI><a href="#[47]">lcd_open</a> from lcd.o(.text) referenced from lcd.o(.text)
 <LI><a href="#[48]">lcd_write</a> from lcd.o(.text) referenced from lcd.o(.text)
 <LI><a href="#[8b]">list_device</a> from cmd.o(.text) referenced from cmd.o(qShellFunTab)
 <LI><a href="#[8d]">list_mem</a> from cmd.o(.text) referenced from cmd.o(qShellFunTab)
 <LI><a href="#[8a]">list_timer</a> from cmd.o(.text) referenced from cmd.o(qShellFunTab)
 <LI><a href="#[4c]">me2_ch20_control</a> from me2_ch2o.o(.text) referenced from me2_ch2o.o(.text)
 <LI><a href="#[4a]">me2_ch20_init</a> from me2_ch2o.o(.text) referenced from me2_ch2o.o(.text)
 <LI><a href="#[4b]">me2_ch20_read</a> from me2_ch2o.o(.text) referenced from me2_ch2o.o(.text)
 <LI><a href="#[e]">mem_init</a> from mem.o(.text) referenced 2 times from mem.o(.data)
 <LI><a href="#[f]">mem_perused</a> from mem.o(.text) referenced 2 times from mem.o(.data)
 <LI><a href="#[8e]">mem_read</a> from cmd.o(.text) referenced from cmd.o(qShellFunTab)
 <LI><a href="#[8c]">relay_control</a> from cmd.o(.text) referenced from cmd.o(qShellFunTab)
 <LI><a href="#[40]">relays_close</a> from relay.o(.text) referenced from relay.o(.text)
 <LI><a href="#[3f]">relays_control</a> from relay.o(.text) referenced from relay.o(.text)
 <LI><a href="#[3c]">relays_init</a> from relay.o(.text) referenced from relay.o(.text)
 <LI><a href="#[3d]">relays_open</a> from relay.o(.text) referenced from relay.o(.text)
 <LI><a href="#[3e]">relays_write</a> from relay.o(.text) referenced from relay.o(.text)
 <LI><a href="#[7b]">spi1_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[7a]">spi1_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[57]">spi1_init</a> from spi1.o(.text) referenced from spi1.o(.text)
 <LI><a href="#[58]">spi1_open</a> from spi1.o(.text) referenced from spi1.o(.text)
 <LI><a href="#[59]">spi1_write</a> from spi1.o(.text) referenced from spi1.o(.text)
 <LI><a href="#[71]">spi2_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[70]">spi2_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[41]">spi2_init</a> from spi2.o(.text) referenced from spi2.o(.text)
 <LI><a href="#[42]">spi2_open</a> from spi2.o(.text) referenced from spi2.o(.text)
 <LI><a href="#[44]">spi2_read</a> from spi2.o(.text) referenced from spi2.o(.text)
 <LI><a href="#[45]">spi2_rx_indicator</a> from spi2.o(.text) referenced from spi2.o(.text)
 <LI><a href="#[43]">spi2_write</a> from spi2.o(.text) referenced from spi2.o(.text)
 <LI><a href="#[80]">task_demo</a> from user_task.o(.text) referenced from system_task.o(.constdata)
 <LI><a href="#[84]">task_demo_init</a> from user_task.o(.text) referenced from system_task.o(.constdata)
 <LI><a href="#[86]">task_gui</a> from gui_task.o(.text) referenced from system_task.o(.constdata)
 <LI><a href="#[82]">task_gui_init</a> from gui_task.o(.text) referenced from system_task.o(.constdata)
 <LI><a href="#[81]">task_manufacture</a> from manufacture_task.o(.text) referenced from system_task.o(.constdata)
 <LI><a href="#[85]">task_manufacture_init</a> from manufacture_task.o(.text) referenced from system_task.o(.constdata)
 <LI><a href="#[7d]">tim1_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[7c]">tim1_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[35]">uart1_init</a> from usart1.o(.text) referenced from usart1.o(.text)
 <LI><a href="#[36]">uart1_open</a> from usart1.o(.text) referenced from usart1.o(.text)
 <LI><a href="#[38]">uart1_rx_indicator</a> from usart1.o(.text) referenced from usart1.o(.text)
 <LI><a href="#[37]">uart1_write</a> from usart1.o(.text) referenced from usart1.o(.text)
 <LI><a href="#[39]">uart2_init</a> from usart2.o(.text) referenced from usart2.o(.text)
 <LI><a href="#[3a]">uart2_open</a> from usart2.o(.text) referenced from usart2.o(.text)
 <LI><a href="#[3b]">uart2_write</a> from usart2.o(.text) referenced from usart2.o(.text)
 <LI><a href="#[6d]">usart1_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[6c]">usart1_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[6f]">usart2_clock_disable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[6e]">usart2_clock_enable</a> from clock_arch.o(.text) referenced from clock_arch.o(.constdata)
 <LI><a href="#[5d]">w25qxx_control</a> from w25qxx.o(.text) referenced from w25qxx.o(.text)
 <LI><a href="#[5a]">w25qxx_init</a> from w25qxx.o(.text) referenced from w25qxx.o(.text)
 <LI><a href="#[5b]">w25qxx_open</a> from w25qxx.o(.text) referenced from w25qxx.o(.text)
 <LI><a href="#[5c]">w25qxx_write</a> from w25qxx.o(.text) referenced from w25qxx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[92]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[94]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[96]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1d9]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1da]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1db]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1ba]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[97]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[98]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[9a]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[9b]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[9d]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[9f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[a6]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1dc]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1dd]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1de]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1df]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1e0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1e1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1e2]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1e3]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1e4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1e5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[1e6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1e7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1e8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1ec]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[ab]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1f0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1f1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1f2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1f3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1f4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1f5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[95]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1f6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[a3]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a5]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1f7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[a7]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OS_Init &rArr; osmalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1f8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1d2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[aa]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1f9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[ac]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1fa]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[91]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))

<P><STRONG><a name="[1fb]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a8]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, start_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = main &rArr; OS_Init &rArr; osmalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shedule
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[33]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_stm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, system_stm32f0xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[b3]"></a>clock_add_to_manager_list</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, clock_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clock_add_to_manager_list
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_register
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[bb]"></a>osmemcpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osrealloc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_write
</UL>

<P><STRONG><a name="[b5]"></a>osmemset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_init
</UL>

<P><STRONG><a name="[d1]"></a>os_memmove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_order
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_control
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_rx_callback
</UL>

<P><STRONG><a name="[e]"></a>mem_init</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmemset
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>mem_perused</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_perused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(.data)
</UL>
<P><STRONG><a name="[b6]"></a>osfree</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_struct
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_message
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osrealloc
</UL>

<P><STRONG><a name="[b8]"></a>osmalloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osmalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer_struct
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_register
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_register
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_register
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_register
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_register
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_register
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_register
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_register
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relays_register
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_register
</UL>

<P><STRONG><a name="[ba]"></a>osrealloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osfree
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmemcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>

<P><STRONG><a name="[dc]"></a>crc16</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_event
</UL>

<P><STRONG><a name="[bc]"></a>_list_mem</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _list_mem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
</UL>

<P><STRONG><a name="[be]"></a>_mem_read</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _mem_read &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_read
</UL>

<P><STRONG><a name="[bf]"></a>sys_tick_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_tick_init &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[c2]"></a>delay_us</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, systick.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[c1]"></a>delay_ms</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, systick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[15]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SysTick_Handler &rArr; systick_process &rArr; timer_process &rArr; send_message &rArr; osmalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>os_gpio_init</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, gpio_mgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = os_gpio_init &rArr; os_clock_open &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo_init
</UL>

<P><STRONG><a name="[87]"></a>Task_Free_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>Task_Free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Task_Free &rArr; GOLDraw &rArr; PbDraw &rArr; GOLPanelDrawTsk &rArr; Arc &rArr; Bar &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_get_taskstate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDraw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(.constdata)
</UL>
<P><STRONG><a name="[1fc]"></a>board_hardware_initiate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_task.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>System_Tick_Hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_task.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>task_manufacture_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, manufacture_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = task_manufacture_init &rArr; eeprom_register &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_init_all
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>task_manufacture</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, manufacture_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = task_manufacture &rArr; process_msg &rArr; process_order &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_message
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_message
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_msg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_get_taskstate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(.constdata)
</UL>
<P><STRONG><a name="[1fe]"></a>call_back_test</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_task.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>process_event</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, user_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = process_event &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_period
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_expired
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_close
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_control
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo
</UL>

<P><STRONG><a name="[84]"></a>task_demo_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, user_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = task_demo_init &rArr; os_show_version &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_register
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_register
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_register
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_register
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_show_version
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_register
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_register
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_register
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_init_all
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_gpio_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>task_demo</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, user_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = task_demo &rArr; process_event &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_event
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_message
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_message
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_get_taskstate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>task_gui_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gui_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = task_gui_init &rArr; InitGraph &rArr; ClearDevice &rArr; clear_screen &rArr; transfer_command &rArr; os_device_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGraph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>task_gui</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, gui_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = task_gui &rArr; GOLDraw &rArr; PbDraw &rArr; GOLPanelDrawTsk &rArr; Arc &rArr; Bar &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh_buffer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFont
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutTextXY
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextWidth
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextHeight
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLCreateScheme
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillBevel
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDevice
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnCreate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bevel
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_get_taskstate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDraw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>os_clock_register</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clockmanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_add_to_manager_list
</UL>

<P><STRONG><a name="[f6]"></a>os_clock_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, clockmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_restore
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_close
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
</UL>

<P><STRONG><a name="[c5]"></a>os_clock_open</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, clockmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_clock_open &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_get
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_gpio_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_open
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_open
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_open
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_open
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relays_open
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_open
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_open
</UL>

<P><STRONG><a name="[f8]"></a>os_clock_close</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, clockmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_clock_close &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_get
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_close
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_close
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_close
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relays_close
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_close
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_close
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[f9]"></a>os_clock_restore</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, clockmanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_get
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1ff]"></a>MY_NVIC_SetVectorTable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clockmanager.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>MY_NVIC_PriorityGroupConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clockmanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[fa]"></a>MY_NVIC_Init</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, clockmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[200]"></a>Ex_NVIC_Config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clockmanager.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>MYRCC_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clockmanager.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>Sys_Soft_Reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clockmanager.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>JTAG_Set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clockmanager.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>WFI_SET</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clockmanager.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>Sys_Standby</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, clockmanager.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>os_device_register</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_device_register &rArr; os_object_init &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_object_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_register
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_register
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_register
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_register
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_register
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_register
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_register
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_register
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relays_register
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_register
</UL>

<P><STRONG><a name="[ff]"></a>os_device_unregister</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_object_detach
</UL>

<P><STRONG><a name="[cb]"></a>os_device_init_all</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_device_init_all
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manufacture_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo_init
</UL>

<P><STRONG><a name="[d7]"></a>os_device_open</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_device_open
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_msg
</UL>

<P><STRONG><a name="[de]"></a>os_device_close</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_event
</UL>

<P><STRONG><a name="[d0]"></a>os_device_read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_event
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_order
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_readwrite_byte
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_control
</UL>

<P><STRONG><a name="[d3]"></a>os_device_write</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_order
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_readwrite_byte
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_control
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
</UL>

<P><STRONG><a name="[d2]"></a>os_device_control</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_event
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_order
</UL>

<P><STRONG><a name="[206]"></a>os_device_set_rx_indicate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, device.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>os_device_set_tx_complete</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, device.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>os_device_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_device_get &rArr; os_object_find &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_msg
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_order
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_control
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[101]"></a>_list_device</STRONG> (Thumb, 68 bytes, Stack size 88 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = _list_device &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[d4]"></a>get_message</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, message.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manufacture
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo
</UL>

<P><STRONG><a name="[d6]"></a>delete_message</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = delete_message &rArr; osfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_get_taskstate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osfree
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manufacture
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo
</UL>

<P><STRONG><a name="[e8]"></a>send_message</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = send_message &rArr; osmalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_get_taskstate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmalloc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmemset
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_process
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>os_object_find</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, obj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_object_find &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_get
</UL>

<P><STRONG><a name="[fe]"></a>os_object_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, obj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_object_init &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
</UL>

<P><STRONG><a name="[100]"></a>os_object_detach</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, obj.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_unregister
</UL>

<P><STRONG><a name="[e7]"></a>os_show_version</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = os_show_version &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo_init
</UL>

<P><STRONG><a name="[ae]"></a>OS_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_Init &rArr; osmalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmalloc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_add_to_manager_list
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>OS_get_taskstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_message
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manufacture
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Free
</UL>

<P><STRONG><a name="[107]"></a>OS_get_tick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer_struct
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_process
</UL>

<P><STRONG><a name="[af]"></a>Shedule</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>systick_process</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = systick_process &rArr; timer_process &rArr; send_message &rArr; osmalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ce]"></a>exam_assert</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_order
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_readwrite_byte
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_control
</UL>

<P><STRONG><a name="[106]"></a>add_timer_struct</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = add_timer_struct &rArr; osmalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_get_tick
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_period
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_expired
</UL>

<P><STRONG><a name="[108]"></a>del_struct</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = del_struct &rArr; osfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osfree
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer_struct
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_process
</UL>

<P><STRONG><a name="[109]"></a>del_timer_struct</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_struct
</UL>

<P><STRONG><a name="[dd]"></a>os_timer_expired</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = os_timer_expired &rArr; add_timer_struct &rArr; osmalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_event
</UL>

<P><STRONG><a name="[da]"></a>os_timer_period</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = os_timer_period &rArr; add_timer_struct &rArr; osmalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_event
</UL>

<P><STRONG><a name="[104]"></a>timer_process</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_process &rArr; send_message &rArr; osmalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_struct
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_get_tick
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_process
</UL>

<P><STRONG><a name="[10a]"></a>_list_timer</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _list_timer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_get_tick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>

<P><STRONG><a name="[e4]"></a>usart1_register</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usart1_register &rArr; os_device_register &rArr; os_object_init &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo_init
</UL>

<P><STRONG><a name="[10c]"></a>uart1_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_close
</UL>

<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[208]"></a>sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart1.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>usart_register</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmalloc
</UL>

<P><STRONG><a name="[114]"></a>uart2_close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_close
</UL>

<P><STRONG><a name="[209]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart2.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 96 bytes, usart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USART2_IRQHandler &rArr; send_message &rArr; osmalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmemcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>led_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo_init
</UL>

<P><STRONG><a name="[db]"></a>leds_control</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = leds_control
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_event
</UL>

<P><STRONG><a name="[116]"></a>relays_register</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, relay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmalloc
</UL>

<P><STRONG><a name="[117]"></a>_relay_control</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, relay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _relay_control
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_open_close
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_control
</UL>

<P><STRONG><a name="[e0]"></a>spi2_register</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi2_register &rArr; os_device_register &rArr; os_object_init &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo_init
</UL>

<P><STRONG><a name="[11b]"></a>spi2_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_close
</UL>

<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spi2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>lcd_refresh_buffer</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_refresh_buffer &rArr; transfer_command &rArr; os_device_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDraw
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_control
</UL>

<P><STRONG><a name="[11e]"></a>clear_screen</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = clear_screen &rArr; transfer_command &rArr; os_device_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDevice
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showstring
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_control
</UL>

<P><STRONG><a name="[121]"></a>lcd_drawpoint</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_drawpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showchar
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutPixel
</UL>

<P><STRONG><a name="[120]"></a>lcd_showchar</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lcd_showchar &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showstring
</UL>

<P><STRONG><a name="[e5]"></a>lcd_register</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_register &rArr; os_device_register &rArr; os_object_init &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo_init
</UL>

<P><STRONG><a name="[1a9]"></a>lcd_read_point</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_read_point
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPixel
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutPixel
</UL>

<P><STRONG><a name="[20a]"></a>lcd_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>sensor_get_voltage</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, me2_ch2o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sensor_get_voltage
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_order
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_avr_cal
</UL>

<P><STRONG><a name="[4b]"></a>me2_ch20_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, me2_ch2o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = me2_ch20_read &rArr; adc_avr_cal &rArr; me2_ch20_control &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_avr_cal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me2_ch2o.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>me2_ch20_register</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, me2_ch2o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = me2_ch20_register &rArr; os_device_register &rArr; os_object_init &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo_init
</UL>

<P><STRONG><a name="[4d]"></a>htu20_init</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, htu20d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = htu20_init &rArr; os_clock_open &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> htu20d.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>htu20_register</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, htu20d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = htu20_register &rArr; os_device_register &rArr; os_object_init &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo_init
</UL>

<P><STRONG><a name="[148]"></a>htu20_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, htu20d.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_close
</UL>

<P><STRONG><a name="[20b]"></a>htu20_read</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, htu20d.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>calcrc_1byte</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, htu20d.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>eeprom_register</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = eeprom_register &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmalloc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manufacture_init
</UL>

<P><STRONG><a name="[e1]"></a>spi1_register</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spi1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi1_register &rArr; os_device_register &rArr; os_object_init &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo_init
</UL>

<P><STRONG><a name="[154]"></a>spi1_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_close
</UL>

<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spi1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>w25qxx_register</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = w25qxx_register &rArr; os_device_register &rArr; os_object_init &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_register
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_demo_init
</UL>

<P><STRONG><a name="[20d]"></a>w25qxx_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w25qxx.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>_flash_read</STRONG> (Thumb, 78 bytes, Stack size 88 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = _flash_read &rArr; w25qxx_read_content &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_content
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>

<P><STRONG><a name="[15f]"></a>_flash_cp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = _flash_cp &rArr; w25qxx_write_content &rArr; w25qxx_write_nocheck &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_content
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cp
</UL>

<P><STRONG><a name="[88]"></a>Add</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(qShellFunTab)
</UL>
<P><STRONG><a name="[89]"></a>PutString</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = PutString &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(qShellFunTab)
</UL>
<P><STRONG><a name="[8a]"></a>list_timer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = list_timer &rArr; _list_timer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(qShellFunTab)
</UL>
<P><STRONG><a name="[8b]"></a>list_device</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = list_device &rArr; _list_device &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(qShellFunTab)
</UL>
<P><STRONG><a name="[8c]"></a>relay_control</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = relay_control &rArr; _relay_control
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_relay_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(qShellFunTab)
</UL>
<P><STRONG><a name="[8d]"></a>list_mem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = list_mem &rArr; _list_mem &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(qShellFunTab)
</UL>
<P><STRONG><a name="[8e]"></a>mem_read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mem_read &rArr; _mem_read &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(qShellFunTab)
</UL>
<P><STRONG><a name="[8f]"></a>flash_read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = flash_read &rArr; _flash_read &rArr; w25qxx_read_content &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(qShellFunTab)
</UL>
<P><STRONG><a name="[90]"></a>flash_cp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = flash_cp &rArr; _flash_cp &rArr; w25qxx_write_content &rArr; w25qxx_write_nocheck &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_cp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(qShellFunTab)
</UL>
<P><STRONG><a name="[165]"></a>Q_Sh_CmdHandler</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, q_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Q_Sh_CmdHandler &rArr; Q_Sh_ParseAnalysis &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_ParseAnalysis
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_LexicalAnalysis
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_rx_callback
</UL>

<P><STRONG><a name="[10b]"></a>Q_Sh_rx_callback</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, q_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Q_Sh_rx_callback &rArr; Q_Sh_CmdHandler &rArr; Q_Sh_ParseAnalysis &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memmove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_CmdHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_rx_indicator
</UL>

<P><STRONG><a name="[12b]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[134]"></a>ADC_Init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[133]"></a>ADC_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[137]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[20e]"></a>ADC_JitterCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>ADC_AutoPowerOffCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>ADC_WaitModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>ADC_AnalogWatchdogSingleChannelCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>ADC_TempSensorCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>ADC_VrefintCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>ADC_VbatCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>ADC_ChannelConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[218]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>ADC_OverrunModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[21b]"></a>ADC_StopOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[21c]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[131]"></a>ADC_DMARequestModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[21d]"></a>ADC_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[21e]"></a>ADC_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>ADC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>DMA_DeInit</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[12f]"></a>DMA_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f0xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[221]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[222]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>DMA_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_get_voltage
</UL>

<P><STRONG><a name="[128]"></a>DMA_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_get_voltage
</UL>

<P><STRONG><a name="[225]"></a>DMA_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>FLASH_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>FLASH_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_open
</UL>

<P><STRONG><a name="[14f]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_close
</UL>

<P><STRONG><a name="[168]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[167]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, stm32f0xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WriteUser
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_SRAMParityConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_VDDAConfig
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_BOOTConfig
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_EnableWRP
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Erase
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
</UL>

<P><STRONG><a name="[152]"></a>FLASH_ErasePage</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[169]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[16a]"></a>FLASH_ProgramWord</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[14d]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
</UL>

<P><STRONG><a name="[22a]"></a>FLASH_OB_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>FLASH_OB_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>FLASH_OB_Launch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Erase
</UL>

<P><STRONG><a name="[16b]"></a>FLASH_OB_Erase</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetRDP
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[16d]"></a>FLASH_OB_EnableWRP</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[16e]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[16f]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[170]"></a>FLASH_OB_BOOTConfig</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[171]"></a>FLASH_OB_VDDAConfig</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[172]"></a>FLASH_OB_SRAMParityConfig</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[173]"></a>FLASH_OB_WriteUser</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[174]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f0xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[22d]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>FLASH_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>GPIO_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphResetCmd
</UL>

<P><STRONG><a name="[c6]"></a>GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_gpio_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_init
</UL>

<P><STRONG><a name="[232]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>GPIO_ReadInputData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_gpio_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_init
</UL>

<P><STRONG><a name="[145]"></a>I2C_DeInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_init
</UL>

<P><STRONG><a name="[147]"></a>I2C_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f0xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_init
</UL>

<P><STRONG><a name="[23c]"></a>I2C_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>I2C_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_init
</UL>

<P><STRONG><a name="[23d]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>I2C_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>I2C_StretchClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>I2C_StopModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>I2C_DualAddressCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>I2C_OwnAddress2Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>I2C_GeneralCallCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>I2C_SlaveByteControlCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>I2C_SlaveAddressConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_read_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_send_data
</UL>

<P><STRONG><a name="[245]"></a>I2C_10BitAddressingModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>I2C_AutoEndCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>I2C_ReloadCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>I2C_NumberOfBytesConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_read_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_send_data
</UL>

<P><STRONG><a name="[13d]"></a>I2C_MasterRequestConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_read_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_send_data
</UL>

<P><STRONG><a name="[13e]"></a>I2C_GenerateSTART</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_read_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_send_data
</UL>

<P><STRONG><a name="[142]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_read_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_send_data
</UL>

<P><STRONG><a name="[248]"></a>I2C_10BitAddressHeaderCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>I2C_GetAddressMatched</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>I2C_GetTransferDirection</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>I2C_TransferHandling</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>I2C_SMBusAlertCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>I2C_ClockTimeoutCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>I2C_ExtendedClockTimeoutCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>I2C_IdleClockTimeoutCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>I2C_TimeoutAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>I2C_TimeoutBConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>I2C_CalculatePEC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>I2C_PECRequestCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>I2C_GetPEC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>I2C_ReadRegister</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_read_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_send_data
</UL>

<P><STRONG><a name="[144]"></a>I2C_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_read_data
</UL>

<P><STRONG><a name="[257]"></a>I2C_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_read_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_send_data
</UL>

<P><STRONG><a name="[141]"></a>I2C_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_read_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_send_data
</UL>

<P><STRONG><a name="[258]"></a>I2C_GetITStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>RCC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>RCC_HSEConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[178]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f0xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[25c]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>RCC_HSICmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>RCC_AdjustHSI14CalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>RCC_HSI14Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>RCC_HSI14ADCRequestCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>RCC_LSEConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>RCC_LSEDriveConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>RCC_LSICmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>RCC_PLLCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>RCC_PREDIV1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>RCC_PCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>RCC_CECCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>RCC_I2CCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>RCC_USARTCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f0xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[271]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[12c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>

<P><STRONG><a name="[274]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>RCC_AHBPeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[166]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[177]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[275]"></a>RCC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>RCC_GetITStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f0xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[279]"></a>SPI_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>SPI_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f0xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_init
</UL>

<P><STRONG><a name="[27a]"></a>I2S_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>I2S_Init</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, stm32f0xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[11a]"></a>SPI_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_init
</UL>

<P><STRONG><a name="[27b]"></a>SPI_TIModeCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>I2S_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>SPI_RxFIFOThresholdConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_init
</UL>

<P><STRONG><a name="[27e]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>SPI_NSSPulseModeCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>SPI_SendData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>SPI_I2S_SendData16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>SPI_ReceiveData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>SPI_I2S_ReceiveData16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>SPI_CRCLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>SPI_CalculateCRC</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>SPI_TransmitCRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>SPI_GetCRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>SPI_LastDMATransferCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>SPI_GetTransmissionFIFOStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>SPI_GetReceptionFIFOStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f0xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>BtnCreate</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BtnCreate &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextWidth
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextHeight
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLAddObject
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui
</UL>

<P><STRONG><a name="[17f]"></a>BtnSetText</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextWidth
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextHeight
</UL>

<P><STRONG><a name="[194]"></a>BtnMsgDefault</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, button.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLMsg
</UL>

<P><STRONG><a name="[192]"></a>BtnTranslateMsg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, button.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLMsg
</UL>

<P><STRONG><a name="[180]"></a>BtnDraw</STRONG> (Thumb, 476 bytes, Stack size 24 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = BtnDraw &rArr; GOLPanelDrawTsk &rArr; Arc &rArr; Bar &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFont
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bevel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutText
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLPanelDrawTsk
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDraw
</UL>

<P><STRONG><a name="[f4]"></a>GOLCreateScheme</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GOLCreateScheme &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLInit
</UL>

<P><STRONG><a name="[184]"></a>GOLInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGraph
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLCreateScheme
</UL>

<P><STRONG><a name="[185]"></a>GOLFree</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridFreeItems
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[188]"></a>GOLDeleteObject</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridFreeItems
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDeleteObjectByID
</UL>

<P><STRONG><a name="[18a]"></a>GOLFindObject</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDeleteObjectByID
</UL>

<P><STRONG><a name="[189]"></a>GOLDeleteObjectByID</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLFindObject
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDeleteObject
</UL>

<P><STRONG><a name="[17e]"></a>GOLAddObject</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnCreate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridCreate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StCreate
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbCreate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PictCreate
</UL>

<P><STRONG><a name="[c8]"></a>GOLDraw</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = GOLDraw &rArr; PbDraw &rArr; GOLPanelDrawTsk &rArr; Arc &rArr; Bar &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh_buffer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StDraw
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdiaDraw
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PictDraw
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbDraw
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridDraw
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDrawCallback
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Free
</UL>

<P><STRONG><a name="[293]"></a>GOLRedrawRec</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, gol.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>GOLMsg</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, gol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StTranslateMsg
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdiaTranslateMsg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdiaMsgDefault
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PictTranslateMsg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridTranslateMsg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridMsgDefault
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLMsgCallback
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnTranslateMsg
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnMsgDefault
</UL>

<P><STRONG><a name="[182]"></a>GOLPanelDrawTsk</STRONG> (Thumb, 624 bytes, Stack size 32 bytes, gol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = GOLPanelDrawTsk &rArr; Arc &rArr; Bar &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillBevel
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bevel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutImage
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbDraw
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnDraw
</UL>

<P><STRONG><a name="[19d]"></a>GridCreate</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, grid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLAddObject
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[19e]"></a>GridClearCellState</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, grid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GridClearCellState
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridDraw
</UL>

<P><STRONG><a name="[190]"></a>GridDraw</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, grid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = GridDraw &rArr; Bevel &rArr; Line &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bevel
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridClearCellState
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutImage
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDraw
</UL>

<P><STRONG><a name="[186]"></a>GridFreeItems</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, grid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDeleteObject
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLFree
</UL>

<P><STRONG><a name="[294]"></a>GridSetCell</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, grid.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>GridSetFocus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, grid.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>GridSetCellState</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, grid.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>GridGetCell</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, grid.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>GridMsgDefault</STRONG> (Thumb, 252 bytes, Stack size 12 bytes, grid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLMsg
</UL>

<P><STRONG><a name="[199]"></a>GridTranslateMsg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, grid.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLMsg
</UL>

<P><STRONG><a name="[19f]"></a>PictCreate</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, picture.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLAddObject
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[196]"></a>PictTranslateMsg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, picture.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLMsg
</UL>

<P><STRONG><a name="[18e]"></a>PictDraw</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, picture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = PictDraw &rArr; Bevel &rArr; Line &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bevel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutImage
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetImageWidth
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetImageHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDraw
</UL>

<P><STRONG><a name="[e9]"></a>InitGraph</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, primitive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitGraph &rArr; ClearDevice &rArr; clear_screen &rArr; transfer_command &rArr; os_device_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDevice
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLInit
</UL>

<P><STRONG><a name="[181]"></a>Bar</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, primitive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Bar &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillBevel
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StDraw
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PictDraw
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbDraw
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridDraw
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLPanelDrawTsk
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnDraw
</UL>

<P><STRONG><a name="[19b]"></a>Arc</STRONG> (Thumb, 962 bytes, Stack size 112 bytes, primitive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Arc &rArr; Bar &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLPanelDrawTsk
</UL>

<P><STRONG><a name="[ea]"></a>Line</STRONG> (Thumb, 486 bytes, Stack size 48 bytes, primitive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Line &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bevel
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridDraw
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawPoly
</UL>

<P><STRONG><a name="[ee]"></a>Bevel</STRONG> (Thumb, 334 bytes, Stack size 72 bytes, primitive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Bevel &rArr; Line &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StDraw
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PictDraw
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridDraw
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLPanelDrawTsk
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnDraw
</UL>

<P><STRONG><a name="[ef]"></a>FillBevel</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, primitive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FillBevel &rArr; Bar &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLPanelDrawTsk
</UL>

<P><STRONG><a name="[1a4]"></a>DrawPoly</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, primitive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line
</UL>

<P><STRONG><a name="[f0]"></a>SetFont</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, primitive.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StDraw
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbDraw
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnDraw
</UL>

<P><STRONG><a name="[1a5]"></a>OutChar</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, primitive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OutChar &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StDraw
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutText
</UL>

<P><STRONG><a name="[183]"></a>OutText</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, primitive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OutText &rArr; OutChar &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutTextXY
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbDraw
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnDraw
</UL>

<P><STRONG><a name="[f3]"></a>OutTextXY</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, primitive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OutTextXY &rArr; OutText &rArr; OutChar &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutText
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui
</UL>

<P><STRONG><a name="[f1]"></a>GetTextWidth</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, primitive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetTextWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnCreate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StDraw
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbDraw
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnSetText
</UL>

<P><STRONG><a name="[f2]"></a>GetTextHeight</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, primitive.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnCreate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbDraw
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnSetText
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StSetText
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StCreate
</UL>

<P><STRONG><a name="[1a0]"></a>GetImageWidth</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, primitive.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PictDraw
</UL>

<P><STRONG><a name="[1a1]"></a>GetImageHeight</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, primitive.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PictDraw
</UL>

<P><STRONG><a name="[1a6]"></a>PbShortToString</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, progressbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PbShortToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbDraw
</UL>

<P><STRONG><a name="[1a8]"></a>PbCreate</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, progressbar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLAddObject
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[298]"></a>PbSetPos</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, progressbar.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>PbTranslateMsg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, progressbar.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>PbDraw</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, progressbar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = PbDraw &rArr; GOLPanelDrawTsk &rArr; Arc &rArr; Bar &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFont
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextWidth
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextHeight
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutText
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLPanelDrawTsk
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbShortToString
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDraw
</UL>

<P><STRONG><a name="[ec]"></a>DelayMs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssd1303.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetDevice
</UL>

<P><STRONG><a name="[1a2]"></a>ResetDevice</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssd1303.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGraph
</UL>

<P><STRONG><a name="[29a]"></a>ScreenSaver</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ssd1303.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>PutPixel</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ssd1303.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_point
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bevel
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutImage1BPP
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutChar
</UL>

<P><STRONG><a name="[1aa]"></a>GetPixel</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssd1303.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_point
</UL>

<P><STRONG><a name="[ed]"></a>ClearDevice</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssd1303.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ClearDevice &rArr; clear_screen &rArr; transfer_command &rArr; os_device_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGraph
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_gui
</UL>

<P><STRONG><a name="[1ab]"></a>PutImage1BPP</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, ssd1303.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = PutImage1BPP &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutImage
</UL>

<P><STRONG><a name="[19c]"></a>PutImage</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssd1303.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PutImage &rArr; PutImage1BPP &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutImage1BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PictDraw
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridDraw
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLPanelDrawTsk
</UL>

<P><STRONG><a name="[18b]"></a>GOLDrawCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssd1303.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDraw
</UL>

<P><STRONG><a name="[193]"></a>GOLMsgCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssd1303.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLMsg
</UL>

<P><STRONG><a name="[18f]"></a>RdiaDraw</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssd1303.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDraw
</UL>

<P><STRONG><a name="[198]"></a>RdiaMsgDefault</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ssd1303.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLMsg
</UL>

<P><STRONG><a name="[197]"></a>RdiaTranslateMsg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssd1303.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLMsg
</UL>

<P><STRONG><a name="[29b]"></a>ExternalMemoryCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssd1303.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>StCreate</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, statictext.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextHeight
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLAddObject
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1ad]"></a>StSetText</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, statictext.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextHeight
</UL>

<P><STRONG><a name="[195]"></a>StTranslateMsg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, statictext.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLMsg
</UL>

<P><STRONG><a name="[18d]"></a>StDraw</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, statictext.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = StDraw &rArr; Bevel &rArr; Line &rArr; PutPixel &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFont
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextWidth
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bevel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDraw
</UL>

<P><STRONG><a name="[17d]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLCreateScheme
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnCreate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridCreate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StCreate
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbCreate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PictCreate
</UL>

<P><STRONG><a name="[187]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridFreeItems
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLDeleteObject
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLFree
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[bd]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_show_version
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_event
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exam_assert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_register
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_msg
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mem
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_CmdHandler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_ParseAnalysis
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_LexicalAnalysis
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_content
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_control
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_avr_cal
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_control
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_rx_callback
</UL>

<P><STRONG><a name="[1b2]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[1b3]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[1b1]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[99]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[9c]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[29c]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[105]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exam_assert
</UL>

<P><STRONG><a name="[103]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_object_init
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_msg
</UL>

<P><STRONG><a name="[29d]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[1bc]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[29e]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_content
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridCreate
</UL>

<P><STRONG><a name="[29f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[f7]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_object_find
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_restore
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_close
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_CmdHandler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_SearchVar
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_ParseAnalysis
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_LexicalAnalysis
</UL>

<P><STRONG><a name="[2a0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_get_voltage
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_content
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_nocheck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_avr_cal
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbDraw
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[2a1]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbShortToString
</UL>

<P><STRONG><a name="[2a2]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[1c1]"></a>_fdiv</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[1c0]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[2a3]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[2a4]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[2a5]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__ARM_scalbnf</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[ad]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[1ae]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[2a6]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1c5]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a2]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[1c7]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1c8]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9e]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[a0]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[1b0]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1bb]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1b6]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2a8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2a9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[2ac]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[1cb]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[1cd]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1cc]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[1c6]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[a4]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a9]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ce]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[1cf]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1d3]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[2ad]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillBevel
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_ParseAnalysis
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_control
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_control
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_control
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StDraw
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PictDraw
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbDraw
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridMsgDefault
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOLPanelDrawTsk
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnDraw
</UL>

<P><STRONG><a name="[1b9]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2af]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[1d4]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[1d6]"></a>_frsb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[2b0]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[1d8]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b0]"></a>SetSysClock</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, system_stm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[60]"></a>gpioa_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>gpioa_clock_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>gpiob_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>gpiob_clock_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>gpioc_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>gpioc_clock_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>gpiod_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>gpiod_clock_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>gpioe_clock_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>gpioe_clock_disable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>gpiof_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>gpiof_clock_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>afio_clock_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>afio_clock_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>adc1_clock_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>adc1_clock_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>adc2_clock_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>adc2_clock_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>tim1_clock_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>tim1_clock_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>spi1_clock_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>spi1_clock_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>spi2_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>spi2_clock_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>i2c2_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>i2c2_clock_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>usart1_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>usart1_clock_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>usart2_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>usart2_clock_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>dma1_clock_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>dma1_clock_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_arch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> clock_arch.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>mem_malloc</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osrealloc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmalloc
</UL>

<P><STRONG><a name="[b7]"></a>mem_free</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osfree
</UL>

<P><STRONG><a name="[c0]"></a>SysTick_Config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_init
</UL>

<P><STRONG><a name="[cc]"></a>process_order</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, manufacture_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = process_order &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_get_voltage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_read
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_control
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exam_assert
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_msg
</UL>

<P><STRONG><a name="[d5]"></a>process_msg</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, manufacture_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = process_msg &rArr; process_order &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_open
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_order
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manufacture
</UL>

<P><STRONG><a name="[38]"></a>uart1_rx_indicator</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = uart1_rx_indicator &rArr; Q_Sh_rx_callback &rArr; Q_Sh_CmdHandler &rArr; Q_Sh_ParseAnalysis &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_rx_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart1.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>uart1_write</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart1_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart1.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>uart1_open</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart1_open &rArr; os_clock_open &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart1.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>uart1_init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart1_init &rArr; os_clock_close &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_close
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart1.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>uart2_write</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart2_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmemcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart2.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>uart2_open</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart2_open &rArr; os_clock_open &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart2.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>uart2_init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, usart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart2_init &rArr; os_clock_close &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_close
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_dma1_channel5_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart2.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>usart2_dma1_channel5_init</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usart2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[40]"></a>relays_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, relay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = relays_close &rArr; os_clock_close &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> relay.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>relays_control</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, relay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = relays_control
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_open_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> relay.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>relays_write</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, relay.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> relay.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>relays_open</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, relay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = relays_open &rArr; os_clock_open &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> relay.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>relays_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, relay.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> relay.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>relay_open_close</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, relay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_relay_control
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relays_control
</UL>

<P><STRONG><a name="[45]"></a>spi2_rx_indicator</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi2.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>spi2_read</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi2_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi2.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>spi2_write</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi2_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi2.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>spi2_open</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi2_open &rArr; os_clock_open &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi2.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>spi2_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spi2_init &rArr; os_clock_open &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxFIFOThresholdConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi2.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>lcd_control</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_control &rArr; lcd_refresh_buffer &rArr; transfer_command &rArr; os_device_write
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh_buffer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>lcd_write</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lcd_write &rArr; lcd_showstring &rArr; lcd_showchar &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh_buffer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>lcd_open</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_open &rArr; os_clock_open &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>lcd_init</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcd_init &rArr; os_clock_open &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh_buffer
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pupdr_set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_outmode_set
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_outtype_set
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_speed_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>gpio_speed_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[124]"></a>gpio_outtype_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_outtype_set
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[125]"></a>gpio_outmode_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_outmode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[126]"></a>gpio_pupdr_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_pupdr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[11d]"></a>transfer_data</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = transfer_data &rArr; os_device_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh_buffer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
</UL>

<P><STRONG><a name="[11c]"></a>transfer_command</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = transfer_command &rArr; os_device_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh_buffer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_control
</UL>

<P><STRONG><a name="[122]"></a>lcd_showstring</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lcd_showstring &rArr; lcd_showchar &rArr; lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showchar
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write
</UL>

<P><STRONG><a name="[4c]"></a>me2_ch20_control</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, me2_ch2o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = me2_ch20_control &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_read
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_get
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exam_assert
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_memmove
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_avr_cal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me2_ch2o.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>adc_avr_cal</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, me2_ch2o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = adc_avr_cal &rArr; me2_ch20_control &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_get_voltage
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_control
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_read
</UL>

<P><STRONG><a name="[12a]"></a>adc1_dma_init</STRONG> (Thumb, 216 bytes, Stack size 88 bytes, me2_ch2o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = adc1_dma_init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestModeConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me2_ch20_init
</UL>

<P><STRONG><a name="[4a]"></a>me2_ch20_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, me2_ch2o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = me2_ch20_init &rArr; adc1_dma_init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmemset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me2_ch2o.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>htu20_rx_indicator</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, htu20d.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> htu20d.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>htu20_send_data</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, htu20d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = htu20_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveAddressConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NumberOfBytesConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_control
</UL>

<P><STRONG><a name="[143]"></a>htu20_read_data</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, htu20d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = htu20_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveAddressConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NumberOfBytesConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_control
</UL>

<P><STRONG><a name="[50]"></a>htu20_control</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, htu20d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = htu20_control &rArr; htu20_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_read_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu20_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> htu20d.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>htu20_write</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, htu20d.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> htu20d.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>htu20_open</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, htu20d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = htu20_open &rArr; os_clock_open &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> htu20d.o(.text)
</UL>
<P><STRONG><a name="[14a]"></a>EE_FindValidPage</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, eeprom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
</UL>

<P><STRONG><a name="[149]"></a>EE_ReadVariable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EE_ReadVariable
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read
</UL>

<P><STRONG><a name="[56]"></a>eeprom_read</STRONG> (Thumb, 100 bytes, Stack size 136 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = eeprom_read &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmemcpy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eeprom.o(.text)
</UL>
<P><STRONG><a name="[14c]"></a>EE_VerifyPageFullWriteVariable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
</UL>

<P><STRONG><a name="[55]"></a>eeprom_write</STRONG> (Thumb, 120 bytes, Stack size 144 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = eeprom_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osmemcpy
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eeprom.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>eeprom_close</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eeprom_close
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eeprom.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>eeprom_open</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eeprom_open
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eeprom.o(.text)
</UL>
<P><STRONG><a name="[151]"></a>EE_Init</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EE_Init &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init
</UL>

<P><STRONG><a name="[52]"></a>eeprom_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eeprom_init &rArr; EE_Init &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eeprom.o(.text)
</UL>
<P><STRONG><a name="[14e]"></a>EE_PageTransfer</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
</UL>

<P><STRONG><a name="[153]"></a>EE_Format</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EE_Format &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[59]"></a>spi1_write</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, spi1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi1_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi1.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>spi1_open</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi1_open &rArr; os_clock_open &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi1.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>spi1_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, spi1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi1_init &rArr; os_clock_open &rArr; os_clock_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi1.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>w25qxx_readwrite_byte</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_write
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_read
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exam_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_sr
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_nocheck
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_control
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_id
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_content
</UL>

<P><STRONG><a name="[156]"></a>w25qxx_read_content</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = w25qxx_read_content &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_readwrite_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_content
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_control
</UL>

<P><STRONG><a name="[157]"></a>w25qxx_read_id</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = w25qxx_read_id &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_readwrite_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_control
</UL>

<P><STRONG><a name="[158]"></a>w25qxx_erase_sector</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = w25qxx_erase_sector &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_busy
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_readwrite_byte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_content
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_control
</UL>

<P><STRONG><a name="[5d]"></a>w25qxx_control</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = w25qxx_control &rArr; w25qxx_erase_sector &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_busy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_sr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_id
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_content
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_readwrite_byte
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w25qxx.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>w25qxx_write</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = w25qxx_write &rArr; w25qxx_control &rArr; w25qxx_erase_sector &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w25qxx.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>w25qxx_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w25qxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> w25qxx.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>w25qxx_init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = w25qxx_init &rArr; w25qxx_control &rArr; w25qxx_erase_sector &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_device_get
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exam_assert
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_control
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_id
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w25qxx.o(.text)
</UL>
<P><STRONG><a name="[15c]"></a>w25qxx_write_nocheck</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = w25qxx_write_nocheck &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_busy
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_readwrite_byte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_content
</UL>

<P><STRONG><a name="[15d]"></a>w25qxx_write_content</STRONG> (Thumb, 698 bytes, Stack size 120 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = w25qxx_write_content &rArr; w25qxx_write_nocheck &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_nocheck
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_content
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_cp
</UL>

<P><STRONG><a name="[15b]"></a>w25qxx_read_sr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = w25qxx_read_sr &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_readwrite_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_busy
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_control
</UL>

<P><STRONG><a name="[15a]"></a>w25qxx_wait_busy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_sr
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_nocheck
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_control
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
</UL>

<P><STRONG><a name="[159]"></a>w25qxx_write_enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = w25qxx_write_enable &rArr; w25qxx_readwrite_byte &rArr; exam_assert &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_readwrite_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_nocheck
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_control
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
</UL>

<P><STRONG><a name="[163]"></a>Q_Sh_Str2Num</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, q_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Q_Sh_Str2Num
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_ParseAnalysis
</UL>

<P><STRONG><a name="[160]"></a>Q_Sh_LexicalAnalysis</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, q_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Q_Sh_LexicalAnalysis &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_StrCut
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_CmdHandler
</UL>

<P><STRONG><a name="[162]"></a>Q_Sh_ParseAnalysis</STRONG> (Thumb, 1108 bytes, Stack size 48 bytes, q_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Q_Sh_ParseAnalysis &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_StrCut
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_SearchVar
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_Str2Num
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_CmdHandler
</UL>

<P><STRONG><a name="[164]"></a>Q_Sh_SearchVar</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, q_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Q_Sh_SearchVar &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_ParseAnalysis
</UL>

<P><STRONG><a name="[161]"></a>Q_Sh_StrCut</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, q_shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_ParseAnalysis
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Sh_LexicalAnalysis
</UL>

<P><STRONG><a name="[1d7]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[1d5]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[5f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[1d1]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1c9]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1b4]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1b5]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
