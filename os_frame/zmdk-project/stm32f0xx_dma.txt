; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\stm32f0xx_dma.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32f0xx_dma.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\stm32f0xx_dma.crf ..\arch\arm\stm32f05x\lib\src\stm32f0xx_dma.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;125      */
;;;126    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6801              LDR      r1,[r0,#0]
;;;127    {
;;;128      /* Check the parameters */
;;;129      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;130    
;;;131      /* Disable the selected DMAy Channelx */
;;;132      DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
000002  4a45              LDR      r2,|L1.280|
000004  4011              ANDS     r1,r1,r2
000006  6001              STR      r1,[r0,#0]
;;;133    
;;;134      /* Reset DMAy Channelx control register */
;;;135      DMAy_Channelx->CCR  = 0;
000008  2100              MOVS     r1,#0
00000a  6001              STR      r1,[r0,#0]
;;;136    
;;;137      /* Reset DMAy Channelx remaining bytes register */
;;;138      DMAy_Channelx->CNDTR = 0;
00000c  6041              STR      r1,[r0,#4]
;;;139    
;;;140      /* Reset DMAy Channelx peripheral address register */
;;;141      DMAy_Channelx->CPAR  = 0;
00000e  6081              STR      r1,[r0,#8]
;;;142    
;;;143      /* Reset DMAy Channelx memory address register */
;;;144      DMAy_Channelx->CMAR = 0;
000010  60c1              STR      r1,[r0,#0xc]
;;;145    
;;;146      if (DMAy_Channelx == DMA1_Channel1)
;;;147      {
;;;148        /* Reset interrupt pending bits for DMA1 Channel1 */
;;;149        DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
000012  4942              LDR      r1,|L1.284|
000014  4a41              LDR      r2,|L1.284|
000016  3908              SUBS     r1,r1,#8
000018  4290              CMP      r0,r2                 ;146
00001a  d102              BNE      |L1.34|
00001c  6848              LDR      r0,[r1,#4]
00001e  220f              MOVS     r2,#0xf
000020  e005              B        |L1.46|
                  |L1.34|
;;;150      }
;;;151      else if (DMAy_Channelx == DMA1_Channel2)
000022  4a3e              LDR      r2,|L1.284|
000024  3214              ADDS     r2,r2,#0x14
000026  4290              CMP      r0,r2
000028  d104              BNE      |L1.52|
;;;152      {
;;;153        /* Reset interrupt pending bits for DMA1 Channel2 */
;;;154        DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
00002a  6848              LDR      r0,[r1,#4]
00002c  22f0              MOVS     r2,#0xf0
                  |L1.46|
00002e  4310              ORRS     r0,r0,r2              ;149
000030  6048              STR      r0,[r1,#4]            ;149
                  |L1.50|
;;;155      }
;;;156      else if (DMAy_Channelx == DMA1_Channel3)
;;;157      {
;;;158        /* Reset interrupt pending bits for DMA1 Channel3 */
;;;159        DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
;;;160      }
;;;161      else if (DMAy_Channelx == DMA1_Channel4)
;;;162      {
;;;163        /* Reset interrupt pending bits for DMA1 Channel4 */
;;;164        DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
;;;165      }
;;;166      else
;;;167      {
;;;168        if (DMAy_Channelx == DMA1_Channel5) 
;;;169        {
;;;170          /* Reset interrupt pending bits for DMA1 Channel5 */
;;;171          DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
;;;172        }
;;;173      }
;;;174    }
000032  4770              BX       lr
                  |L1.52|
000034  4a39              LDR      r2,|L1.284|
000036  3228              ADDS     r2,r2,#0x28           ;156
000038  4290              CMP      r0,r2                 ;156
00003a  d103              BNE      |L1.68|
00003c  6848              LDR      r0,[r1,#4]            ;159
00003e  220f              MOVS     r2,#0xf               ;159
000040  0212              LSLS     r2,r2,#8              ;159
000042  e7f4              B        |L1.46|
                  |L1.68|
000044  4a35              LDR      r2,|L1.284|
000046  323c              ADDS     r2,r2,#0x3c           ;161
000048  4290              CMP      r0,r2                 ;161
00004a  d103              BNE      |L1.84|
00004c  6848              LDR      r0,[r1,#4]            ;164
00004e  220f              MOVS     r2,#0xf               ;164
000050  0312              LSLS     r2,r2,#12             ;164
000052  e7ec              B        |L1.46|
                  |L1.84|
000054  4a31              LDR      r2,|L1.284|
000056  3250              ADDS     r2,r2,#0x50           ;168
000058  4290              CMP      r0,r2                 ;168
00005a  d1ea              BNE      |L1.50|
00005c  6848              LDR      r0,[r1,#4]            ;171
00005e  220f              MOVS     r2,#0xf               ;171
000060  0412              LSLS     r2,r2,#16             ;171
000062  e7e4              B        |L1.46|
;;;175    
                          ENDP

                  DMA_Init PROC
;;;184      */
;;;185    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000064  b530              PUSH     {r4,r5,lr}
;;;186    {
;;;187      uint32_t tmpreg = 0;
;;;188    
;;;189      /* Check the parameters */
;;;190      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;191      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;192      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;193      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;194      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
;;;195      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;196      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;197      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;198      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;199      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;200    
;;;201    /*--------------------------- DMAy Channelx CCR Configuration ----------------*/
;;;202      /* Get the DMAy_Channelx CCR value */
;;;203      tmpreg = DMAy_Channelx->CCR;
000066  6803              LDR      r3,[r0,#0]
;;;204    
;;;205      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;206      tmpreg &= CCR_CLEAR_MASK;
000068  4a2d              LDR      r2,|L1.288|
;;;207    
;;;208      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;209      /* Set DIR bit according to DMA_DIR value */
;;;210      /* Set CIRC bit according to DMA_Mode value */
;;;211      /* Set PINC bit according to DMA_PeripheralInc value */
;;;212      /* Set MINC bit according to DMA_MemoryInc value */
;;;213      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;214      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;215      /* Set PL bits according to DMA_Priority value */
;;;216      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;217      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
00006a  6a0c              LDR      r4,[r1,#0x20]
00006c  4013              ANDS     r3,r3,r2              ;206
00006e  688a              LDR      r2,[r1,#8]
000070  694d              LDR      r5,[r1,#0x14]
000072  4322              ORRS     r2,r2,r4
000074  690c              LDR      r4,[r1,#0x10]
000076  432c              ORRS     r4,r4,r5
000078  4322              ORRS     r2,r2,r4
00007a  698c              LDR      r4,[r1,#0x18]
00007c  4322              ORRS     r2,r2,r4
00007e  69cc              LDR      r4,[r1,#0x1c]
000080  4322              ORRS     r2,r2,r4
000082  6a4c              LDR      r4,[r1,#0x24]
000084  4322              ORRS     r2,r2,r4
000086  6a8c              LDR      r4,[r1,#0x28]
000088  4322              ORRS     r2,r2,r4
00008a  431a              ORRS     r2,r2,r3
;;;218                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;219                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;220                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;221    
;;;222      /* Write to DMAy Channelx CCR */
;;;223      DMAy_Channelx->CCR = tmpreg;
00008c  6002              STR      r2,[r0,#0]
;;;224    
;;;225    /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
;;;226      /* Write to DMAy Channelx CNDTR */
;;;227      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
00008e  68ca              LDR      r2,[r1,#0xc]
000090  6042              STR      r2,[r0,#4]
;;;228    
;;;229    /*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
;;;230      /* Write to DMAy Channelx CPAR */
;;;231      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000092  680a              LDR      r2,[r1,#0]
000094  6082              STR      r2,[r0,#8]
;;;232    
;;;233    /*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
;;;234      /* Write to DMAy Channelx CMAR */
;;;235      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000096  6849              LDR      r1,[r1,#4]
000098  60c1              STR      r1,[r0,#0xc]
;;;236    }
00009a  bd30              POP      {r4,r5,pc}
;;;237    
                          ENDP

                  DMA_StructInit PROC
;;;243      */
;;;244    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
00009c  2100              MOVS     r1,#0
;;;245    {
;;;246    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;247      /* Initialize the DMA_PeripheralBaseAddr member */
;;;248      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
;;;249      /* Initialize the DMA_MemoryBaseAddr member */
;;;250      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
00009e  6001              STR      r1,[r0,#0]
;;;251      /* Initialize the DMA_DIR member */
;;;252      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
0000a0  6041              STR      r1,[r0,#4]
;;;253      /* Initialize the DMA_BufferSize member */
;;;254      DMA_InitStruct->DMA_BufferSize = 0;
0000a2  6081              STR      r1,[r0,#8]
;;;255      /* Initialize the DMA_PeripheralInc member */
;;;256      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
0000a4  60c1              STR      r1,[r0,#0xc]
;;;257      /* Initialize the DMA_MemoryInc member */
;;;258      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
0000a6  6101              STR      r1,[r0,#0x10]
;;;259      /* Initialize the DMA_PeripheralDataSize member */
;;;260      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
0000a8  6141              STR      r1,[r0,#0x14]
;;;261      /* Initialize the DMA_MemoryDataSize member */
;;;262      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
0000aa  6181              STR      r1,[r0,#0x18]
;;;263      /* Initialize the DMA_Mode member */
;;;264      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
0000ac  61c1              STR      r1,[r0,#0x1c]
;;;265      /* Initialize the DMA_Priority member */
;;;266      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
0000ae  6201              STR      r1,[r0,#0x20]
;;;267      /* Initialize the DMA_M2M member */
;;;268      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
0000b0  6241              STR      r1,[r0,#0x24]
0000b2  6281              STR      r1,[r0,#0x28]
;;;269    }
0000b4  4770              BX       lr
;;;270    
                          ENDP

                  DMA_Cmd PROC
;;;278      */
;;;279    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
0000b6  2900              CMP      r1,#0
;;;280    {
;;;281      /* Check the parameters */
;;;282      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;283      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;284    
;;;285      if (NewState != DISABLE)
;;;286      {
;;;287        /* Enable the selected DMAy Channelx */
;;;288        DMAy_Channelx->CCR |= DMA_CCR_EN;
;;;289      }
;;;290      else
;;;291      {
;;;292        /* Disable the selected DMAy Channelx */
;;;293        DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
0000b8  6801              LDR      r1,[r0,#0]
0000ba  d002              BEQ      |L1.194|
0000bc  2201              MOVS     r2,#1                 ;288
0000be  4311              ORRS     r1,r1,r2              ;288
0000c0  e001              B        |L1.198|
                  |L1.194|
0000c2  4a15              LDR      r2,|L1.280|
0000c4  4011              ANDS     r1,r1,r2
                  |L1.198|
0000c6  6001              STR      r1,[r0,#0]            ;288
;;;294      }
;;;295    }
0000c8  4770              BX       lr
;;;296    
                          ENDP

                  DMA_SetCurrDataCounter PROC
;;;337      */
;;;338    void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
0000ca  6041              STR      r1,[r0,#4]
;;;339    {
;;;340      /* Check the parameters */
;;;341      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;342    
;;;343    /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
;;;344      /* Write to DMAy Channelx CNDTR */
;;;345      DMAy_Channelx->CNDTR = DataNumber;
;;;346    }
0000cc  4770              BX       lr
;;;347    
                          ENDP

                  DMA_GetCurrDataCounter PROC
;;;355      */
;;;356    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
0000ce  6840              LDR      r0,[r0,#4]
;;;357    {
;;;358      /* Check the parameters */
;;;359      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;360      /* Return the number of remaining data units for DMAy Channelx */
;;;361      return ((uint16_t)(DMAy_Channelx->CNDTR));
0000d0  b280              UXTH     r0,r0
;;;362    }
0000d2  4770              BX       lr
;;;363    
                          ENDP

                  DMA_ITConfig PROC
;;;430      */
;;;431    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
0000d4  2a00              CMP      r2,#0
;;;432    {
;;;433      /* Check the parameters */
;;;434      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;435      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;436      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;437    
;;;438      if (NewState != DISABLE)
;;;439      {
;;;440        /* Enable the selected DMA interrupts */
;;;441        DMAy_Channelx->CCR |= DMA_IT;
;;;442      }
;;;443      else
;;;444      {
;;;445        /* Disable the selected DMA interrupts */
;;;446        DMAy_Channelx->CCR &= ~DMA_IT;
0000d6  6802              LDR      r2,[r0,#0]
0000d8  d001              BEQ      |L1.222|
0000da  430a              ORRS     r2,r2,r1              ;441
0000dc  e000              B        |L1.224|
                  |L1.222|
0000de  438a              BICS     r2,r2,r1
                  |L1.224|
0000e0  6002              STR      r2,[r0,#0]            ;441
;;;447      }
;;;448    }
0000e2  4770              BX       lr
;;;449    
                          ENDP

                  DMA_GetFlagStatus PROC
;;;482      */
;;;483    FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG)
0000e4  4601              MOV      r1,r0
;;;484    {
;;;485      FlagStatus bitstatus = RESET;
;;;486    
;;;487      /* Check the parameters */
;;;488      assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
;;;489    
;;;490      /* Check the status of the specified DMA flag */
;;;491      if ((DMA1->ISR & DMA_FLAG) != (uint32_t)RESET)
0000e6  4a0d              LDR      r2,|L1.284|
0000e8  2000              MOVS     r0,#0                 ;485
0000ea  3a08              SUBS     r2,r2,#8
0000ec  6812              LDR      r2,[r2,#0]
0000ee  420a              TST      r2,r1
0000f0  d000              BEQ      |L1.244|
;;;492      {
;;;493        /* DMA_FLAG is set */
;;;494        bitstatus = SET;
0000f2  2001              MOVS     r0,#1
                  |L1.244|
;;;495      }
;;;496      else
;;;497      {
;;;498        /* DMA_FLAG is reset */
;;;499        bitstatus = RESET;
;;;500      }
;;;501    
;;;502      /* Return the DMA_FLAG status */
;;;503      return  bitstatus;
;;;504    }
0000f4  4770              BX       lr
;;;505    
                          ENDP

                  DMA_ClearFlag PROC
;;;537      */
;;;538    void DMA_ClearFlag(uint32_t DMA_FLAG)
0000f6  4909              LDR      r1,|L1.284|
;;;539    {
;;;540      /* Check the parameters */
;;;541      assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
;;;542    
;;;543      /* Clear the selected DMA flags */
;;;544      DMA1->IFCR = DMA_FLAG;
0000f8  3908              SUBS     r1,r1,#8
0000fa  6048              STR      r0,[r1,#4]
;;;545    }
0000fc  4770              BX       lr
;;;546    
                          ENDP

                  DMA_GetITStatus PROC
;;;579      */
;;;580    ITStatus DMA_GetITStatus(uint32_t DMA_IT)
0000fe  4601              MOV      r1,r0
;;;581    {
;;;582      ITStatus bitstatus = RESET;
;;;583    
;;;584      /* Check the parameters */
;;;585      assert_param(IS_DMA_GET_IT(DMA_IT));
;;;586    
;;;587      /* Check the status of the specified DMA interrupt */
;;;588      if ((DMA1->ISR & DMA_IT) != (uint32_t)RESET)
000100  4a06              LDR      r2,|L1.284|
000102  2000              MOVS     r0,#0                 ;582
000104  3a08              SUBS     r2,r2,#8
000106  6812              LDR      r2,[r2,#0]
000108  420a              TST      r2,r1
00010a  d000              BEQ      |L1.270|
;;;589      {
;;;590        /* DMA_IT is set */
;;;591        bitstatus = SET;
00010c  2001              MOVS     r0,#1
                  |L1.270|
;;;592      }
;;;593      else
;;;594      {
;;;595        /* DMA_IT is reset */
;;;596        bitstatus = RESET;
;;;597      }
;;;598      /* Return the DMA_IT status */
;;;599      return  bitstatus;
;;;600    }
00010e  4770              BX       lr
;;;601    
                          ENDP

                  DMA_ClearITPendingBit PROC
;;;634      */
;;;635    void DMA_ClearITPendingBit(uint32_t DMA_IT)
000110  4902              LDR      r1,|L1.284|
;;;636    {
;;;637      /* Check the parameters */
;;;638      assert_param(IS_DMA_CLEAR_IT(DMA_IT));
;;;639    
;;;640      /* Clear the selected DMA interrupt pending bits */
;;;641      DMA1->IFCR = DMA_IT;
000112  3908              SUBS     r1,r1,#8
000114  6048              STR      r0,[r1,#4]
;;;642    }
000116  4770              BX       lr
;;;643    
                          ENDP

                  |L1.280|
                          DCD      0x0000fffe
                  |L1.284|
                          DCD      0x40020008
                  |L1.288|
                          DCD      0xffff800f

;*** Start embedded assembler ***

#line 1 "..\\arch\\arm\\stm32f05x\\lib\\src\\stm32f0xx_dma.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f0xx_dma_c_e9b554c0____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f0xx_dma_c_e9b554c0____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f0xx_dma_c_e9b554c0____REVSH|
#line 144
|__asm___15_stm32f0xx_dma_c_e9b554c0____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
