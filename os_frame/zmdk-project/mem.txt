; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\mem.o --asm_dir=.\ --list_dir=.\ --depend=.\mem.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\mem.crf ..\arch\arm\stm32f05x\kernel\mm\mem.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  osmemcpy PROC
;;;68      */
;;;69     void osmemcpy(void *des,void *src,u32 n) 
000000  e003              B        |L1.10|
                  |L1.2|
;;;70     { 
;;;71         u8 *xdes=des;
;;;72         u8 *xsrc=src;
;;;73         while(n--)*xdes++=*xsrc++; 
000002  780b              LDRB     r3,[r1,#0]
000004  1c49              ADDS     r1,r1,#1
000006  7003              STRB     r3,[r0,#0]
000008  1c40              ADDS     r0,r0,#1
                  |L1.10|
00000a  1e52              SUBS     r2,r2,#1
00000c  d2f9              BCS      |L1.2|
;;;74     } 
00000e  4770              BX       lr
;;;75     
                          ENDP

                  osmemset PROC
;;;84      */
;;;85     void osmemset(void *s,u8 c,u32 count) 
000010  e001              B        |L1.22|
                  |L1.18|
;;;86     { 
;;;87         u8 *xs = s; 
;;;88         while(count--)*xs++=c; 
000012  7001              STRB     r1,[r0,#0]
000014  1c40              ADDS     r0,r0,#1
                  |L1.22|
000016  1e52              SUBS     r2,r2,#1
000018  d2fb              BCS      |L1.18|
;;;89     }  
00001a  4770              BX       lr
;;;90     
                          ENDP

                  os_memmove PROC
;;;100     */
;;;101    void *os_memmove(void *dest, const void *src, u32 n)
00001c  b510              PUSH     {r4,lr}
;;;102    {
;;;103        char *tmp = (char *)dest, *s = (char *)src;
00001e  4603              MOV      r3,r0
;;;104        
;;;105        if (s < tmp && tmp < s + n)
000020  4281              CMP      r1,r0
000022  d20f              BCS      |L1.68|
000024  188c              ADDS     r4,r1,r2
000026  429c              CMP      r4,r3
000028  d90c              BLS      |L1.68|
;;;106        {
;;;107            tmp += n;
00002a  1881              ADDS     r1,r0,r2
;;;108            s += n;
;;;109            
;;;110            while (n--)
00002c  e003              B        |L1.54|
                  |L1.46|
;;;111                *(--tmp) = *(--s);
00002e  1e64              SUBS     r4,r4,#1
000030  7823              LDRB     r3,[r4,#0]
000032  1e49              SUBS     r1,r1,#1
000034  700b              STRB     r3,[r1,#0]
                  |L1.54|
000036  1e52              SUBS     r2,r2,#1              ;110
000038  d2f9              BCS      |L1.46|
;;;112        }
;;;113        else
;;;114        {
;;;115            while (n--)
;;;116                *tmp++ = *s++;
;;;117        }
;;;118        
;;;119        return dest;
;;;120    }
00003a  bd10              POP      {r4,pc}
                  |L1.60|
00003c  780c              LDRB     r4,[r1,#0]            ;116
00003e  1c49              ADDS     r1,r1,#1              ;116
000040  701c              STRB     r4,[r3,#0]            ;116
000042  1c5b              ADDS     r3,r3,#1              ;116
                  |L1.68|
000044  1e52              SUBS     r2,r2,#1              ;115
000046  d2f9              BCS      |L1.60|
000048  bd10              POP      {r4,pc}
;;;121    
                          ENDP

                  mem_init PROC
;;;130     */
;;;131    void mem_init(void) 
00004a  b500              PUSH     {lr}
;;;132    { 
;;;133        osmemset(mallco_dev.membase, 0, sizeof(mallco_dev.membase));//内存池素有数据清零 
00004c  2201              MOVS     r2,#1
00004e  0292              LSLS     r2,r2,#10
000050  2100              MOVS     r1,#0
000052  4876              LDR      r0,|L1.556|
000054  f7fffffe          BL       osmemset
;;;134        mallco_dev.memrdy=1;//内存管理初始化OK 
000058  4975              LDR      r1,|L1.560|
00005a  2001              MOVS     r0,#1
00005c  7208              STRB     r0,[r1,#8]
;;;135    } 
00005e  bd00              POP      {pc}
;;;136    
                          ENDP

                  mem_perused PROC
;;;149    static u16 max_used=0;
;;;150    u8 mem_perused(void) 
000060  4a72              LDR      r2,|L1.556|
;;;151    { 
;;;152        u16 used=0; 
000062  2100              MOVS     r1,#0
000064  b510              PUSH     {r4,lr}               ;151
;;;153        u32 i; 
;;;154        for(i=0;i<MEM_ALLOC_TABLE_SIZE;i++) 
;;;155        { 
;;;156            if(mallco_dev.memmap[i])used++;
000066  3a08              SUBS     r2,r2,#8
000068  2301              MOVS     r3,#1
00006a  4608              MOV      r0,r1                 ;154
00006c  029b              LSLS     r3,r3,#10
                  |L1.110|
00006e  0044              LSLS     r4,r0,#1
000070  18a4              ADDS     r4,r4,r2
000072  18e4              ADDS     r4,r4,r3
000074  8924              LDRH     r4,[r4,#8]
000076  2c00              CMP      r4,#0
000078  d001              BEQ      |L1.126|
00007a  1c49              ADDS     r1,r1,#1
00007c  b289              UXTH     r1,r1
                  |L1.126|
00007e  1c40              ADDS     r0,r0,#1              ;154
000080  2840              CMP      r0,#0x40              ;154
000082  d3f4              BCC      |L1.110|
;;;157        } 
;;;158        if(used>max_used)
000084  4869              LDR      r0,|L1.556|
000086  380c              SUBS     r0,r0,#0xc
000088  8802              LDRH     r2,[r0,#0]  ; max_used
00008a  4291              CMP      r1,r2
00008c  d900              BLS      |L1.144|
;;;159        {
;;;160            max_used=used;
00008e  8001              STRH     r1,[r0,#0]
                  |L1.144|
;;;161        }
;;;162        return ((used*100)/MEM_ALLOC_TABLE_SIZE); 
000090  2019              MOVS     r0,#0x19
000092  0300              LSLS     r0,r0,#12
000094  4341              MULS     r1,r0,r1
000096  17c8              ASRS     r0,r1,#31
000098  0f00              LSRS     r0,r0,#28
00009a  1840              ADDS     r0,r0,r1
00009c  0500              LSLS     r0,r0,#20
00009e  0e00              LSRS     r0,r0,#24
;;;163    } 
0000a0  bd10              POP      {r4,pc}
;;;164    
                          ENDP

                  mem_malloc PROC
;;;173     */
;;;174    static u32 mem_malloc(u32 size) 
0000a2  b5f8              PUSH     {r3-r7,lr}
;;;175    { 
;;;176        signed long offset=0; 
;;;177        u16 nmemb; //需要的内存块数 
;;;178        u16 cmemb=0;//连续空内存块数
;;;179        u32 i; 
;;;180        
;;;181        if(!mallco_dev.memrdy)mallco_dev.init();//未初始化,先执行初始化
0000a4  4d62              LDR      r5,|L1.560|
0000a6  4607              MOV      r7,r0                 ;175
0000a8  4e60              LDR      r6,|L1.556|
0000aa  7a28              LDRB     r0,[r5,#8]
0000ac  2400              MOVS     r4,#0                 ;178
0000ae  3e08              SUBS     r6,r6,#8
0000b0  2800              CMP      r0,#0
0000b2  d101              BNE      |L1.184|
0000b4  6830              LDR      r0,[r6,#0]  ; mallco_dev
0000b6  4780              BLX      r0
                  |L1.184|
;;;182        if(size==0)return 0XFFFFFFFF;//不需要分配
0000b8  2f00              CMP      r7,#0
0000ba  d014              BEQ      |L1.230|
;;;183        
;;;184        nmemb=size/MEM_BLOCK_SIZE;   //获取需要分配的连续内存块数
0000bc  0338              LSLS     r0,r7,#12
0000be  0c01              LSRS     r1,r0,#16
;;;185        
;;;186        if(size%MEM_BLOCK_SIZE)nmemb++;
0000c0  0738              LSLS     r0,r7,#28
0000c2  d001              BEQ      |L1.200|
0000c4  1c49              ADDS     r1,r1,#1
0000c6  b289              UXTH     r1,r1
                  |L1.200|
;;;187        
;;;188        __disable_irq();
0000c8  b672              CPSID    i
;;;189        
;;;190        for(offset=MEM_ALLOC_TABLE_SIZE-1;offset>=0;offset--)//搜索整个内存控制区 
0000ca  203f              MOVS     r0,#0x3f
;;;191        {    
;;;192            if(!mallco_dev.memmap[offset])cmemb++; //连续空内存块数增加
0000cc  2201              MOVS     r2,#1
0000ce  0292              LSLS     r2,r2,#10
                  |L1.208|
0000d0  0043              LSLS     r3,r0,#1
0000d2  199b              ADDS     r3,r3,r6
0000d4  189b              ADDS     r3,r3,r2
0000d6  891b              LDRH     r3,[r3,#8]
0000d8  2b00              CMP      r3,#0
0000da  d007              BEQ      |L1.236|
;;;193            else cmemb=0;       //连续内存块清零
0000dc  2400              MOVS     r4,#0
                  |L1.222|
;;;194            
;;;195            if(cmemb==nmemb)      //找到了连续nmemb个空内存块
0000de  428c              CMP      r4,r1
0000e0  d11a              BNE      |L1.280|
;;;196            {
;;;197                for(i=0;i<nmemb;i++)      //标注内存块非空
0000e2  2300              MOVS     r3,#0
0000e4  e00b              B        |L1.254|
                  |L1.230|
0000e6  2000              MOVS     r0,#0                 ;182
0000e8  43c0              MVNS     r0,r0                 ;182
;;;198                { 
;;;199                    mallco_dev.memmap[offset+i]=nmemb; 
;;;200                } 
;;;201                
;;;202                mallco_dev.mem_current_used+=nmemb;
;;;203                
;;;204                if(mallco_dev.mem_current_used>mallco_dev.mem_max_used) //record the max mem have been used
;;;205                {
;;;206                    mallco_dev.mem_max_used=mallco_dev.mem_current_used;
;;;207                }
;;;208                goto sucess;
;;;209                
;;;210            }
;;;211            
;;;212        } 
;;;213        
;;;214        goto fault;
;;;215    sucess:
;;;216        __enable_irq();
;;;217        return (offset*MEM_BLOCK_SIZE);//返回偏移地址 
;;;218    fault:
;;;219        __enable_irq();
;;;220        return 0XFFFFFFFF;//偏移超区了.		
;;;221    } 
0000ea  bdf8              POP      {r3-r7,pc}
                  |L1.236|
0000ec  1c64              ADDS     r4,r4,#1              ;192
0000ee  b2a4              UXTH     r4,r4                 ;192
0000f0  e7f5              B        |L1.222|
                  |L1.242|
0000f2  18c4              ADDS     r4,r0,r3              ;199
0000f4  0064              LSLS     r4,r4,#1              ;199
0000f6  19a4              ADDS     r4,r4,r6              ;199
0000f8  18a4              ADDS     r4,r4,r2              ;199
0000fa  8121              STRH     r1,[r4,#8]            ;199
0000fc  1c5b              ADDS     r3,r3,#1              ;197
                  |L1.254|
0000fe  428b              CMP      r3,r1                 ;197
000100  d3f7              BCC      |L1.242|
000102  896a              LDRH     r2,[r5,#0xa]          ;202
000104  1851              ADDS     r1,r2,r1              ;202
000106  b289              UXTH     r1,r1                 ;202
000108  8169              STRH     r1,[r5,#0xa]          ;202
00010a  89aa              LDRH     r2,[r5,#0xc]          ;204
00010c  4291              CMP      r1,r2                 ;204
00010e  d900              BLS      |L1.274|
000110  81a9              STRH     r1,[r5,#0xc]          ;206
                  |L1.274|
000112  b662              CPSIE    i                     ;216
000114  0100              LSLS     r0,r0,#4              ;217
000116  bdf8              POP      {r3-r7,pc}
                  |L1.280|
000118  1e40              SUBS     r0,r0,#1              ;190
00011a  d5d9              BPL      |L1.208|
00011c  b662              CPSIE    i                     ;219
00011e  e7e2              B        |L1.230|
;;;222    
                          ENDP

                  osfree PROC
;;;273     */
;;;274    u8 osfree(void *ptr) 
000120  b510              PUSH     {r4,lr}
;;;275    { 
;;;276        u32 offset; 
;;;277        if(ptr==NULL)return ERROR;//地址为0. 
000122  2800              CMP      r0,#0
000124  d005              BEQ      |L1.306|
;;;278        offset=(u32)ptr-(u32)(mallco_dev.membase); 
000126  4941              LDR      r1,|L1.556|
000128  3908              SUBS     r1,r1,#8
00012a  1a40              SUBS     r0,r0,r1
00012c  3808              SUBS     r0,r0,#8
;;;279        return mem_free(offset);//释放内存    
00012e  f7fffffe          BL       mem_free
                  |L1.306|
;;;280    } 
000132  bd10              POP      {r4,pc}
;;;281    /*********************************************************************
                          ENDP

                  osmalloc PROC
;;;289     */
;;;290    void *osmalloc(u32 size) 
000134  b510              PUSH     {r4,lr}
;;;291    { 
;;;292        u32 offset; 
;;;293        offset=mem_malloc(size);
000136  f7fffffe          BL       mem_malloc
;;;294        
;;;295        if(offset==0XFFFFFFFF)return NULL; 
00013a  1c41              ADDS     r1,r0,#1
00013c  d004              BEQ      |L1.328|
;;;296        else return (void*)((u32)&mallco_dev.membase+offset); 
00013e  493b              LDR      r1,|L1.556|
000140  3908              SUBS     r1,r1,#8
000142  1808              ADDS     r0,r1,r0
000144  3008              ADDS     r0,r0,#8
;;;297    } 
000146  bd10              POP      {r4,pc}
                  |L1.328|
000148  2000              MOVS     r0,#0                 ;295
00014a  bd10              POP      {r4,pc}
;;;298    /*********************************************************************
                          ENDP

                  osrealloc PROC
;;;306     */
;;;307    void *osrealloc(void *ptr,u32 size) 
00014c  b570              PUSH     {r4-r6,lr}
;;;308    { 
00014e  4605              MOV      r5,r0
000150  460c              MOV      r4,r1
;;;309        u32 offset; 
;;;310        offset=mem_malloc(size);
000152  4608              MOV      r0,r1
000154  f7fffffe          BL       mem_malloc
;;;311        
;;;312        if(offset==0XFFFFFFFF)return NULL;    
000158  1c41              ADDS     r1,r0,#1
00015a  d00d              BEQ      |L1.376|
;;;313        else 
;;;314        { 
;;;315            osmemcpy((void*)((u32)&mallco_dev.membase+offset),ptr,size);//拷贝旧内存内容到新内存  
00015c  4933              LDR      r1,|L1.556|
00015e  4622              MOV      r2,r4
000160  3908              SUBS     r1,r1,#8
000162  1808              ADDS     r0,r1,r0
000164  3008              ADDS     r0,r0,#8
000166  4606              MOV      r6,r0
000168  4629              MOV      r1,r5
00016a  f7fffffe          BL       osmemcpy
;;;316            osfree(ptr);               //释放旧内存
00016e  4628              MOV      r0,r5
000170  f7fffffe          BL       osfree
000174  4630              MOV      r0,r6
;;;317            return (void*)((u32)&mallco_dev.membase+offset);          //返回新内存首地址
;;;318        } 
;;;319    }
000176  bd70              POP      {r4-r6,pc}
                  |L1.376|
000178  2000              MOVS     r0,#0                 ;312
00017a  bd70              POP      {r4-r6,pc}
;;;320    
                          ENDP

                  crc16 PROC
;;;330    
;;;331    u16 crc16(u8 *ptr,u8 len) // ptr ?????,len ?????
00017c  b570              PUSH     {r4-r6,lr}
;;;332    {
00017e  4603              MOV      r3,r0
;;;333        u8 i;
;;;334        u16 crc;
;;;335        while(len--)
;;;336        {
;;;337            for(i=0x80; i!=0; i>>=1)
;;;338            {
;;;339                if((crc&0x8000)!=0) {crc<<=1; crc^=0x1021;} 
000180  4d2c              LDR      r5,|L1.564|
000182  e010              B        |L1.422|
                  |L1.388|
;;;340                else crc<<=1; 
;;;341                if((*ptr&i)!=0) crc^=0x1021; 
000184  781c              LDRB     r4,[r3,#0]
000186  2280              MOVS     r2,#0x80              ;337
                  |L1.392|
000188  0406              LSLS     r6,r0,#16             ;339
00018a  d503              BPL      |L1.404|
00018c  0440              LSLS     r0,r0,#17             ;339
00018e  0c00              LSRS     r0,r0,#16             ;339
000190  4068              EORS     r0,r0,r5              ;339
000192  e001              B        |L1.408|
                  |L1.404|
000194  0440              LSLS     r0,r0,#17             ;340
000196  0c00              LSRS     r0,r0,#16             ;340
                  |L1.408|
000198  4626              MOV      r6,r4                 ;340
00019a  4216              TST      r6,r2
00019c  d000              BEQ      |L1.416|
00019e  4068              EORS     r0,r0,r5
                  |L1.416|
0001a0  0852              LSRS     r2,r2,#1              ;337
0001a2  d1f1              BNE      |L1.392|
;;;342            }
;;;343            ptr++;
0001a4  1c5b              ADDS     r3,r3,#1
                  |L1.422|
0001a6  460a              MOV      r2,r1                 ;335
0001a8  1e49              SUBS     r1,r1,#1              ;335
0001aa  b2c9              UXTB     r1,r1                 ;335
0001ac  2a00              CMP      r2,#0                 ;335
0001ae  d1e9              BNE      |L1.388|
;;;344        }
;;;345        return(crc);
;;;346    }
0001b0  bd70              POP      {r4-r6,pc}
;;;347    
                          ENDP

                  _list_mem PROC
;;;358     */
;;;359    os_err_t _list_mem()
0001b2  b51c              PUSH     {r2-r4,lr}
;;;360    {
;;;361        
;;;362        
;;;363        
;;;364        printf("\r\ntotalmem    blocksize   totalblock  mem_cur_used  mem max_used\r\n");
0001b4  4820              LDR      r0,|L1.568|
0001b6  f7fffffe          BL       __2printf
;;;365        printf("----------  ----------  ----------  -----------   -----------\r\n");
0001ba  a020              ADR      r0,|L1.572|
0001bc  f7fffffe          BL       __2printf
;;;366        
;;;367        printf("0x%08x  0x%08x  0x%08x  0x%08x   0x%08x\r\n",
0001c0  481b              LDR      r0,|L1.560|
0001c2  2210              MOVS     r2,#0x10
0001c4  8981              LDRH     r1,[r0,#0xc]
0001c6  8940              LDRH     r0,[r0,#0xa]
0001c8  9101              STR      r1,[sp,#4]
0001ca  9000              STR      r0,[sp,#0]
0001cc  2340              MOVS     r3,#0x40
0001ce  0191              LSLS     r1,r2,#6
0001d0  a02a              ADR      r0,|L1.636|
0001d2  f7fffffe          BL       __2printf
;;;368               MAX_MEM_SIZE,
;;;369               MEM_BLOCK_SIZE,
;;;370               MEM_ALLOC_TABLE_SIZE,
;;;371               mallco_dev.mem_current_used,
;;;372               mallco_dev.mem_max_used
;;;373               );
;;;374        
;;;375        return 0;
0001d6  2000              MOVS     r0,#0
;;;376    }
0001d8  bd1c              POP      {r2-r4,pc}
;;;377    
                          ENDP

                  mem_free PROC
;;;231     */
;;;232    u8 mem_free(u32 offset) 
0001da  b5f8              PUSH     {r3-r7,lr}
;;;233    { 
;;;234        int i; 
;;;235        if(!mallco_dev.memrdy)//未初始化,先执行初始化
0001dc  4c14              LDR      r4,|L1.560|
0001de  4d13              LDR      r5,|L1.556|
0001e0  7a21              LDRB     r1,[r4,#8]
0001e2  3d08              SUBS     r5,r5,#8
0001e4  2900              CMP      r1,#0
0001e6  d00c              BEQ      |L1.514|
;;;236        {
;;;237            mallco_dev.init();   
;;;238            return ERROR;//未初始化 
;;;239        } 
;;;240        __disable_irq();
0001e8  b672              CPSID    i
;;;241        if(offset<MAX_MEM_SIZE)//偏移在内存池内.
0001ea  2601              MOVS     r6,#1
0001ec  02b6              LSLS     r6,r6,#10
0001ee  42b0              CMP      r0,r6
0001f0  d218              BCS      |L1.548|
;;;242        { 
;;;243            int index=offset/MEM_BLOCK_SIZE;//偏移所在内存块号码 
0001f2  0902              LSRS     r2,r0,#4
;;;244            int nmemb=mallco_dev.memmap[index];   //内存块数量
0001f4  0050              LSLS     r0,r2,#1
0001f6  1940              ADDS     r0,r0,r5
0001f8  1980              ADDS     r0,r0,r6
0001fa  8901              LDRH     r1,[r0,#8]
;;;245            for(i=0;i<nmemb;i++)     //内存块清零
0001fc  2000              MOVS     r0,#0
0001fe  4603              MOV      r3,r0
000200  e008              B        |L1.532|
                  |L1.514|
000202  6828              LDR      r0,[r5,#0]            ;237  ; mallco_dev
000204  4780              BLX      r0                    ;237
000206  e00e              B        |L1.550|
                  |L1.520|
;;;246            { 
;;;247                mallco_dev.memmap[index+i]=0; 
000208  1817              ADDS     r7,r2,r0
00020a  007f              LSLS     r7,r7,#1
00020c  197f              ADDS     r7,r7,r5
00020e  19bf              ADDS     r7,r7,r6
000210  813b              STRH     r3,[r7,#8]
000212  1c40              ADDS     r0,r0,#1              ;245
                  |L1.532|
000214  4288              CMP      r0,r1                 ;245
000216  dbf7              BLT      |L1.520|
;;;248            }
;;;249            
;;;250            mallco_dev.mem_current_used-=nmemb;
000218  8960              LDRH     r0,[r4,#0xa]
00021a  1a40              SUBS     r0,r0,r1
00021c  8160              STRH     r0,[r4,#0xa]
;;;251            
;;;252            goto sucess;
;;;253            
;;;254        }else 
;;;255        {
;;;256            goto fault;
;;;257        }			
;;;258    sucess:
;;;259        __enable_irq();
00021e  b662              CPSIE    i
;;;260        return SUCCESS; 
000220  2001              MOVS     r0,#1
;;;261    fault:
;;;262        __enable_irq();
;;;263        return ERROR;   /*偏移超区了*/
;;;264    } 
000222  bdf8              POP      {r3-r7,pc}
                  |L1.548|
000224  b662              CPSIE    i                     ;262
                  |L1.550|
000226  2000              MOVS     r0,#0                 ;263
000228  bdf8              POP      {r3-r7,pc}
;;;265    /*********************************************************************
                          ENDP

00022a  0000              DCW      0x0000
                  |L1.556|
                          DCD      ||.data||+0xc
                  |L1.560|
                          DCD      ||.data||+0x484
                  |L1.564|
                          DCD      0x00001021
                  |L1.568|
                          DCD      ||.constdata||
                  |L1.572|
00023c  2d2d2d2d          DCB      "----------  ----------  ----------  -----------   -----"
000240  2d2d2d2d
000244  2d2d2020
000248  2d2d2d2d
00024c  2d2d2d2d
000250  2d2d2020
000254  2d2d2d2d
000258  2d2d2d2d
00025c  2d2d2020
000260  2d2d2d2d
000264  2d2d2d2d
000268  2d2d2d20
00026c  20202d2d
000270  2d2d2d  
000273  2d2d2d2d          DCB      "------\r\n",0
000277  2d2d0d0a
00027b  00      
                  |L1.636|
00027c  30782530          DCB      "0x%08x  0x%08x  0x%08x  0x%08x   0x%08x\r\n",0
000280  38782020
000284  30782530
000288  38782020
00028c  30782530
000290  38782020
000294  30782530
000298  38782020
00029c  20307825
0002a0  3038780d
0002a4  0a00    
0002a6  00                DCB      0
0002a7  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  0d0a746f          DCB      0x0d,0x0a,0x74,0x6f
000004  74616c6d          DCB      0x74,0x61,0x6c,0x6d
000008  656d2020          DCB      0x65,0x6d,0x20,0x20
00000c  2020626c          DCB      0x20,0x20,0x62,0x6c
000010  6f636b73          DCB      0x6f,0x63,0x6b,0x73
000014  697a6520          DCB      0x69,0x7a,0x65,0x20
000018  2020746f          DCB      0x20,0x20,0x74,0x6f
00001c  74616c62          DCB      0x74,0x61,0x6c,0x62
000020  6c6f636b          DCB      0x6c,0x6f,0x63,0x6b
000024  20206d65          DCB      0x20,0x20,0x6d,0x65
000028  6d5f6375          DCB      0x6d,0x5f,0x63,0x75
00002c  725f7573          DCB      0x72,0x5f,0x75,0x73
000030  65642020          DCB      0x65,0x64,0x20,0x20
000034  6d656d20          DCB      0x6d,0x65,0x6d,0x20
000038  6d61785f          DCB      0x6d,0x61,0x78,0x5f
00003c  75736564          DCB      0x75,0x73,0x65,0x64
000040  0d0a00            DCB      0x0d,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  max_used
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  mallco_dev
                          DCD      mem_init
                          DCD      mem_perused
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          %        1144
00048c  0000              DCB      0x00,0x00
00048e  0000              DCW      0x0000
000490  0000              DCW      0x0000
000492  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\arch\\arm\\stm32f05x\\kernel\\mm\\mem.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_mem_c_af874bbf____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_mem_c_af874bbf____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_mem_c_af874bbf____REVSH|
#line 144
|__asm___5_mem_c_af874bbf____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
