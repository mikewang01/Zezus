; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\system_stm32f0xx.o --asm_dir=.\ --list_dir=.\ --depend=.\system_stm32f0xx.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\system_stm32f0xx.crf ..\arch\arm\stm32f05x\kernel\corefunc\system_stm32f0xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;265      */
;;;266    static void SetSysClock(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;267    {
;;;268      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2300              MOVS     r3,#0
;;;269      
;;;270      /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
;;;271      /* Enable HSE */    
;;;272      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  484e              LDR      r0,|L1.320|
000006  9300              STR      r3,[sp,#0]            ;268
000008  9301              STR      r3,[sp,#4]
00000a  6801              LDR      r1,[r0,#0]
00000c  2201              MOVS     r2,#1
00000e  0412              LSLS     r2,r2,#16
000010  4311              ORRS     r1,r1,r2
000012  6001              STR      r1,[r0,#0]
;;;273     
;;;274      /* Wait till HSE is ready and if Time out is reached exit */
;;;275      do
;;;276      {
;;;277        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000014  0051              LSLS     r1,r2,#1
;;;278        StartUpCounter++;  
;;;279      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000016  2405              MOVS     r4,#5
000018  0224              LSLS     r4,r4,#8
                  |L1.26|
00001a  6802              LDR      r2,[r0,#0]            ;277
00001c  400a              ANDS     r2,r2,r1              ;277
00001e  9201              STR      r2,[sp,#4]            ;278
000020  9a00              LDR      r2,[sp,#0]            ;278
000022  1c52              ADDS     r2,r2,#1              ;278
000024  9200              STR      r2,[sp,#0]
000026  9a01              LDR      r2,[sp,#4]
000028  2a00              CMP      r2,#0
00002a  d102              BNE      |L1.50|
00002c  9a00              LDR      r2,[sp,#0]
00002e  42a2              CMP      r2,r4
000030  d1f3              BNE      |L1.26|
                  |L1.50|
;;;280    
;;;281      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000032  6801              LDR      r1,[r0,#0]
000034  0389              LSLS     r1,r1,#14
000036  d52c              BPL      |L1.146|
;;;282      {
;;;283        HSEStatus = (uint32_t)0x01;
000038  2201              MOVS     r2,#1
;;;284      }
;;;285      else
;;;286      {
;;;287        HSEStatus = (uint32_t)0x00;
;;;288      }  
;;;289    
;;;290      if (HSEStatus == (uint32_t)0x01)
;;;291      {
;;;292        /* Enable Prefetch Buffer */
;;;293        FLASH->ACR |= FLASH_ACR_PRFTBE;
00003a  4942              LDR      r1,|L1.324|
00003c  9201              STR      r2,[sp,#4]
00003e  680b              LDR      r3,[r1,#0]
000040  2410              MOVS     r4,#0x10
000042  4323              ORRS     r3,r3,r4
000044  600b              STR      r3,[r1,#0]
;;;294        FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY;
000046  680b              LDR      r3,[r1,#0]
000048  4313              ORRS     r3,r3,r2
00004a  600b              STR      r3,[r1,#0]
;;;295     
;;;296        /* HCLK = SYSCLK */
;;;297        RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
00004c  6841              LDR      r1,[r0,#4]
00004e  6041              STR      r1,[r0,#4]
;;;298          
;;;299        /* PCLK = HCLK */
;;;300        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
000050  6841              LDR      r1,[r0,#4]
000052  6041              STR      r1,[r0,#4]
;;;301    
;;;302        /*  PLL configuration:  = HSE *  6 = 48 MHz */
;;;303        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
000054  6841              LDR      r1,[r0,#4]
000056  223f              MOVS     r2,#0x3f
000058  0412              LSLS     r2,r2,#16
00005a  4391              BICS     r1,r1,r2
00005c  6041              STR      r1,[r0,#4]
;;;304        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
00005e  6841              LDR      r1,[r0,#4]
000060  2211              MOVS     r2,#0x11
000062  0412              LSLS     r2,r2,#16
000064  4311              ORRS     r1,r1,r2
000066  6041              STR      r1,[r0,#4]
;;;305                
;;;306        /* Enable PLL */
;;;307        RCC->CR |= RCC_CR_PLLON;
000068  6801              LDR      r1,[r0,#0]
00006a  0522              LSLS     r2,r4,#20
00006c  4311              ORRS     r1,r1,r2
00006e  6001              STR      r1,[r0,#0]
                  |L1.112|
;;;308    
;;;309        /* Wait till PLL is ready */
;;;310        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000070  6801              LDR      r1,[r0,#0]
000072  0189              LSLS     r1,r1,#6
000074  d5fc              BPL      |L1.112|
;;;311        {
;;;312        }
;;;313    
;;;314        /* Select PLL as system clock source */
;;;315        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000076  6841              LDR      r1,[r0,#4]
000078  0889              LSRS     r1,r1,#2
00007a  0089              LSLS     r1,r1,#2
00007c  6041              STR      r1,[r0,#4]
;;;316        RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
00007e  6841              LDR      r1,[r0,#4]
000080  2202              MOVS     r2,#2
000082  4311              ORRS     r1,r1,r2
000084  6041              STR      r1,[r0,#4]
                  |L1.134|
;;;317    
;;;318        /* Wait till PLL is used as system clock source */
;;;319        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
000086  6841              LDR      r1,[r0,#4]
000088  0709              LSLS     r1,r1,#28
00008a  0f89              LSRS     r1,r1,#30
00008c  2902              CMP      r1,#2
00008e  d1fa              BNE      |L1.134|
;;;320        {
;;;321        }
;;;322      }
;;;323      else
;;;324      { /* If HSE fails to start-up, the application will have wrong clock 
;;;325             configuration. User can add here some code to deal with this error */
;;;326      }  
;;;327    }
000090  bd1c              POP      {r2-r4,pc}
                  |L1.146|
000092  9301              STR      r3,[sp,#4]            ;287
000094  bd1c              POP      {r2-r4,pc}
;;;328    
                          ENDP

                  SystemInit PROC
;;;153      */
;;;154    void SystemInit (void)
000096  482a              LDR      r0,|L1.320|
;;;155    {    
;;;156      /* Set HSION bit */
;;;157      RCC->CR |= (uint32_t)0x00000001;
000098  6801              LDR      r1,[r0,#0]
00009a  2201              MOVS     r2,#1
00009c  4311              ORRS     r1,r1,r2
00009e  6001              STR      r1,[r0,#0]
;;;158    
;;;159      /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
;;;160      RCC->CFGR &= (uint32_t)0xF8FFB80C;
0000a0  6841              LDR      r1,[r0,#4]
0000a2  4a29              LDR      r2,|L1.328|
0000a4  4011              ANDS     r1,r1,r2
0000a6  6041              STR      r1,[r0,#4]
;;;161      
;;;162      /* Reset HSEON, CSSON and PLLON bits */
;;;163      RCC->CR &= (uint32_t)0xFEF6FFFF;
0000a8  6801              LDR      r1,[r0,#0]
0000aa  4a28              LDR      r2,|L1.332|
0000ac  4011              ANDS     r1,r1,r2
0000ae  6001              STR      r1,[r0,#0]
;;;164    
;;;165      /* Reset HSEBYP bit */
;;;166      RCC->CR &= (uint32_t)0xFFFBFFFF;
0000b0  6801              LDR      r1,[r0,#0]
0000b2  2201              MOVS     r2,#1
0000b4  0492              LSLS     r2,r2,#18
0000b6  4391              BICS     r1,r1,r2
0000b8  6001              STR      r1,[r0,#0]
;;;167    
;;;168      /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
;;;169      RCC->CFGR &= (uint32_t)0xFFC0FFFF;
0000ba  6841              LDR      r1,[r0,#4]
0000bc  223f              MOVS     r2,#0x3f
0000be  0412              LSLS     r2,r2,#16
0000c0  4391              BICS     r1,r1,r2
0000c2  6041              STR      r1,[r0,#4]
;;;170    
;;;171      /* Reset PREDIV1[3:0] bits */
;;;172      RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
0000c4  6ac1              LDR      r1,[r0,#0x2c]
0000c6  0909              LSRS     r1,r1,#4
0000c8  0109              LSLS     r1,r1,#4
0000ca  62c1              STR      r1,[r0,#0x2c]
;;;173    
;;;174      /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
;;;175      RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
0000cc  6b01              LDR      r1,[r0,#0x30]
0000ce  22ff              MOVS     r2,#0xff
0000d0  3254              ADDS     r2,r2,#0x54
0000d2  4391              BICS     r1,r1,r2
0000d4  6301              STR      r1,[r0,#0x30]
;;;176      
;;;177      /* Reset HSI14 bit */
;;;178      RCC->CR2 &= (uint32_t)0xFFFFFFFE;
0000d6  6b41              LDR      r1,[r0,#0x34]
0000d8  0849              LSRS     r1,r1,#1
0000da  0049              LSLS     r1,r1,#1
0000dc  6341              STR      r1,[r0,#0x34]
;;;179    
;;;180      /* Disable all interrupts */
;;;181      RCC->CIR = 0x00000000;
0000de  2100              MOVS     r1,#0
0000e0  6081              STR      r1,[r0,#8]
;;;182      
;;;183    /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
;;;184      SetSysClock();
0000e2  e7fe              B        SetSysClock
;;;185    }
;;;186    
                          ENDP

                  SystemCoreClockUpdate PROC
;;;213      */
;;;214    void SystemCoreClockUpdate (void)
0000e4  b570              PUSH     {r4-r6,lr}
;;;215    {
;;;216      uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
;;;217    
;;;218      /* Get SYSCLK source -------------------------------------------------------*/
;;;219      tmp = RCC->CFGR & RCC_CFGR_SWS;
0000e6  4e16              LDR      r6,|L1.320|
0000e8  6871              LDR      r1,[r6,#4]
0000ea  200c              MOVS     r0,#0xc
0000ec  4001              ANDS     r1,r1,r0
;;;220      
;;;221      switch (tmp)
;;;222      {
;;;223        case 0x00:  /* HSI used as system clock */
;;;224          SystemCoreClock = HSI_VALUE;
0000ee  4818              LDR      r0,|L1.336|
0000f0  4c18              LDR      r4,|L1.340|
0000f2  d003              BEQ      |L1.252|
0000f4  2904              CMP      r1,#4                 ;221
0000f6  d001              BEQ      |L1.252|
0000f8  2908              CMP      r1,#8                 ;221
0000fa  d001              BEQ      |L1.256|
                  |L1.252|
;;;225          break;
0000fc  6020              STR      r0,[r4,#0]  ; SystemCoreClock
0000fe  e014              B        |L1.298|
                  |L1.256|
;;;226        case 0x04:  /* HSE used as system clock */
;;;227          SystemCoreClock = HSE_VALUE;
;;;228          break;
;;;229        case 0x08:  /* PLL used as system clock */
;;;230          /* Get PLL clock source and multiplication factor ----------------------*/
;;;231          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
000100  6872              LDR      r2,[r6,#4]
;;;232          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
000102  6871              LDR      r1,[r6,#4]
000104  2301              MOVS     r3,#1
;;;233          pllmull = ( pllmull >> 18) + 2;
;;;234          
;;;235          if (pllsource == 0x00)
;;;236          {
;;;237            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;238            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;239          }
;;;240          else
;;;241          {
;;;242            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;243            /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;244            SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
;;;245          }      
;;;246          break;
;;;247        default: /* HSI used as system clock */
;;;248          SystemCoreClock = HSI_VALUE;
;;;249          break;
;;;250      }
;;;251      /* Compute HCLK clock frequency ----------------*/
;;;252      /* Get HCLK prescaler */
;;;253      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
;;;254      /* HCLK clock frequency */
;;;255      SystemCoreClock >>= tmp;  
;;;256    }
000106  0292              LSLS     r2,r2,#10
000108  041b              LSLS     r3,r3,#16             ;232
00010a  0f15              LSRS     r5,r2,#28
00010c  4019              ANDS     r1,r1,r3              ;232
00010e  1cad              ADDS     r5,r5,#2              ;233
000110  2900              CMP      r1,#0                 ;235
000112  d007              BEQ      |L1.292|
000114  6af1              LDR      r1,[r6,#0x2c]         ;242
000116  0709              LSLS     r1,r1,#28             ;242
000118  0f09              LSRS     r1,r1,#28             ;242
00011a  1c49              ADDS     r1,r1,#1              ;242
00011c  f7fffffe          BL       __aeabi_uidivmod
000120  4368              MULS     r0,r5,r0              ;244
000122  e7eb              B        |L1.252|
                  |L1.292|
000124  480c              LDR      r0,|L1.344|
000126  4345              MULS     r5,r0,r5              ;238
000128  6025              STR      r5,[r4,#0]            ;238  ; SystemCoreClock
                  |L1.298|
00012a  6870              LDR      r0,[r6,#4]            ;253
00012c  4909              LDR      r1,|L1.340|
00012e  0600              LSLS     r0,r0,#24             ;253
000130  0f00              LSRS     r0,r0,#28             ;253
000132  1d09              ADDS     r1,r1,#4              ;253
000134  5c08              LDRB     r0,[r1,r0]            ;253
000136  6821              LDR      r1,[r4,#0]            ;255  ; SystemCoreClock
000138  40c1              LSRS     r1,r1,r0              ;255
00013a  6021              STR      r1,[r4,#0]            ;255  ; SystemCoreClock
00013c  bd70              POP      {r4-r6,pc}
;;;257    
                          ENDP

00013e  0000              DCW      0x0000
                  |L1.320|
                          DCD      0x40021000
                  |L1.324|
                          DCD      0x40022000
                  |L1.328|
                          DCD      0xf8ffb80c
                  |L1.332|
                          DCD      0xfef6ffff
                  |L1.336|
                          DCD      0x007a1200
                  |L1.340|
                          DCD      ||.data||
                  |L1.344|
                          DCD      0x003d0900

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x02dc6c00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\arch\\arm\\stm32f05x\\kernel\\corefunc\\system_stm32f0xx.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f0xx_c_5d646a67____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f0xx_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f0xx_c_5d646a67____REVSH|
#line 144
|__asm___18_system_stm32f0xx_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
