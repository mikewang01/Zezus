; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\stm32f0xx_gpio.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32f0xx_gpio.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\stm32f0xx_gpio.crf ..\arch\arm\stm32f05x\lib\src\stm32f0xx_gpio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;116      */
;;;117    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  2109              MOVS     r1,#9
;;;118    {
000002  b510              PUSH     {r4,lr}
;;;119      /* Check the parameters */
;;;120      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;121    
;;;122      if(GPIOx == GPIOA)
000004  06c9              LSLS     r1,r1,#27
000006  4288              CMP      r0,r1
000008  d102              BNE      |L1.16|
;;;123      {
;;;124        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  044c              LSLS     r4,r1,#17
;;;125        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
00000e  e004              B        |L1.26|
                  |L1.16|
;;;126      }
;;;127      else if(GPIOx == GPIOB)
000010  494d              LDR      r1,|L1.328|
000012  4288              CMP      r0,r1
000014  d109              BNE      |L1.42|
;;;128      {
;;;129        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
000016  2101              MOVS     r1,#1
000018  0204              LSLS     r4,r0,#8
                  |L1.26|
00001a  4620              MOV      r0,r4                 ;124
00001c  f7fffffe          BL       RCC_AHBPeriphResetCmd
000020  2100              MOVS     r1,#0                 ;125
000022  4620              MOV      r0,r4                 ;125
000024  f7fffffe          BL       RCC_AHBPeriphResetCmd
                  |L1.40|
;;;130        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
;;;131      }
;;;132      else if(GPIOx == GPIOC)
;;;133      {
;;;134        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
;;;135        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
;;;136      }
;;;137      else if(GPIOx == GPIOD)
;;;138      {
;;;139        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
;;;140        RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
;;;141      }
;;;142      else
;;;143      {
;;;144        if(GPIOx == GPIOF)
;;;145        {
;;;146          RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
;;;147          RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
;;;148        }
;;;149      }
;;;150    }
000028  bd10              POP      {r4,pc}
                  |L1.42|
00002a  4948              LDR      r1,|L1.332|
00002c  4288              CMP      r0,r1                 ;132
00002e  d102              BNE      |L1.54|
000030  2101              MOVS     r1,#1                 ;134
000032  0204              LSLS     r4,r0,#8              ;134
000034  e7f1              B        |L1.26|
                  |L1.54|
000036  4946              LDR      r1,|L1.336|
000038  4288              CMP      r0,r1                 ;137
00003a  d102              BNE      |L1.66|
00003c  2101              MOVS     r1,#1                 ;139
00003e  050c              LSLS     r4,r1,#20             ;139
000040  e7eb              B        |L1.26|
                  |L1.66|
000042  4944              LDR      r1,|L1.340|
000044  4288              CMP      r0,r1                 ;144
000046  d1ef              BNE      |L1.40|
000048  2101              MOVS     r1,#1                 ;146
00004a  058c              LSLS     r4,r1,#22             ;146
00004c  e7e5              B        |L1.26|
;;;151    
                          ENDP

                  GPIO_Init PROC
;;;161      */
;;;162    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
00004e  b5f0              PUSH     {r4-r7,lr}
;;;163    {
;;;164      uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
000050  2200              MOVS     r2,#0
;;;165    
;;;166      /* Check the parameters */
;;;167      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;168      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;169      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;170      assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
;;;171    
;;;172      /*-------------------------- Configure the port pins -----------------------*/
;;;173      /*-- GPIO Mode Configuration --*/
;;;174      for (pinpos = 0x00; pinpos < 0x10; pinpos++)
;;;175      {
;;;176        pos = ((uint32_t)0x01) << pinpos;
;;;177    
;;;178        /* Get the port pins position */
;;;179        currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;180    
;;;181        if (currentpin == pos)
;;;182        {
;;;183          if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
;;;184          {
;;;185            /* Check Speed mode parameters */
;;;186            assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;187    
;;;188            /* Speed mode configuration */
;;;189            GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
000052  2503              MOVS     r5,#3
                  |L1.84|
000054  2301              MOVS     r3,#1                 ;176
000056  680c              LDR      r4,[r1,#0]            ;179
000058  4093              LSLS     r3,r3,r2              ;176
00005a  401c              ANDS     r4,r4,r3              ;179
00005c  429c              CMP      r4,r3                 ;181
00005e  d12a              BNE      |L1.182|
000060  790c              LDRB     r4,[r1,#4]            ;183
000062  2c01              CMP      r4,#1                 ;183
000064  d001              BEQ      |L1.106|
000066  2c02              CMP      r4,#2                 ;183
000068  d112              BNE      |L1.144|
                  |L1.106|
00006a  6887              LDR      r7,[r0,#8]
00006c  0054              LSLS     r4,r2,#1
00006e  462e              MOV      r6,r5
000070  40a6              LSLS     r6,r6,r4
000072  43b7              BICS     r7,r7,r6
000074  6087              STR      r7,[r0,#8]
;;;190            GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
000076  794e              LDRB     r6,[r1,#5]
000078  40a6              LSLS     r6,r6,r4
00007a  6884              LDR      r4,[r0,#8]
00007c  4326              ORRS     r6,r6,r4
00007e  6086              STR      r6,[r0,#8]
;;;191    
;;;192            /* Check Output mode parameters */
;;;193            assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
;;;194    
;;;195            /* Output mode configuration */
;;;196            GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
000080  8884              LDRH     r4,[r0,#4]
000082  439c              BICS     r4,r4,r3
000084  8084              STRH     r4,[r0,#4]
;;;197            GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
000086  8884              LDRH     r4,[r0,#4]
000088  798b              LDRB     r3,[r1,#6]
00008a  4093              LSLS     r3,r3,r2
00008c  431c              ORRS     r4,r4,r3
00008e  8084              STRH     r4,[r0,#4]
                  |L1.144|
;;;198          }
;;;199    
;;;200          GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
000090  6806              LDR      r6,[r0,#0]
000092  0053              LSLS     r3,r2,#1
000094  462c              MOV      r4,r5
000096  409c              LSLS     r4,r4,r3
000098  43a6              BICS     r6,r6,r4
00009a  6006              STR      r6,[r0,#0]
;;;201    
;;;202          GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
00009c  790e              LDRB     r6,[r1,#4]
00009e  6807              LDR      r7,[r0,#0]
0000a0  409e              LSLS     r6,r6,r3
0000a2  433e              ORRS     r6,r6,r7
0000a4  6006              STR      r6,[r0,#0]
;;;203    
;;;204          /* Pull-up Pull down resistor configuration */
;;;205          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
0000a6  68c6              LDR      r6,[r0,#0xc]
0000a8  43a6              BICS     r6,r6,r4
0000aa  60c6              STR      r6,[r0,#0xc]
;;;206          GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
0000ac  79cc              LDRB     r4,[r1,#7]
0000ae  409c              LSLS     r4,r4,r3
0000b0  68c3              LDR      r3,[r0,#0xc]
0000b2  431c              ORRS     r4,r4,r3
0000b4  60c4              STR      r4,[r0,#0xc]
                  |L1.182|
0000b6  1c52              ADDS     r2,r2,#1              ;174
0000b8  2a10              CMP      r2,#0x10              ;174
0000ba  d3cb              BCC      |L1.84|
;;;207        }
;;;208      }
;;;209    }
0000bc  bdf0              POP      {r4-r7,pc}
;;;210    
                          ENDP

                  GPIO_StructInit PROC
;;;216      */
;;;217    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
0000be  4926              LDR      r1,|L1.344|
;;;218    {
;;;219      /* Reset GPIO init structure parameters values */
;;;220      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
;;;221      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
0000c0  6001              STR      r1,[r0,#0]
0000c2  2100              MOVS     r1,#0
0000c4  7101              STRB     r1,[r0,#4]
;;;222      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
0000c6  2202              MOVS     r2,#2
0000c8  7142              STRB     r2,[r0,#5]
;;;223      GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
0000ca  7181              STRB     r1,[r0,#6]
;;;224      GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
0000cc  71c1              STRB     r1,[r0,#7]
;;;225    }
0000ce  4770              BX       lr
;;;226    
                          ENDP

                  GPIO_PinLockConfig PROC
;;;237      */
;;;238    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0000d0  2201              MOVS     r2,#1
;;;239    {
0000d2  b508              PUSH     {r3,lr}
;;;240      __IO uint32_t tmp = 0x00010000;
0000d4  0412              LSLS     r2,r2,#16
;;;241    
;;;242      /* Check the parameters */
;;;243      assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
;;;244      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;245    
;;;246      tmp |= GPIO_Pin;
0000d6  430a              ORRS     r2,r2,r1
;;;247      /* Set LCKK bit */
;;;248      GPIOx->LCKR = tmp;
0000d8  9200              STR      r2,[sp,#0]
0000da  61c2              STR      r2,[r0,#0x1c]
;;;249      /* Reset LCKK bit */
;;;250      GPIOx->LCKR =  GPIO_Pin;
0000dc  61c1              STR      r1,[r0,#0x1c]
;;;251      /* Set LCKK bit */
;;;252      GPIOx->LCKR = tmp;
0000de  9900              LDR      r1,[sp,#0]
0000e0  61c1              STR      r1,[r0,#0x1c]
;;;253      /* Read LCKK bit */
;;;254      tmp = GPIOx->LCKR;
0000e2  69c1              LDR      r1,[r0,#0x1c]
;;;255      /* Read LCKK bit */
;;;256      tmp = GPIOx->LCKR;
0000e4  69c0              LDR      r0,[r0,#0x1c]
0000e6  9000              STR      r0,[sp,#0]
;;;257    }
0000e8  bd08              POP      {r3,pc}
;;;258    
                          ENDP

                  GPIO_ReadInputDataBit PROC
;;;282      */
;;;283    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0000ea  4602              MOV      r2,r0
;;;284    {
;;;285      uint8_t bitstatus = 0x00;
;;;286    
;;;287      /* Check the parameters */
;;;288      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;289      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;290    
;;;291      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
0000ec  8a12              LDRH     r2,[r2,#0x10]
0000ee  2000              MOVS     r0,#0                 ;285
0000f0  420a              TST      r2,r1
0000f2  d000              BEQ      |L1.246|
;;;292      {
;;;293        bitstatus = (uint8_t)Bit_SET;
0000f4  2001              MOVS     r0,#1
                  |L1.246|
;;;294      }
;;;295      else
;;;296      {
;;;297        bitstatus = (uint8_t)Bit_RESET;
;;;298      }
;;;299      return bitstatus;
;;;300    }
0000f6  4770              BX       lr
;;;301    
                          ENDP

                  GPIO_ReadInputData PROC
;;;306      */
;;;307    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
0000f8  8a00              LDRH     r0,[r0,#0x10]
;;;308    {
;;;309      /* Check the parameters */
;;;310      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;311    
;;;312      return ((uint16_t)GPIOx->IDR);
;;;313    }
0000fa  4770              BX       lr
;;;314    
                          ENDP

                  GPIO_ReadOutputDataBit PROC
;;;322      */
;;;323    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0000fc  4602              MOV      r2,r0
;;;324    {
;;;325      uint8_t bitstatus = 0x00;
;;;326    
;;;327      /* Check the parameters */
;;;328      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;329      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;330    
;;;331      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
0000fe  8a92              LDRH     r2,[r2,#0x14]
000100  2000              MOVS     r0,#0                 ;325
000102  420a              TST      r2,r1
000104  d000              BEQ      |L1.264|
;;;332      {
;;;333        bitstatus = (uint8_t)Bit_SET;
000106  2001              MOVS     r0,#1
                  |L1.264|
;;;334      }
;;;335      else
;;;336      {
;;;337        bitstatus = (uint8_t)Bit_RESET;
;;;338      }
;;;339      return bitstatus;
;;;340    }
000108  4770              BX       lr
;;;341    
                          ENDP

                  GPIO_ReadOutputData PROC
;;;346      */
;;;347    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
00010a  8a80              LDRH     r0,[r0,#0x14]
;;;348    {
;;;349      /* Check the parameters */
;;;350      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;351    
;;;352      return ((uint16_t)GPIOx->ODR);
;;;353    }
00010c  4770              BX       lr
;;;354    
                          ENDP

                  GPIO_SetBits PROC
;;;362      */
;;;363    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
00010e  6181              STR      r1,[r0,#0x18]
;;;364    {
;;;365      /* Check the parameters */
;;;366      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;367      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;368    
;;;369      GPIOx->BSRR = GPIO_Pin;
;;;370    }
000110  4770              BX       lr
;;;371    
                          ENDP

                  GPIO_ResetBits PROC
;;;379      */
;;;380    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000112  8501              STRH     r1,[r0,#0x28]
;;;381    {
;;;382      /* Check the parameters */
;;;383      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;384      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;385    
;;;386      GPIOx->BRR = GPIO_Pin;
;;;387    }
000114  4770              BX       lr
;;;388    
                          ENDP

                  GPIO_WriteBit PROC
;;;400      */
;;;401    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000116  2a00              CMP      r2,#0
;;;402    {
000118  d001              BEQ      |L1.286|
;;;403      /* Check the parameters */
;;;404      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;405      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;406      assert_param(IS_GPIO_BIT_ACTION(BitVal));
;;;407    
;;;408      if (BitVal != Bit_RESET)
;;;409      {
;;;410        GPIOx->BSRR = GPIO_Pin;
00011a  6181              STR      r1,[r0,#0x18]
;;;411      }
;;;412      else
;;;413      {
;;;414        GPIOx->BRR = GPIO_Pin ;
;;;415      }
;;;416    }
00011c  4770              BX       lr
                  |L1.286|
00011e  8501              STRH     r1,[r0,#0x28]         ;414
000120  4770              BX       lr
;;;417    
                          ENDP

                  GPIO_Write PROC
;;;424      */
;;;425    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000122  8281              STRH     r1,[r0,#0x14]
;;;426    {
;;;427      /* Check the parameters */
;;;428      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;429    
;;;430      GPIOx->ODR = PortVal;
;;;431    }
000124  4770              BX       lr
;;;432    
                          ENDP

                  GPIO_PinAFConfig PROC
;;;471     */
;;;472    void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
000126  074b              LSLS     r3,r1,#29
;;;473    {
;;;474      uint32_t temp = 0x00;
;;;475      uint32_t temp_2 = 0x00;
;;;476    
;;;477      /* Check the parameters */
;;;478      assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
;;;479      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;480      assert_param(IS_GPIO_AF(GPIO_AF));
;;;481    
;;;482      temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
000128  0edb              LSRS     r3,r3,#27
00012a  409a              LSLS     r2,r2,r3
;;;483      GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
00012c  08c9              LSRS     r1,r1,#3
00012e  b510              PUSH     {r4,lr}               ;473
000130  0089              LSLS     r1,r1,#2
000132  1808              ADDS     r0,r1,r0
000134  6a01              LDR      r1,[r0,#0x20]
000136  240f              MOVS     r4,#0xf
000138  409c              LSLS     r4,r4,r3
00013a  43a1              BICS     r1,r1,r4
00013c  6201              STR      r1,[r0,#0x20]
;;;484      temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
00013e  6a01              LDR      r1,[r0,#0x20]
000140  4311              ORRS     r1,r1,r2
;;;485      GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
000142  6201              STR      r1,[r0,#0x20]
;;;486    }
000144  bd10              POP      {r4,pc}
;;;487    
                          ENDP

000146  0000              DCW      0x0000
                  |L1.328|
                          DCD      0x48000400
                  |L1.332|
                          DCD      0x48000800
                  |L1.336|
                          DCD      0x48000c00
                  |L1.340|
                          DCD      0x48001400
                  |L1.344|
                          DCD      0x0000ffff

;*** Start embedded assembler ***

#line 1 "..\\arch\\arm\\stm32f05x\\lib\\src\\stm32f0xx_gpio.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f0xx_gpio_c_f8e8e39a____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f0xx_gpio_c_f8e8e39a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f0xx_gpio_c_f8e8e39a____REVSH|
#line 144
|__asm___16_stm32f0xx_gpio_c_f8e8e39a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
