; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\relay.o --asm_dir=.\ --list_dir=.\ --depend=.\relay.d --cpu=Cortex-M0 --apcs=interwork -I..\incs\asm-arm\stm32f0xx -I..\incs\kernel -I..\incs\driver -I..\incs\driver\stm32f051x -I..\task\usertask -I..\incs\driver\stm32f103x -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F0xx -DSTM32F051 --omf_browse=.\relay.crf ..\drivers\stm32f051x\misc\relay\relay.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  relays_close PROC
;;;163    
;;;164    static os_err_t  relays_close   (os_device_t* dev)
000000  b510              PUSH     {r4,lr}
;;;165    {  	 
;;;166        
;;;167        
;;;168        os_clock_close("GPIOB");
000002  a041              ADR      r0,|L1.264|
000004  f7fffffe          BL       os_clock_close
;;;169        return SUCCESS;
000008  2001              MOVS     r0,#1
;;;170        
;;;171        
;;;172    }
00000a  bd10              POP      {r4,pc}
;;;173    
                          ENDP

                  relays_control PROC
;;;214    
;;;215    static os_err_t  relays_control(os_device_t* dev, u8 cmd, void *args)
00000c  b570              PUSH     {r4-r6,lr}
;;;216    {
;;;217        if(dev==NULL)
00000e  2800              CMP      r0,#0
000010  d023              BEQ      |L1.90|
;;;218        {
;;;219            return  NULL;
;;;220        }else
;;;221        {
;;;222            os_device_t *__mptr = (dev);
;;;223            relay_device * relay_dev=(relay_device *)( (char *)__mptr - offsetof(usart_device,os_device));
;;;224            
;;;225            switch(((u8*)args)[1])
000012  7852              LDRB     r2,[r2,#1]
;;;226            {
;;;227            case relay1: if(relay_open_close(relay1,cmd)==ERROR) goto fault; relay_dev->relay1_status=cmd; break;
000014  4604              MOV      r4,r0
000016  078d              LSLS     r5,r1,#30
000018  3420              ADDS     r4,r4,#0x20
00001a  0fad              LSRS     r5,r5,#30
00001c  2a01              CMP      r2,#1                 ;225
00001e  d006              BEQ      |L1.46|
000020  2a02              CMP      r2,#2                 ;225
000022  d00e              BEQ      |L1.66|
000024  2a03              CMP      r2,#3                 ;225
000026  d019              BEQ      |L1.92|
000028  2a04              CMP      r2,#4                 ;225
00002a  d12c              BNE      |L1.134|
00002c  e020              B        |L1.112|
                  |L1.46|
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       relay_open_close
000034  2800              CMP      r0,#0
000036  d026              BEQ      |L1.134|
000038  7fa0              LDRB     r0,[r4,#0x1e]
00003a  0880              LSRS     r0,r0,#2
00003c  0080              LSLS     r0,r0,#2
00003e  4328              ORRS     r0,r0,r5
000040  e009              B        |L1.86|
                  |L1.66|
;;;228            case relay2: if(relay_open_close(relay2,cmd)==ERROR) goto fault; relay_dev->relay2_status=cmd;break;
000042  2002              MOVS     r0,#2
000044  f7fffffe          BL       relay_open_close
000048  2800              CMP      r0,#0
00004a  d01c              BEQ      |L1.134|
00004c  7fa0              LDRB     r0,[r4,#0x1e]
00004e  21f3              MOVS     r1,#0xf3
000050  4008              ANDS     r0,r0,r1
000052  00a9              LSLS     r1,r5,#2
000054  e015              B        |L1.130|
                  |L1.86|
000056  77a0              STRB     r0,[r4,#0x1e]         ;227
;;;229            case relay3: if(relay_open_close(relay3,cmd)==ERROR) goto fault; relay_dev->relay3_status=cmd;break;
;;;230            case relay4: if(relay_open_close(relay4,cmd)==ERROR) goto fault; relay_dev->relay4_status=cmd;break;
;;;231            default: return ERROR;
;;;232            };
;;;233            
;;;234        }
;;;235        return  SUCCESS;
000058  2001              MOVS     r0,#1
                  |L1.90|
;;;236    fault:
;;;237        return ERROR;
;;;238        
;;;239    }
00005a  bd70              POP      {r4-r6,pc}
                  |L1.92|
00005c  2003              MOVS     r0,#3                 ;229
00005e  f7fffffe          BL       relay_open_close
000062  2800              CMP      r0,#0                 ;229
000064  d00f              BEQ      |L1.134|
000066  7fa0              LDRB     r0,[r4,#0x1e]         ;229
000068  21cf              MOVS     r1,#0xcf              ;229
00006a  4008              ANDS     r0,r0,r1              ;229
00006c  0129              LSLS     r1,r5,#4              ;229
00006e  e008              B        |L1.130|
                  |L1.112|
000070  2004              MOVS     r0,#4                 ;230
000072  f7fffffe          BL       relay_open_close
000076  2800              CMP      r0,#0                 ;230
000078  d005              BEQ      |L1.134|
00007a  7fa0              LDRB     r0,[r4,#0x1e]         ;230
00007c  0680              LSLS     r0,r0,#26             ;230
00007e  0e80              LSRS     r0,r0,#26             ;230
000080  01a9              LSLS     r1,r5,#6              ;230
                  |L1.130|
000082  4308              ORRS     r0,r0,r1              ;230
000084  e7e7              B        |L1.86|
                  |L1.134|
000086  2000              MOVS     r0,#0                 ;237
000088  bd70              POP      {r4-r6,pc}
;;;240    
                          ENDP

                  relays_write PROC
;;;185    
;;;186    static os_size_t  relays_write(os_device_t* dev, os_off_t pos, const void *buffer, os_size_t size)
00008a  4299              CMP      r1,r3
;;;187    {
00008c  d203              BCS      |L1.150|
;;;188        
;;;189        
;;;190        if(pos>=size||buffer==NULL||size>USART_TX_BUFFER_SIZE)
00008e  2a00              CMP      r2,#0
000090  d001              BEQ      |L1.150|
000092  2b40              CMP      r3,#0x40
000094  d901              BLS      |L1.154|
                  |L1.150|
;;;191        {
;;;192            return  NULL;
000096  2000              MOVS     r0,#0
;;;193        }else
;;;194        {
;;;195            
;;;196            
;;;197        }
;;;198        
;;;199        
;;;200        return SUCCESS;
;;;201    }	
000098  4770              BX       lr
                  |L1.154|
00009a  2001              MOVS     r0,#1                 ;200
00009c  4770              BX       lr
;;;202    
                          ENDP

                  relays_open PROC
;;;140    
;;;141    static os_err_t  relays_open   (os_device_t* dev, u16 oflag)
00009e  b510              PUSH     {r4,lr}
;;;142    {  	 
;;;143        
;;;144        
;;;145        os_clock_open("GPIOB");
0000a0  a019              ADR      r0,|L1.264|
0000a2  f7fffffe          BL       os_clock_open
;;;146        return SUCCESS;
0000a6  2001              MOVS     r0,#1
;;;147        
;;;148        
;;;149    }
0000a8  bd10              POP      {r4,pc}
;;;150    
                          ENDP

                  relays_init PROC
;;;114    
;;;115    static os_err_t  relays_init   (os_device_t* dev)
0000aa  2001              MOVS     r0,#1
;;;116    {  	 
;;;117        
;;;118        
;;;119        //	 os_clock_open("GPIOB");
;;;120        //		GPIOB->CRH&=0XFFFF0FFF; 
;;;121        //		GPIOB->CRH|=0X00003000;//Pb11 ÍÆÍìÊä³ö  
;;;122        //   os_clock_close("GPIOB");
;;;123        //	return SUCCESS;
;;;124        return  SUCCESS;
;;;125        
;;;126    }
0000ac  4770              BX       lr
;;;127    
                          ENDP

                  relays_register PROC
;;;73      */
;;;74     os_err_t relays_register(u16 task_id)
0000ae  b510              PUSH     {r4,lr}
;;;75     {
0000b0  4604              MOV      r4,r0
;;;76         relay_dev=osmalloc(sizeof(key_device));
0000b2  2040              MOVS     r0,#0x40
0000b4  f7fffffe          BL       osmalloc
0000b8  4915              LDR      r1,|L1.272|
;;;77         
;;;78         relay_dev->os_device.type= OS_Device_Class_Misc;
;;;79         
;;;80         relay_dev->os_device.device_id=OS_DEVICE_KEY_ID;
;;;81         
;;;82         relay_dev->register_taskid=task_id;
;;;83         
;;;84         relay_dev->os_device.init=relays_init;
;;;85         
;;;86         relay_dev->os_device.open=relays_open;
;;;87         
;;;88         relay_dev->os_device.write=relays_write;
;;;89         
;;;90         relay_dev->os_device.control=relays_control;
;;;91         
;;;92         relay_dev->os_device.close = relays_close;
;;;93         
;;;94         
;;;95         return os_device_register(&(relay_dev->os_device), 	RELAY_NAME, OS_DEVICE_FLAG_INACTIVATED);
0000ba  2202              MOVS     r2,#2
0000bc  6008              STR      r0,[r1,#0]            ;78  ; relay_dev
0000be  2111              MOVS     r1,#0x11              ;78
0000c0  7401              STRB     r1,[r0,#0x10]         ;78
0000c2  2102              MOVS     r1,#2                 ;80
0000c4  7581              STRB     r1,[r0,#0x16]         ;80
0000c6  8784              STRH     r4,[r0,#0x3c]         ;82
0000c8  4912              LDR      r1,|L1.276|
0000ca  6201              STR      r1,[r0,#0x20]         ;86
0000cc  4912              LDR      r1,|L1.280|
0000ce  6241              STR      r1,[r0,#0x24]         ;88
0000d0  4912              LDR      r1,|L1.284|
0000d2  6301              STR      r1,[r0,#0x30]         ;90
0000d4  4912              LDR      r1,|L1.288|
0000d6  6341              STR      r1,[r0,#0x34]         ;92
0000d8  4912              LDR      r1,|L1.292|
0000da  6281              STR      r1,[r0,#0x28]
0000dc  a112              ADR      r1,|L1.296|
0000de  f7fffffe          BL       os_device_register
;;;96         
;;;97     }
0000e2  bd10              POP      {r4,pc}
;;;98     
                          ENDP

                  _relay_control PROC
;;;286     */
;;;287    os_err_t _relay_control(u8 relay_no,u8 cmd)
0000e4  b510              PUSH     {r4,lr}
;;;288    {
;;;289        
;;;290        relay_open_close(relay_no,cmd);
0000e6  f7fffffe          BL       relay_open_close
;;;291        return 0;
0000ea  2000              MOVS     r0,#0
;;;292    }
0000ec  bd10              POP      {r4,pc}
                          ENDP

                  relay_open_close PROC
;;;252    
;;;253    static os_err_t relay_open_close(u8 relay_num,u8 cmd)
0000ee  2901              CMP      r1,#1
;;;254    {
0000f0  d003              BEQ      |L1.250|
;;;255        
;;;256        if(cmd!=relay_opened&&cmd!=relay_closed)
0000f2  2900              CMP      r1,#0
0000f4  d001              BEQ      |L1.250|
;;;257        {
;;;258            return ERROR;
0000f6  2000              MOVS     r0,#0
;;;259        }
;;;260        if(relay_num==relay1)
;;;261        {
;;;262            RELAY_1=cmd;
;;;263        }else if(relay_num==relay2)
;;;264        {
;;;265            
;;;266        }	 
;;;267        else if(relay_num==relay3)
;;;268        {
;;;269            
;;;270        }
;;;271        else if(relay_num==relay4)
;;;272        {
;;;273            
;;;274        }
;;;275        return  SUCCESS;
;;;276    }
0000f8  4770              BX       lr
                  |L1.250|
0000fa  2801              CMP      r0,#1                 ;260
0000fc  d101              BNE      |L1.258|
0000fe  480c              LDR      r0,|L1.304|
000100  62c1              STR      r1,[r0,#0x2c]         ;262
                  |L1.258|
000102  2001              MOVS     r0,#1                 ;275
000104  4770              BX       lr
;;;277    
                          ENDP

000106  0000              DCW      0x0000
                  |L1.264|
000108  4750494f          DCB      "GPIOB",0
00010c  4200    
00010e  00                DCB      0
00010f  00                DCB      0
                  |L1.272|
                          DCD      ||.data||
                  |L1.276|
                          DCD      relays_init
                  |L1.280|
                          DCD      relays_open
                  |L1.284|
                          DCD      relays_write
                  |L1.288|
                          DCD      relays_control
                  |L1.292|
                          DCD      relays_close
                  |L1.296|
000128  52454c41          DCB      "RELAY",0
00012c  5900    
00012e  00                DCB      0
00012f  00                DCB      0
                  |L1.304|
                          DCD      0x42008180

                          AREA ||.data||, DATA, ALIGN=2

                  relay_dev
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drivers\\stm32f051x\\misc\\relay\\relay.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_relay_c_59e8896b____REV16|
#line 129 "d:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_relay_c_59e8896b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_relay_c_59e8896b____REVSH|
#line 144
|__asm___7_relay_c_59e8896b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
